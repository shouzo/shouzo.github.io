I"B<ul id="markdown-toc">
  <li><a href="#20210518---day_4" id="markdown-toc-20210518---day_4">20210518 - Day_4</a>    <ul>
      <li><a href="#撰寫-makefile" id="markdown-toc-撰寫-makefile">撰寫 Makefile</a>        <ul>
          <li><a href="#step-1---製作相關檔案" id="markdown-toc-step-1---製作相關檔案">STEP 1 - 製作相關檔案</a></li>
          <li><a href="#step-2---製作映像檔" id="markdown-toc-step-2---製作映像檔">STEP 2 - 製作映像檔</a></li>
          <li><a href="#完整-makefile-程式碼" id="markdown-toc-完整-makefile-程式碼">完整 Makefile 程式碼</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<ul>
  <li>工作環境
    <ul>
      <li>Lubuntu 20.04</li>
      <li>VMware Workstation 16.1.1</li>
    </ul>
  </li>
</ul>

<h1 id="20210518---day_4">20210518 - Day_4</h1>
<ul>
  <li>進度摘要
    <ol>
      <li>撰寫 Makefile</li>
      <li>控制畫面顏色 (白色、條紋色)</li>
      <li>矩形的繪製與處理</li>
      <li>螢幕顯示出狀態列圖樣</li>
    </ol>
  </li>
  <li>完整專案
    <ul>
      <li><a href="https://github.com/shouzo/My-30OS/tree/master/20210518">https://github.com/shouzo/My-30OS/tree/master/20210518</a></li>
    </ul>
  </li>
  <li>參考文章
    <ul>
      <li><a href="https://www.gnu.org/software/mtools/manual/mtools.html">Mtools 4.0.27</a>
        <ul>
          <li><a href="https://en.wikipedia.org/wiki/Mtools">mcopy - The following refers to mtools usage in floppy images</a></li>
        </ul>
      </li>
      <li><a href="https://stackoverflow.com/questions/45422374/undefined-reference-to-global-offset-table-only-when-generating-binaries">undefined reference to <em>GLOBAL_OFFSET_TABLE</em> (only when generating binaries)</a></li>
      <li><a href="https://blog.gtwang.org/linux/linux-mount/">Linux 檔案系統掛載（mount）使用教學與範例</a></li>
      <li><a href="https://askubuntu.com/questions/986684/how-would-i-extract-a-img-file">How would I extract a .img file</a></li>
      <li><a href="https://www.itread01.com/p/194699.html">Makefile 雙冒號規則 - zxiaocheng</a></li>
      <li><a href="https://www.howtogeek.com/443342/how-to-use-the-mkfs-command-on-linux/">How to Use the mkfs Command on Linux</a></li>
      <li><a href="https://stackoverflow.com/questions/32893607/how-do-i-write-a-bin-file-512-bytes-to-the-first-sector-sector-0-of-a-floppy">How do I write a bin file (512 bytes) to the first sector (sector 0) of a floppy disk?</a></li>
      <li><a href="http://wen00072.github.io/blog/2014/03/14/study-on-the-linker-script/">Linker Script初探 - GNU Linker Ld手冊略讀</a></li>
      <li><a href="http://www.study-area.org/cyril/opentools/opentools/x909.html">gcc與Obj檔，動態連結與ELF檔</a></li>
      <li><a href="https://blog.louie.lu/2016/11/06/10%E5%88%86%E9%90%98%E8%AE%80%E6%87%82-linker-scripts/">10分鐘讀懂 linker scripts</a></li>
      <li><a href="https://bit.ly/3wijRxO">oslite.ldsを開いて、以下のとおり記述します。</a> (參考 oslite.lds 的環節來撰寫)</li>
    </ul>
  </li>
</ul>

<h2 id="撰寫-makefile">撰寫 Makefile</h2>
<p>從撰寫原始檔、組/編譯程式，到了最後還要跑虛擬機。
如果每次都要一行行打指令會很辛苦。
所以要把這些指令寫成 Makefile，在往後的測試會相對容易和簡便。</p>

<p>Makefile 主要要做的事情有：</p>
<ul>
  <li><strong>STEP 1 - 製作相關檔案</strong>
    <ul>
      <li>處理開機磁區 - <code class="language-plaintext highlighter-rouge">ipl10.asm</code></li>
      <li>包含作業系統本體 -<code class="language-plaintext highlighter-rouge">asmhead.asm</code>、<code class="language-plaintext highlighter-rouge">nasmfunc.asm</code>、<code class="language-plaintext highlighter-rouge">bootpack.c</code>、<code class="language-plaintext highlighter-rouge">os.lds</code></li>
    </ul>
  </li>
  <li><strong>STEP 2 - 製作映像檔</strong>
    <ul>
      <li>製作開機磁區映像檔</li>
      <li>將作業系統本體寫入映像檔</li>
    </ul>
  </li>
</ul>

<h3 id="step-1---製作相關檔案">STEP 1 - 製作相關檔案</h3>
<p>主要的指令有這些</p>
<blockquote>
  <p>nasm ipl10.asm -o ipl10.bin -l ipl10.lst</p>

  <p>nasm asmhead.asm -o asmhead.bin -l asmhead.lst</p>

  <p>nasm -g -f elf nasmfunc.asm -o nasmfunc.o</p>

  <p>gcc -march=i486 -m32 -nostdlib -g -O0 -T os.lds bootpack.c nasmfunc.o -o bootpack.hrb -fno-pie</p>

  <p>cat asmhead.bin bootpack.hrb &gt; haribote.sys</p>
</blockquote>

<h3 id="step-2---製作映像檔">STEP 2 - 製作映像檔</h3>
<p>有兩種產生映像檔的寫法，這兩種都會用到 <code class="language-plaintext highlighter-rouge">mcopy</code>。
<img src="https://i.imgur.com/xRC0Tut.png" alt="" /></p>

<ul>
  <li><strong>寫法 1 (主要指令 - <code class="language-plaintext highlighter-rouge">mformat</code>、<code class="language-plaintext highlighter-rouge">mcopy</code>)</strong>：
    <blockquote>
      <p>mformat -f 1440 -C -B ipl10.bin -i haribote.img ::</p>

      <p>mcopy -i haribote.img haribote.sys ::</p>
    </blockquote>
  </li>
  <li><strong>寫法 2 (主要指令 - <code class="language-plaintext highlighter-rouge">dd</code>、<code class="language-plaintext highlighter-rouge">mcopy</code>)</strong>：
    <blockquote>
      <p>dd if=/dev/zero of=haribote.img bs=512 count=2880</p>

      <p>dd if=ipl10.bin of=haribote.img conv=notrunc</p>

      <p>mcopy -i haribote.img haribote.sys ::</p>
    </blockquote>
  </li>
</ul>

<h3 id="完整-makefile-程式碼">完整 Makefile 程式碼</h3>
<ul>
  <li>專案原始檔 (<strong>==Makefile==</strong>)：<a href="https://github.com/shouzo/My-30OS/tree/master/20210518/Makefile/Makefile">https://github.com/shouzo/My-30OS/tree/master/20210518/Makefile/Makefile</a></li>
</ul>

<p><strong>將以上 STEP 1、STEP 2 裡的指令寫成 Makefile。</strong>
(以下為完整程式碼)</p>

<p>```
OSNAME := haribote</p>

<p>.DEFAULT_GOAL : all
.PHONY : all
all : img
	DEBUG_DIR := ./debug
	OBJDUMP_FLAGS := –full-contents –all-headers –target=binary –architecture=i386:intel –disassemble-all</p>

<p>#===============================================================================
ipl10.bin    : ipl10.asm
asmhead.bin  : asmhead.asm
nasmfunc.o   : nasmfunc.asm</p>

<p>%.bin : %.asm 
	@make make-debug-dir
	nasm $^ -o $@ -l ${DEBUG_DIR}/$*.lst</p>

<p>%.o : %.asm
	@make make-debug-dir
	nasm -f elf $^ -o $@ -l ${DEBUG_DIR}/$*.lst</p>

<p>BOOTPACK_FILES := bootpack.c nasmfunc.o
bootpack.hrb : ${BOOTPACK_FILES} os.lds
	@make make-debug-dir</p>

<p>gcc -march=i486 -m32 -nostdlib -g -O0 <br />
	-T os.lds <br />
	-o $@ <br />
	-fno-pie<br />
	${BOOTPACK_FILES}</p>

<p>objdump ${OBJDUMP_FLAGS} $@ &gt; ${DEBUG_DIR}/$@.dasm</p>

<p>${OSNAME}.sys : asmhead.bin bootpack.hrb
%.sys :
	@make make-debug-dir
	cat $^ &gt; $@</p>

<p>objdump ${OBJDUMP_FLAGS} $@ &gt; ${DEBUG_DIR}/$@.dasm</p>
:ET