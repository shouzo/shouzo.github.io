I"'<ul id="markdown-toc">
  <li><a href="#一作業系統" id="markdown-toc-一作業系統">一、作業系統</a>    <ul>
      <li><a href="#basic-concepts" id="markdown-toc-basic-concepts">Basic Concepts</a></li>
      <li><a href="#cpu-scheduler" id="markdown-toc-cpu-scheduler">CPU Scheduler</a></li>
      <li><a href="#dispatcher" id="markdown-toc-dispatcher">Dispatcher</a></li>
      <li><a href="#scheduling-algorithm-optimization-criteria" id="markdown-toc-scheduling-algorithm-optimization-criteria">Scheduling Algorithm Optimization Criteria</a></li>
      <li><a href="#scheduling-algorithm" id="markdown-toc-scheduling-algorithm">Scheduling Algorithm</a>        <ul>
          <li><a href="#一-first-come-first-served-fcfs先到先服務法" id="markdown-toc-一-first-come-first-served-fcfs先到先服務法">(一) First-Come, First-Served (FCFS)：先到先服務法</a></li>
          <li><a href="#二-shortest-job-first-sjf最短優先法" id="markdown-toc-二-shortest-job-first-sjf最短優先法">(二) Shortest-Job-First (SJF)：最短優先法</a></li>
          <li><a href="#三-priority-scheduling-ps優先權排班法" id="markdown-toc-三-priority-scheduling-ps優先權排班法">(三) Priority Scheduling (PS)：優先權排班法</a></li>
          <li><a href="#四-round-robin-rr輪流法" id="markdown-toc-四-round-robin-rr輪流法">(四) Round Robin (RR)：輪流法</a>            <ul>
              <li><a href="#1-time-quantum-and-context-switch-time" id="markdown-toc-1-time-quantum-and-context-switch-time">1. Time Quantum and Context Switch Time</a></li>
              <li><a href="#2-turnaround-time-varies-with-the-time-quantum" id="markdown-toc-2-turnaround-time-varies-with-the-time-quantum">2. Turnaround Time Varies With The Time Quantum</a></li>
            </ul>
          </li>
          <li><a href="#五-multilevel" id="markdown-toc-五-multilevel">(五) Multilevel</a>            <ul>
              <li><a href="#1-queue" id="markdown-toc-1-queue">1. Queue</a></li>
              <li><a href="#2-feedback-queue" id="markdown-toc-2-feedback-queue">2. Feedback Queue</a></li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="一作業系統">一、作業系統</h2>
<ul>
  <li>課程簡報
    <ul>
      <li><a href="https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170316/ch05.pdf">Chapter 5: Process Scheduling</a></li>
    </ul>
  </li>
  <li>參考資料
    <ul>
      <li><a href="http://www.jollen.org/blog/2006/11/_scheduler_running_process.html">Preemptive Process Scheduling 的觀念</a></li>
      <li><a href="http://moon.cse.yzu.edu.tw/~s981502/7/Chap4.pdf">各種 CPU 排程演算法之探討</a></li>
      <li><a href="http://publish.get.com.tw/BookPre_pdf/51MG060707-2.PDF">行程排程演算法</a></li>
      <li><a href="https://www.tutorialspoint.com/operating_system/os_process_scheduling_algorithms.htm">Operating System Scheduling algorithms</a></li>
    </ul>
  </li>
</ul>

<h3 id="basic-concepts">Basic Concepts</h3>
<ul>
  <li>Maximum CPU utilization obtained with multiprogramming.</li>
  <li>CPU–I/O Burst Cycle – Process execution consists of a cycle of CPU execution and I/O wait.</li>
  <li>CPU burst followed by I/O burst.</li>
  <li>CPU burst distribution is of main concern.</li>
</ul>

<h3 id="cpu-scheduler">CPU Scheduler</h3>
<ul>
  <li>Short-term scheduler selects from among the processes in ready queue, and allocates the CPU to one of them.
    <ul>
      <li>Queue may be ordered in various ways.</li>
    </ul>
  </li>
  <li>CPU scheduling decisions may take place when a process:
    <ol>
      <li>Switches from running to waiting state</li>
      <li>Switches from running to ready state</li>
      <li>Switches from waiting to ready</li>
      <li>Terminates</li>
    </ol>
  </li>
  <li>Scheduling under 1 and 4 is nonpreemptive.</li>
  <li>All other scheduling is preemptive.
    <ul>
      <li>Consider access to shared data.</li>
      <li>Consider preemption while in kernel mode.</li>
      <li>Consider interrupts occurring during crucial OS activities.</li>
    </ul>
  </li>
</ul>

<h3 id="dispatcher">Dispatcher</h3>
<ul>
  <li>Dispatcher module gives control of the CPU to the process selected by the short-term scheduler; this involves：
    <ol>
      <li>switching context</li>
      <li>switching to user mode</li>
      <li>jumping to the proper location in the user program to restart that program</li>
    </ol>
  </li>
  <li>Dispatch latency：time it takes for the dispatcher to stop one process and start another running.</li>
</ul>

<h3 id="scheduling-algorithm-optimization-criteria">Scheduling Algorithm Optimization Criteria</h3>
<p><img src="https://i.imgur.com/LuBGjEu.jpg" alt="" /></p>
<ol>
  <li>CPU utilization – keep the CPU as busy as possible.</li>
  <li>Throughput – # of processes that complete their execution per time unit.</li>
  <li>Turnaround time – amount of time to execute a particular process.</li>
  <li>Waiting time – amount of time a process has been waiting in the ready queue.</li>
  <li>Response time – amount of time it takes from when a request was submitted until the first response is produced, not output (for time-sharing environment).</li>
</ol>

<ul>
  <li>Length of Next CPU Burst
    <ul>
      <li>Determining
  <img src="https://i.imgur.com/1GaCgCb.jpg" alt="" /></li>
      <li>Prediction
  <img src="https://i.imgur.com/HWSLIdj.jpg" alt="" /></li>
    </ul>
  </li>
</ul>

<h3 id="scheduling-algorithm">Scheduling Algorithm</h3>
<h4 id="一-first-come-first-served-fcfs先到先服務法">(一) First-Come, First-Served (FCFS)：先到先服務法</h4>
<p><img src="https://i.imgur.com/xWKL0Z3.jpg" alt="" /></p>

<hr />

<p><img src="https://i.imgur.com/6MIKb3Q.jpg" alt="" /></p>

<ul>
  <li>Convoy effect：很多短時間的 process，都在等一個
長時間的 process 時，所產生的效應 (因為等待時間很長)。</li>
</ul>

<h4 id="二-shortest-job-first-sjf最短優先法">(二) Shortest-Job-First (SJF)：最短優先法</h4>
<ul>
  <li>Associate with each process the length of its next CPU burst.
    <ul>
      <li>Use these lengths to schedule the process with the shortest time.</li>
    </ul>
  </li>
  <li>SJF is optimal – gives minimum average waiting time for a given set of processes.
    <ul>
      <li>The difficulty is knowing the length of the next CPU request.</li>
      <li>Could ask the user.</li>
    </ul>
  </li>
</ul>

<p><img src="https://i.imgur.com/Wf8bEgG.jpg" alt="" /></p>

<h4 id="三-priority-scheduling-ps優先權排班法">(三) Priority Scheduling (PS)：優先權排班法</h4>
<ul>
  <li>A priority number (integer) is associated with each process.</li>
  <li>The CPU is allocated to the process with the highest priority (smallest integer » highest priority).
    <ul>
      <li>Preemptive</li>
      <li>Nonpreemptive</li>
    </ul>
  </li>
  <li>SJF is priority scheduling where priority is the inverse of predicted next CPU burst time.</li>
  <li>Problem：Starvation – low priority processes may never execute.</li>
  <li>Solution：Aging – as time progresses increase the priority of the process.</li>
</ul>

<p><img src="https://i.imgur.com/ZeyVmU1.jpg" alt="" /></p>

<h4 id="四-round-robin-rr輪流法">(四) Round Robin (RR)：輪流法</h4>
<ul>
  <li>Each process gets a small unit of CPU time (time quantum q), usually 10-100 milliseconds. After this time has elapsed, the process is preempted and added to the end of the ready queue.</li>
  <li>If there are n processes in the ready queue and the time quantum is q, then each process gets 1/n of the CPU time in chunks of at most q time units at once. No process waits more than (n-1)q time units.</li>
  <li>Timer interrupts every quantum to schedule next process.</li>
  <li>Performance.
    <ul>
      <li>q large » FIFO.</li>
      <li>q small » q must be large with respect to context switch, otherwise overhead is too high.</li>
    </ul>
  </li>
</ul>

<p><img src="https://i.imgur.com/uu9W1cI.jpg" alt="" /></p>

<h5 id="1-time-quantum-and-context-switch-time">1. Time Quantum and Context Switch Time</h5>
<p><img src="http://i.imgur.com/7SMF7rd.jpg" alt="" /></p>

<h5 id="2-turnaround-time-varies-with-the-time-quantum">2. Turnaround Time Varies With The Time Quantum</h5>
<p><img src="http://i.imgur.com/EtNCekP.jpg" alt="" /></p>

<h4 id="五-multilevel">(五) Multilevel</h4>
<h5 id="1-queue">1. Queue</h5>
<ul>
  <li>Ready queue is partitioned into separate queues, eg:
    <ul>
      <li>foreground (interactive)</li>
      <li>background (batch)</li>
    </ul>
  </li>
  <li>Process permanently in a given queue.
Each queue has its own scheduling algorithm:
    <ul>
      <li>foreground – RR</li>
      <li>background – FCFS</li>
    </ul>
  </li>
  <li>Scheduling must be done between the queues:
    <ul>
      <li>Fixed priority scheduling; (i.e., serve all from foreground then from background). Possibility of starvation.</li>
      <li>Time slice – each queue gets a certain amount of CPU time which it can schedule amongst its processes; i.e., 80% to foreground in RR.</li>
      <li>20% to background in FCFS.</li>
    </ul>
  </li>
</ul>

<p><img src="https://i.imgur.com/rW9GXTr.jpg" alt="" /></p>

<h5 id="2-feedback-queue">2. Feedback Queue</h5>
<ul>
  <li>A process can move between the various queues; aging can be implemented this way.</li>
  <li>Multilevel-feedback-queue scheduler. defined by the following parameters:
    <ul>
      <li>number of queues.</li>
      <li>scheduling algorithms for each queue.</li>
      <li>method used to determine when to upgrade a process.</li>
      <li>method used to determine when to demote a process.</li>
      <li>method used to determine which queue a process will enter when that process needs service.</li>
    </ul>
  </li>
</ul>

<p><img src="https://i.imgur.com/Nc2SsIQ.jpg" alt="" /></p>

<ul>
  <li>課程作業</li>
</ul>
:ET