I"<ul id="markdown-toc">
  <li><a href="#一作業系統" id="markdown-toc-一作業系統">一、作業系統</a>    <ul>
      <li><a href="#一-process-in-memory" id="markdown-toc-一-process-in-memory">(一) Process in Memory</a></li>
      <li><a href="#二-process-state" id="markdown-toc-二-process-state">(二) Process State</a></li>
      <li><a href="#三-process-control-block-pcb" id="markdown-toc-三-process-control-block-pcb">(三) Process Control Block (PCB)</a></li>
      <li><a href="#四-process-switch" id="markdown-toc-四-process-switch">(四) Process Switch</a></li>
      <li><a href="#五-processthread" id="markdown-toc-五-processthread">(五) Process、Thread</a></li>
      <li><a href="#六-process-scheduling" id="markdown-toc-六-process-scheduling">(六) Process Scheduling</a>        <ul>
          <li><a href="#schedulers" id="markdown-toc-schedulers">Schedulers</a></li>
          <li><a href="#processes" id="markdown-toc-processes">Processes</a></li>
        </ul>
      </li>
      <li><a href="#七-process-creation" id="markdown-toc-七-process-creation">(七) Process Creation</a></li>
    </ul>
  </li>
</ul>

<h2 id="一作業系統">一、作業系統</h2>
<ul>
  <li><a href="https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170309/ch03.pdf">課程簡報 - Ch3：Process Concept</a></li>
</ul>

<h3 id="一-process-in-memory">(一) Process in Memory</h3>
<p><img src="https://i.imgur.com/I9HnU1O.jpg" alt="" /></p>

<h3 id="二-process-state">(二) Process State</h3>
<p><img src="https://i.imgur.com/mFSgwiJ.jpg" alt="" /></p>
<ul>
  <li><strong>new</strong>: The process is being created.</li>
  <li><strong>running</strong>: Instructions are being executed.</li>
  <li><strong>waiting</strong>: The process is waiting for some event to occur.</li>
  <li><strong>ready</strong>: The process is waiting to be assigned to a processor.</li>
  <li><strong>terminated</strong>: The process has finished execution.</li>
</ul>

<h3 id="三-process-control-block-pcb">(三) Process Control Block (PCB)</h3>
<p><img src="https://i.imgur.com/fOf7e2Q.jpg" alt="" /></p>

<h3 id="四-process-switch">(四) Process Switch</h3>
<p><img src="https://i.imgur.com/Bto5DiZ.jpg" alt="" /></p>

<h3 id="五-processthread">(五) Process、Thread</h3>
<ul>
  <li>參考資料
    <ul>
      <li><a href="https://goo.gl/whe9F">Program / Process / Thread 的差別</a></li>
      <li><a href="https://goo.gl/5BnKWN">“Process 行程”、”Thread 執行緒”、”Multithreading 多執行緒” 簡介</a>
<img src="https://i.imgur.com/DI9y5OS.jpg" alt="" /></li>
    </ul>
  </li>
</ul>

<h3 id="六-process-scheduling">(六) Process Scheduling</h3>
<ul>
  <li>Process scheduler selects among available processes for next execution on CPU.</li>
  <li>Maintains scheduling queues of processes.
    <ul>
      <li>Job queue – set of all processes in the system.</li>
      <li>Ready queue – set of all processes residing in main memory, ready and waiting to
execute.</li>
      <li>Device queues – set of processes waiting for an I/O device.</li>
      <li>Processes migrate among the various queues.</li>
    </ul>
  </li>
</ul>

<h4 id="schedulers">Schedulers</h4>
<ul>
  <li><strong>Long-term scheduler</strong> (or job scheduler) – selects which processes should be brought into the
ready queue.</li>
  <li><strong>Short-term scheduler</strong> (or CPU scheduler) – selects which process should be executed next and
allocates CPU.
    <ul>
      <li>Sometimes the only scheduler in a system.</li>
    </ul>
  </li>
  <li>The long-term scheduler controls the <strong>degree of multiprogramming</strong>.</li>
  <li><strong>Medium-term scheduler</strong> can be added if degree of multiple programming needs to decrease.
    <ul>
      <li>Remove process from memory, store on disk, bring back in from disk to continue execution:
swapping.</li>
    </ul>
  </li>
</ul>

<p><strong><a href="http://enews.open2u.com.tw/~noupd/book_up/1746/8719.htm">Degree of multiprogramming</a></strong>：多工程度、記憶體中行程的總數量</p>

<h4 id="processes">Processes</h4>
<ul>
  <li><strong>I/O-bound process</strong> – spends more time doing I/O than computations, many short CPU
bursts.
    <ul>
      <li>行程大部份的時間在做 I/O，只有少部份的時間在做計算。</li>
    </ul>
  </li>
  <li><strong>CPU-bound process</strong> – spends more time doing computations; few very long CPU bursts.
    <ul>
      <li>行程大部份的時間在做計算，只有少部份的時間在做  I/O。</li>
    </ul>
  </li>
</ul>

<p><img src="https://i.imgur.com/Xnhn0Sa.jpg" alt="" /></p>

<h3 id="七-process-creation">(七) Process Creation</h3>
<p><img src="https://i.imgur.com/MDkGD81.jpg" alt="" /></p>
<ul>
  <li>UNIX examples
    <ul>
      <li><strong>fork()</strong>：system call creates new process</li>
      <li><strong>exec()</strong>：system call used after a fork() to replace the process’ memory space with a new program</li>
    </ul>
  </li>
</ul>

<p><img src="https://i.imgur.com/AxrT24a.jpg" alt="" /></p>

<ul>
  <li>課程作業</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;sys/types.h&gt;
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">pid_t</span> <span class="n">pid</span><span class="p">;</span>
	
<span class="cm">/* fork a child process */</span>
	<span class="n">pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>

	<span class="k">if</span> <span class="p">(</span><span class="n">pid</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>		<span class="c1">// erro occurred</span>
		<span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">"Fork Failed"</span><span class="p">);</span>
		<span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">pid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>	<span class="c1">// child process</span>
		<span class="n">execlp</span><span class="p">(</span><span class="s">"/bin/ls"</span><span class="p">,</span> <span class="s">"ls"</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="k">else</span> <span class="p">{</span>			<span class="c1">// parent process</span>
		<span class="c1">// parent will wait for the child to complete</span>
		<span class="n">wait</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">"Child Complete</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
	<span class="p">}</span>	
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>執行結果</li>
</ul>

<p><img src="https://i.imgur.com/CfTMr9N.jpg" alt="" /></p>
:ET