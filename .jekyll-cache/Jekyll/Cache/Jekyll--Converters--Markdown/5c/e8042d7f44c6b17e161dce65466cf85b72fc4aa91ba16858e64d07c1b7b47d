I"≈q<ul id="markdown-toc">
  <li><a href="#‰∏Ä‰ΩúÊ•≠Á≥ªÁµ±" id="markdown-toc-‰∏Ä‰ΩúÊ•≠Á≥ªÁµ±">‰∏Ä„ÄÅ‰ΩúÊ•≠Á≥ªÁµ±</a>    <ul>
      <li><a href="#‰∏Ä-thread-pools" id="markdown-toc-‰∏Ä-thread-pools">(‰∏Ä) Thread Pools</a></li>
      <li><a href="#‰∫å-openmp" id="markdown-toc-‰∫å-openmp">(‰∫å) OpenMP</a>        <ul>
          <li><a href="#pragma-omp-parallel" id="markdown-toc-pragma-omp-parallel"><code class="language-plaintext highlighter-rouge">#pragma omp parallel</code></a></li>
          <li><a href="#example" id="markdown-toc-example">Example</a></li>
        </ul>
      </li>
      <li><a href="#‰∏â-threading-issues" id="markdown-toc-‰∏â-threading-issues">(‰∏â) Threading Issues</a>        <ul>
          <li><a href="#1-semantics-of-fork-and-exec" id="markdown-toc-1-semantics-of-fork-and-exec">1. Semantics of fork() and exec()</a></li>
          <li><a href="#2-signal-handling" id="markdown-toc-2-signal-handling">2. Signal Handling</a></li>
          <li><a href="#3-thread-cancellation" id="markdown-toc-3-thread-cancellation">3. Thread Cancellation</a></li>
          <li><a href="#4-thread-local-storage" id="markdown-toc-4-thread-local-storage">4. Thread-Local Storage</a></li>
          <li><a href="#5-scheduler-activations" id="markdown-toc-5-scheduler-activations">5. Scheduler Activations</a></li>
        </ul>
      </li>
      <li><a href="#Âõõ-thread-scheduling" id="markdown-toc-Âõõ-thread-scheduling">(Âõõ) Thread Scheduling</a></li>
      <li><a href="#‰∫î-pthread-scheduling" id="markdown-toc-‰∫î-pthread-scheduling">(‰∫î) Pthread Scheduling</a></li>
      <li><a href="#ÂÖ≠-multiple-processor-scheduling" id="markdown-toc-ÂÖ≠-multiple-processor-scheduling">(ÂÖ≠) Multiple-Processor Scheduling</a></li>
      <li><a href="#‰∏É-socket---message-passing" id="markdown-toc-‰∏É-socket---message-passing">(‰∏É) Socket - Message Passing</a>        <ul>
          <li><a href="#1-what-is-a-socket" id="markdown-toc-1-what-is-a-socket">1. What is a socketÔºü</a></li>
          <li><a href="#2-two-essential-types-of-sockets" id="markdown-toc-2-two-essential-types-of-sockets">2. Two essential types of sockets</a></li>
          <li><a href="#1-sock_stream" id="markdown-toc-1-sock_stream">(1) SOCK_STREAM</a></li>
          <li><a href="#2-sock_dgram" id="markdown-toc-2-sock_dgram">(2) SOCK_DGRAM</a></li>
          <li><a href="#3-connection-setup" id="markdown-toc-3-connection-setup">3. Connection setup</a></li>
        </ul>
      </li>
      <li><a href="#Ë™≤Á®ã‰ΩúÊ•≠" id="markdown-toc-Ë™≤Á®ã‰ΩúÊ•≠">Ë™≤Á®ã‰ΩúÊ•≠</a></li>
    </ul>
  </li>
</ul>

<h2 id="‰∏Ä‰ΩúÊ•≠Á≥ªÁµ±">‰∏Ä„ÄÅ‰ΩúÊ•≠Á≥ªÁµ±</h2>
<ul>
  <li>Ë™≤Á®ãÁ∞°Â†±
    <ul>
      <li><a href="https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170406/ch04.pdf">Chapter 4: Mutithread Programming</a></li>
      <li><a href="https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170406/ch05.pdf">Chapter 5: Process Scheduling</a></li>
      <li><a href="https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170406/Socket_Programming.pdf">Socket_Programming</a></li>
      <li><a href="https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170406/Linux-Programming_Socket_1.pdf">Linux-Programming_Socket_1</a></li>
      <li><a href="https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170406/Linux-Programming_Socket_2.pdf">Linux-Programming_Socket_2</a></li>
    </ul>
  </li>
  <li>ÂèÉËÄÉË≥áÊñô
    <ul>
      <li><a href="https://goo.gl/Rs9JgE">Á∞°ÊòìÁöÑÁ®ãÂºèÂπ≥Ë°åÂåñÊñπÊ≥ïÔºçOpenMPÔºà‰∏ÄÔºâÁ∞°‰ªã</a></li>
      <li><a href="https://hackmd.io/s/Skh_AaVix">Toward Concurrency</a></li>
    </ul>
  </li>
</ul>

<h3 id="‰∏Ä-thread-pools">(‰∏Ä) Thread Pools</h3>
<ul>
  <li>Create a number of threads in a pool where they await work.</li>
  <li>Advantages:
    <ul>
      <li>Usually slightly faster to service a request with an existing thread than create a new thread.</li>
      <li>Allows the number of threads in the application(s) to be bound to the size of the pool.</li>
      <li>Separating task to be performed from mechanics of creating task allows different strategies for running task.
        <ul>
          <li>Tasks could be scheduled to run periodically.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="‰∫å-openmp">(‰∫å) OpenMP</h3>
<ul>
  <li>Set of compiler directives and an API for C, C++, FORTRAN.</li>
  <li>Provides support for parallel programming in shared-memory environments.</li>
  <li>Identifies <code class="language-plaintext highlighter-rouge">parallel regions</code> ‚Äì blocks of code that can run in parallel.</li>
</ul>

<h4 id="pragma-omp-parallel"><code class="language-plaintext highlighter-rouge">#pragma omp parallel</code></h4>
<ul>
  <li>Create as many threads as there are cores.</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#pragma omp parallel for
</span><span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
<span class="p">}</span>
<span class="c1">// Run for loop in parallel</span>
</code></pre></div></div>

<h4 id="example">Example</h4>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;omp.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
    <span class="cm">/* sequential code */</span>
    
    <span class="cp">#pragma omp parallel
</span>    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"I am a parallel region."</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="cm">/* sequential code */</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="‰∏â-threading-issues">(‰∏â) Threading Issues</h3>

<h4 id="1-semantics-of-fork-and-exec">1. Semantics of fork() and exec()</h4>

<ul>
  <li>Does fork() duplicate only the calling thread or all threads?
    <ul>
      <li>Some UNIXes have two versions of fork</li>
    </ul>
  </li>
  <li>Exec() usually works as normal ‚Äì replace the running process including all threads.</li>
</ul>

<h4 id="2-signal-handling">2. Signal Handling</h4>
<ul>
  <li>Signals are used in UNIX systems to notify a process that a particular event has occurred.</li>
  <li>A <code class="language-plaintext highlighter-rouge">signal handler</code> is used to process signals.
    <ol>
      <li>Signal is generated by particular event</li>
      <li>Signal is delivered to a process</li>
      <li>Signal is handled by one of two signal handlers:
        <ol>
          <li>default</li>
          <li>user-defined</li>
        </ol>
      </li>
    </ol>
  </li>
  <li>Every signal has <code class="language-plaintext highlighter-rouge">default handler</code> that kernel runs when handling signal.
    <ul>
      <li>User-defined signal handler can override default.</li>
      <li>For single-threaded, signal delivered to process.</li>
    </ul>
  </li>
  <li>Where should a signal be delivered for multi-threaded?
    <ul>
      <li>Deliver the signal to the thread to which the signal applies.</li>
      <li>Deliver the signal to every thread in the process.</li>
      <li>Deliver the signal to certain threads in the process.</li>
      <li>Assign a specific thread to receive all signals for the process.</li>
    </ul>
  </li>
</ul>

<h4 id="3-thread-cancellation">3. Thread Cancellation</h4>
<ul>
  <li>Terminating a thread before it has finished.</li>
  <li>Thread to be canceled is target thread.</li>
  <li>Two general approaches:
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Asynchronous cancellation</code> terminates the target thread immediately.</li>
      <li><code class="language-plaintext highlighter-rouge">Deferred cancellation</code> allows the target thread to periodically check if it should be cancelled.</li>
    </ul>
  </li>
  <li>Pthread code to create and cancel a thread:</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pthread_t</span> <span class="n">tid</span><span class="p">;</span>

<span class="cm">/* Create the thread */</span>
<span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tid</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">worker</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>

<span class="p">...</span>

<span class="cm">/* Cancel the thread */</span>
<span class="n">pthread_cancel</span><span class="p">(</span><span class="n">tid</span><span class="p">);</span>
</code></pre></div></div>

<h4 id="4-thread-local-storage">4. Thread-Local Storage</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Thread-local storage (TLS)</code> allows each thread to have its own copy of data.</li>
  <li>Useful when you do not have control over the thread creation process (i.e., when using a thread).</li>
  <li>Different from local variables
    <ul>
      <li>Local variables visible only during single function invocation.</li>
      <li>TLS visible across function invocations</li>
    </ul>
  </li>
  <li>Similar to static data
    <ul>
      <li>TLS is unique to each thread.</li>
    </ul>
  </li>
</ul>

<h4 id="5-scheduler-activations">5. Scheduler Activations</h4>
<ul>
  <li>Both M:M and Two-level models require communication to maintain the appropriate number of kernel threads allocated to the application.</li>
  <li>Typically use an intermediate data structure between user and kernel threads ‚Äì <code class="language-plaintext highlighter-rouge">lightweight process (LWP)</code>
<img src="http://i.imgur.com/N1XOvDn.jpg" alt="" />
    <ul>
      <li>Appears to be a virtual processor on which process can schedule user thread to run</li>
      <li>Each LWP attached to kernel thread.</li>
      <li>How many LWPs to create?</li>
    </ul>
  </li>
  <li>Scheduler activations provide <code class="language-plaintext highlighter-rouge">upcalls</code> - a communication mechanism from the kernel to the <code class="language-plaintext highlighter-rouge">upcall handler</code> in the thread library.</li>
  <li>This communication allows an application to maintain the correct number kernel threads.</li>
</ul>

<h3 id="Âõõ-thread-scheduling">(Âõõ) Thread Scheduling</h3>
<ul>
  <li>Distinction between user-level and kernel-level threads.</li>
  <li>When threads supported, threads scheduled, not processes.</li>
  <li>Many-to-one and many-to-many models, thread library schedules user-level threads to run on LWP.
    <ul>
      <li>Known as <code class="language-plaintext highlighter-rouge">process-contention scope (PCS)</code> since scheduling competition is within the process.</li>
      <li>Typically done via priority set by programmer.</li>
    </ul>
  </li>
  <li>Kernel thread scheduled onto available CPU is <code class="language-plaintext highlighter-rouge">system-contention scope (SCS)</code> ‚Äì competition among all threads in system.</li>
</ul>

<h3 id="‰∫î-pthread-scheduling">(‰∫î) Pthread Scheduling</h3>
<ul>
  <li>API allows specifying either PCS or SCS during thread creation.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">PTHREAD_SCOPE_PROCESS</code> schedules threads using PCS scheduling.</li>
      <li><code class="language-plaintext highlighter-rouge">PTHREAD_SCOPE_SYSTEM</code> schedules threads using SCS scheduling.</li>
    </ul>
  </li>
  <li>Can be limited by OS ‚Äì Linux and Mac OS X only allow <code class="language-plaintext highlighter-rouge">PTHREAD_SCOPE_SYSTEM</code>.</li>
</ul>

<h3 id="ÂÖ≠-multiple-processor-scheduling">(ÂÖ≠) Multiple-Processor Scheduling</h3>
<p><img src="https://i.imgur.com/0nuvCJs.jpg" alt="" /></p>

<ul>
  <li>CPU scheduling more complex when multiple CPUs are available.</li>
  <li><code class="language-plaintext highlighter-rouge">Homogeneous processors</code> within a multiprocessor.</li>
  <li><code class="language-plaintext highlighter-rouge">Asymmetric multiprocessing</code> ‚Äì only one processor accesses the system data structures, alleviating the need for data sharing.</li>
  <li><code class="language-plaintext highlighter-rouge">Symmetric multiprocessing (SMP)</code> ‚Äì each processor is self-scheduling, all processes in common ready queue, or each has its own private queue of ready processes.
    <ul>
      <li>Currently, most common</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Processor affinity</code> ‚Äì process has affinity for processor on which it is currently running.
    <ul>
      <li>soft affinity</li>
      <li>hard affinity</li>
      <li>Variations including <code class="language-plaintext highlighter-rouge">processor sets</code></li>
    </ul>
  </li>
  <li><strong>Load Balancing</strong> - attempts to keep workload evenly distributed.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Push migration</code> ‚Äì periodic task checks load on each processor, and if found pushes task from overloaded CPU to other CPUs.</li>
      <li><code class="language-plaintext highlighter-rouge">Pull migration</code> ‚Äì idle processors pulls waiting task from busy processor.</li>
    </ul>
  </li>
</ul>

<h3 id="‰∏É-socket---message-passing">(‰∏É) Socket - Message Passing</h3>

<h4 id="1-what-is-a-socket">1. What is a socketÔºü</h4>

<ul>
  <li>An interface between application and network.
    <ul>
      <li>The application creates a socket.</li>
      <li>The socket type dictates the style of communication.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">reliable</code> vs. <code class="language-plaintext highlighter-rouge">best effort</code></li>
          <li><code class="language-plaintext highlighter-rouge">connection-oriented</code> vs. <code class="language-plaintext highlighter-rouge">connectionless</code></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Once configured the application can
    <ul>
      <li>pass data to the socket for network transmission</li>
      <li>receive data from the socket (transmitted through the network by some other host)</li>
    </ul>
  </li>
</ul>

<h4 id="2-two-essential-types-of-sockets">2. Two essential types of sockets</h4>
<p><img src="https://i.imgur.com/HMu29e3.jpg" alt="" /></p>

<h4 id="1-sock_stream">(1) SOCK_STREAM</h4>
<ul>
  <li>a.k.a. TCP</li>
  <li>reliable delivery</li>
  <li>in-order guaranteed</li>
  <li>connection-oriented</li>
  <li>bidirectional</li>
</ul>

<h4 id="2-sock_dgram">(2) SOCK_DGRAM</h4>
<ul>
  <li>a.k.a. UDP</li>
  <li>unreliable delivery</li>
  <li>no order guarantees</li>
  <li>no notion of ‚Äúconnection‚Äù ‚Äì app indicates dest. for each packet</li>
  <li>can send or receive</li>
</ul>

<h4 id="3-connection-setup">3. Connection setup</h4>
<p><img src="https://i.imgur.com/Je3VTRz.png" alt="" /></p>

<h3 id="Ë™≤Á®ã‰ΩúÊ•≠">Ë™≤Á®ã‰ΩúÊ•≠</h3>
<ul>
  <li>
    <p>Ëá™ Client Á´ØËº∏ÂÖ•‰∏ÄÊï¥Êï∏ÔºåÂ∞áÊï∏Â≠óÂÇ≥Ëá≥ Server Á´ØÂà§Êñ∑ÊòØÂê¶ÁÇ∫Ë≥™Êï∏ÔºåÂÜçÂ∞áÁµêÊûúÂõûÂÇ≥Ëá™ Client„ÄÇ</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">client</code> ÈÉ®‰ªΩ</p>
  </li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*  Make the necessary includes and set up the variables.  */</span>

<span class="cp">#include</span> <span class="cpf">&lt;sys/types.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;sys/socket.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;netinet/in.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;arpa/inet.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">sockfd</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">len</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">address</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">in</span><span class="p">;</span>     <span class="c1">// integer</span>
    <span class="kt">int</span> <span class="n">result</span><span class="p">;</span>
    <span class="c1">// char ch = 'A';</span>
  

<span class="cm">/*  Create a socket for the client.  */</span>

    <span class="n">sockfd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

<span class="cm">/*  Name the socket, as agreed with the server.  */</span>

    <span class="n">address</span><span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span> <span class="n">AF_INET</span><span class="p">;</span>
    <span class="n">address</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">inet_addr</span><span class="p">(</span><span class="s">"127.0.0.1"</span><span class="p">);</span>
    <span class="n">address</span><span class="p">.</span><span class="n">sin_port</span> <span class="o">=</span> <span class="mi">9453</span><span class="p">;</span>
    <span class="n">len</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">address</span><span class="p">);</span>

<span class="cm">/*  Now connect our socket to the server's socket.  */</span>

    <span class="n">result</span> <span class="o">=</span> <span class="n">connect</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">address</span><span class="p">,</span> <span class="n">len</span><span class="p">);</span>

    <span class="k">if</span><span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">perror</span><span class="p">(</span><span class="s">"oops: Client"</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>

<span class="cm">/*  We can now read/write via sockfd.  */</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"Please key in an integerÔºö"</span><span class="p">);</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">in</span><span class="p">);</span>

    <span class="n">write</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">in</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
    <span class="n">read</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">in</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">in</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Result from ServerÔºöÊï∏Â≠ó'ÊòØË≥™Êï∏'</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
    <span class="k">else</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"result from serverÔºöÊï∏Â≠ó'‰∏çÊòØË≥™Êï∏'</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>

    <span class="n">close</span><span class="p">(</span><span class="n">sockfd</span><span class="p">);</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">server</code> ÈÉ®‰ªΩ</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*  Make the necessary includes and set up the variables.  */</span>

<span class="cp">#include</span> <span class="cpf">&lt;sys/types.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;sys/socket.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;netinet/in.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;arpa/inet.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">server_sockfd</span><span class="p">,</span> <span class="n">client_sockfd</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">server_len</span><span class="p">,</span> <span class="n">client_len</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">server_address</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">client_address</span><span class="p">;</span>

<span class="cm">/*  Create an unnamed socket for the server.  */</span>

    <span class="n">server_sockfd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

<span class="cm">/*  Name the socket.  */</span>

    <span class="n">server_address</span><span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span> <span class="n">AF_INET</span><span class="p">;</span>
    <span class="n">server_address</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">inet_addr</span><span class="p">(</span><span class="s">"127.0.0.1"</span><span class="p">);</span>
    <span class="n">server_address</span><span class="p">.</span><span class="n">sin_port</span> <span class="o">=</span> <span class="mi">9453</span><span class="p">;</span>
    <span class="n">server_len</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">server_address</span><span class="p">);</span>
    <span class="n">bind</span><span class="p">(</span><span class="n">server_sockfd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">server_address</span><span class="p">,</span> <span class="n">server_len</span><span class="p">);</span>

<span class="cm">/*  Create a connection queue and wait for clients.  */</span>

    <span class="n">listen</span><span class="p">(</span><span class="n">server_sockfd</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
    <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>   <span class="c1">// Set loop</span>
        <span class="kt">char</span> <span class="n">in</span><span class="p">;</span>

        <span class="n">printf</span><span class="p">(</span><span class="s">"Server waiting...</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>

<span class="cm">/*  Accept a connection.  */</span>

        <span class="n">client_len</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">client_address</span><span class="p">);</span>
        <span class="n">client_sockfd</span> <span class="o">=</span> <span class="n">accept</span><span class="p">(</span><span class="n">server_sockfd</span><span class="p">,</span> 
            <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">client_address</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">client_len</span><span class="p">);</span>

<span class="cm">/*  We can now read/write to client on client_sockfd.  */</span>

        <span class="n">read</span><span class="p">(</span><span class="n">client_sockfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">in</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">"Input from Client = %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="n">in</span><span class="p">);</span>

        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">in</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">in</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
                <span class="n">count</span><span class="o">++</span><span class="p">;</span>
        
        <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span>
            <span class="n">in</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="p">)</span>
            <span class="n">in</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
     
        <span class="n">write</span><span class="p">(</span><span class="n">client_sockfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">in</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">));</span>
        <span class="n">close</span><span class="p">(</span><span class="n">client_sockfd</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>Âü∑Ë°åÁµêÊûú
<img src="https://i.imgur.com/vCZaRoc.jpg" alt="" /></li>
</ul>
:ET