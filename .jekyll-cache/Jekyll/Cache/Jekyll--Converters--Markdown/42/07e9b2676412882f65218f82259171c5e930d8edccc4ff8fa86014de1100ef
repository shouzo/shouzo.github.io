I"}<ul id="markdown-toc">
  <li><a href="#一作業系統" id="markdown-toc-一作業系統">一、作業系統</a>    <ul>
      <li><a href="#basic-concepts" id="markdown-toc-basic-concepts">Basic Concepts</a></li>
      <li><a href="#cpu-scheduler" id="markdown-toc-cpu-scheduler">CPU Scheduler</a></li>
      <li><a href="#dispatcher" id="markdown-toc-dispatcher">Dispatcher</a></li>
      <li><a href="#scheduling-algorithm-optimization-criteria" id="markdown-toc-scheduling-algorithm-optimization-criteria">Scheduling Algorithm Optimization Criteria</a></li>
      <li><a href="#scheduling-algorithm" id="markdown-toc-scheduling-algorithm">Scheduling Algorithm</a>        <ul>
          <li><a href="#一-first-come-first-served-fcfs先到先服務法" id="markdown-toc-一-first-come-first-served-fcfs先到先服務法">(一) First-Come, First-Served (FCFS)：先到先服務法</a></li>
          <li><a href="#二-shortest-job-first-sjf最短優先法" id="markdown-toc-二-shortest-job-first-sjf最短優先法">(二) Shortest-Job-First (SJF)：最短優先法</a></li>
          <li><a href="#三-priority-scheduling-ps優先權排班法" id="markdown-toc-三-priority-scheduling-ps優先權排班法">(三) Priority Scheduling (PS)：優先權排班法</a></li>
          <li><a href="#四-round-robin-rr輪流法" id="markdown-toc-四-round-robin-rr輪流法">(四) Round Robin (RR)：輪流法</a>            <ul>
              <li><a href="#1-time-quantum-and-context-switch-time" id="markdown-toc-1-time-quantum-and-context-switch-time">1. Time Quantum and Context Switch Time</a></li>
              <li><a href="#2-turnaround-time-varies-with-the-time-quantum" id="markdown-toc-2-turnaround-time-varies-with-the-time-quantum">2. Turnaround Time Varies With The Time Quantum</a></li>
            </ul>
          </li>
          <li><a href="#五-multilevel" id="markdown-toc-五-multilevel">(五) Multilevel</a>            <ul>
              <li><a href="#1-queue" id="markdown-toc-1-queue">1. Queue</a></li>
              <li><a href="#2-feedback-queue" id="markdown-toc-2-feedback-queue">2. Feedback Queue</a></li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#二linux-程式設計" id="markdown-toc-二linux-程式設計">二、Linux 程式設計</a>    <ul>
      <li><a href="#1-what-is-a-thread" id="markdown-toc-1-what-is-a-thread">1. What is a Thread？</a>        <ul>
          <li><a href="#1-os-view" id="markdown-toc-1-os-view">(1) OS view</a></li>
          <li><a href="#2-software-developer-view" id="markdown-toc-2-software-developer-view">(2) Software developer view</a></li>
          <li><a href="#example" id="markdown-toc-example">[Example]</a></li>
        </ul>
      </li>
      <li><a href="#2-process-and-thread" id="markdown-toc-2-process-and-thread">2. Process and Thread</a>        <ul>
          <li><a href="#1-process-context" id="markdown-toc-1-process-context">(1) Process context</a></li>
          <li><a href="#2-threads" id="markdown-toc-2-threads">(2) Threads</a></li>
        </ul>
      </li>
      <li><a href="#3-pthreads" id="markdown-toc-3-pthreads">3. Pthreads</a>        <ul>
          <li><a href="#1-the-pthreads-api" id="markdown-toc-1-the-pthreads-api">(1) The Pthreads API</a></li>
          <li><a href="#2-thread-management" id="markdown-toc-2-thread-management">(2) Thread management</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="一作業系統">一、作業系統</h2>
<ul>
  <li>課程簡報
    <ul>
      <li><a href="https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170316/ch05.pdf">Chapter 5: Process Scheduling</a></li>
    </ul>
  </li>
  <li>參考資料
    <ul>
      <li><a href="http://www.jollen.org/blog/2006/11/_scheduler_running_process.html">Preemptive Process Scheduling 的觀念</a></li>
      <li><a href="http://moon.cse.yzu.edu.tw/~s981502/7/Chap4.pdf">各種 CPU 排程演算法之探討</a></li>
      <li><a href="http://publish.get.com.tw/BookPre_pdf/51MG060707-2.PDF">行程排程演算法</a></li>
      <li><a href="https://www.tutorialspoint.com/operating_system/os_process_scheduling_algorithms.htm">Operating System Scheduling algorithms</a></li>
    </ul>
  </li>
</ul>

<h3 id="basic-concepts">Basic Concepts</h3>
<ul>
  <li>Maximum CPU utilization obtained with multiprogramming.</li>
  <li>CPU–I/O Burst Cycle – Process execution consists of a cycle of CPU execution and I/O wait.</li>
  <li>CPU burst followed by I/O burst.</li>
  <li>CPU burst distribution is of main concern.</li>
</ul>

<h3 id="cpu-scheduler">CPU Scheduler</h3>
<ul>
  <li>Short-term scheduler selects from among the processes in ready queue, and allocates the CPU to one of them.
    <ul>
      <li>Queue may be ordered in various ways.</li>
    </ul>
  </li>
  <li>CPU scheduling decisions may take place when a process:
    <ol>
      <li>Switches from running to waiting state</li>
      <li>Switches from running to ready state</li>
      <li>Switches from waiting to ready</li>
      <li>Terminates</li>
    </ol>
  </li>
  <li>Scheduling under 1 and 4 is nonpreemptive.</li>
  <li>All other scheduling is preemptive.
    <ul>
      <li>Consider access to shared data.</li>
      <li>Consider preemption while in kernel mode.</li>
      <li>Consider interrupts occurring during crucial OS activities.</li>
    </ul>
  </li>
</ul>

<h3 id="dispatcher">Dispatcher</h3>
<ul>
  <li>Dispatcher module gives control of the CPU to the process selected by the short-term scheduler; this involves：
    <ol>
      <li>switching context</li>
      <li>switching to user mode</li>
      <li>jumping to the proper location in the user program to restart that program</li>
    </ol>
  </li>
  <li>Dispatch latency：time it takes for the dispatcher to stop one process and start another running.</li>
</ul>

<h3 id="scheduling-algorithm-optimization-criteria">Scheduling Algorithm Optimization Criteria</h3>
<p><img src="https://i.imgur.com/LuBGjEu.jpg" alt="" /></p>
<ol>
  <li>CPU utilization – keep the CPU as busy as possible.</li>
  <li>Throughput – # of processes that complete their execution per time unit.</li>
  <li>Turnaround time – amount of time to execute a particular process.</li>
  <li>Waiting time – amount of time a process has been waiting in the ready queue.</li>
  <li>Response time – amount of time it takes from when a request was submitted until the first response is produced, not output (for time-sharing environment).</li>
</ol>

<ul>
  <li>Length of Next CPU Burst
    <ul>
      <li>Determining
  <img src="https://i.imgur.com/1GaCgCb.jpg" alt="" /></li>
      <li>Prediction
  <img src="https://i.imgur.com/HWSLIdj.jpg" alt="" /></li>
    </ul>
  </li>
</ul>

<h3 id="scheduling-algorithm">Scheduling Algorithm</h3>
<h4 id="一-first-come-first-served-fcfs先到先服務法">(一) First-Come, First-Served (FCFS)：先到先服務法</h4>
<p><img src="https://i.imgur.com/xWKL0Z3.jpg" alt="" /></p>

<hr />

<p><img src="https://i.imgur.com/6MIKb3Q.jpg" alt="" /></p>

<ul>
  <li>Convoy effect：很多短時間的 process，都在等一個
長時間的 process 時，所產生的效應 (因為等待時間很長)。</li>
</ul>

<h4 id="二-shortest-job-first-sjf最短優先法">(二) Shortest-Job-First (SJF)：最短優先法</h4>
<ul>
  <li>Associate with each process the length of its next CPU burst.
    <ul>
      <li>Use these lengths to schedule the process with the shortest time.</li>
    </ul>
  </li>
  <li>SJF is optimal – gives minimum average waiting time for a given set of processes.
    <ul>
      <li>The difficulty is knowing the length of the next CPU request.</li>
      <li>Could ask the user.</li>
    </ul>
  </li>
</ul>

<p><img src="https://i.imgur.com/Wf8bEgG.jpg" alt="" /></p>

<h4 id="三-priority-scheduling-ps優先權排班法">(三) Priority Scheduling (PS)：優先權排班法</h4>
<ul>
  <li>A priority number (integer) is associated with each process.</li>
  <li>The CPU is allocated to the process with the highest priority (smallest integer » highest priority).
    <ul>
      <li>Preemptive</li>
      <li>Nonpreemptive</li>
    </ul>
  </li>
  <li>SJF is priority scheduling where priority is the inverse of predicted next CPU burst time.</li>
  <li>Problem：Starvation – low priority processes may never execute.</li>
  <li>Solution：Aging – as time progresses increase the priority of the process.</li>
</ul>

<p><img src="https://i.imgur.com/ZeyVmU1.jpg" alt="" /></p>

<h4 id="四-round-robin-rr輪流法">(四) Round Robin (RR)：輪流法</h4>
<ul>
  <li>Each process gets a small unit of CPU time (time quantum q), usually 10-100 milliseconds. After this time has elapsed, the process is preempted and added to the end of the ready queue.</li>
  <li>If there are n processes in the ready queue and the time quantum is q, then each process gets 1/n of the CPU time in chunks of at most q time units at once. No process waits more than (n-1)q time units.</li>
  <li>Timer interrupts every quantum to schedule next process.</li>
  <li>Performance.
    <ul>
      <li>q large » FIFO.</li>
      <li>q small » q must be large with respect to context switch, otherwise overhead is too high.</li>
    </ul>
  </li>
</ul>

<p><img src="https://i.imgur.com/uu9W1cI.jpg" alt="" /></p>

<h5 id="1-time-quantum-and-context-switch-time">1. Time Quantum and Context Switch Time</h5>
<p><img src="http://i.imgur.com/7SMF7rd.jpg" alt="" /></p>

<h5 id="2-turnaround-time-varies-with-the-time-quantum">2. Turnaround Time Varies With The Time Quantum</h5>
<p><img src="http://i.imgur.com/EtNCekP.jpg" alt="" /></p>

<h4 id="五-multilevel">(五) Multilevel</h4>
<h5 id="1-queue">1. Queue</h5>
<ul>
  <li>Ready queue is partitioned into separate queues, eg:
    <ul>
      <li>foreground (interactive)</li>
      <li>background (batch)</li>
    </ul>
  </li>
  <li>Process permanently in a given queue.
Each queue has its own scheduling algorithm:
    <ul>
      <li>foreground – RR</li>
      <li>background – FCFS</li>
    </ul>
  </li>
  <li>Scheduling must be done between the queues:
    <ul>
      <li>Fixed priority scheduling; (i.e., serve all from foreground then from background). Possibility of starvation.</li>
      <li>Time slice – each queue gets a certain amount of CPU time which it can schedule amongst its processes; i.e., 80% to foreground in RR.</li>
      <li>20% to background in FCFS.</li>
    </ul>
  </li>
</ul>

<p><img src="https://i.imgur.com/rW9GXTr.jpg" alt="" /></p>

<h5 id="2-feedback-queue">2. Feedback Queue</h5>
<ul>
  <li>A process can move between the various queues; aging can be implemented this way.</li>
  <li>Multilevel-feedback-queue scheduler. defined by the following parameters:
    <ul>
      <li>number of queues.</li>
      <li>scheduling algorithms for each queue.</li>
      <li>method used to determine when to upgrade a process.</li>
      <li>method used to determine when to demote a process.</li>
      <li>method used to determine which queue a process will enter when that process needs service.</li>
    </ul>
  </li>
</ul>

<p><img src="https://i.imgur.com/Nc2SsIQ.jpg" alt="" /></p>

<ul>
  <li>課程作業</li>
</ul>

<h2 id="二linux-程式設計">二、Linux 程式設計</h2>
<ul>
  <li>課程簡報
    <ul>
      <li><a href="https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170317/Linux_programming_pthread-1.pdf">Linux_programming_pthread-1</a></li>
      <li><a href="https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170317/Linux_programming_pthread-2.pdf">Linux_Programming_pthread-2</a></li>
    </ul>
  </li>
  <li>參考資料
    <ul>
      <li><a href="https://computing.llnl.gov/tutorials/pthreads/">POSIX Threads Programming</a></li>
    </ul>
  </li>
</ul>

<h3 id="1-what-is-a-thread">1. What is a Thread？</h3>
<h4 id="1-os-view">(1) OS view</h4>
<ul>
  <li>A thread is an independent stream of instructions that can be scheduled to run by
the OS.</li>
</ul>

<h4 id="2-software-developer-view">(2) Software developer view</h4>
<ul>
  <li>a thread can be considered as a “procedure” that runs independently from the main program.
    <ul>
      <li>Sequential program: a single stream of instructions in
a program.</li>
      <li>Multi-threaded program: a program with multiple streams.
        <ul>
          <li>Multiple threads are needed to use multiple cores/CPUs.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h4 id="example">[Example]</h4>
<ol>
  <li>Computer games
    <ul>
      <li>each thread controls the movement of an object.</li>
    </ul>
  </li>
  <li>Scientific simulations
    <ul>
      <li>Hurricane movement simulation: each thread simulates the hurricane in a small domain.</li>
      <li>Molecular dynamic: each thread simulates a subset of particulars.</li>
    </ul>
  </li>
  <li>Web server
    <ul>
      <li>Each thread handles a connection.</li>
    </ul>
  </li>
</ol>

<h3 id="2-process-and-thread">2. Process and Thread</h3>
<h4 id="1-process-context">(1) Process context</h4>
<ul>
  <li>Two parts in the context: <code class="language-plaintext highlighter-rouge">self-contained domain (protection)</code> and <code class="language-plaintext highlighter-rouge">execution of instructions</code>.
    <ul>
      <li>Process ID, process group ID, user ID, and group ID</li>
      <li>Environment</li>
      <li>Working directory.</li>
      <li>Program instructions</li>
      <li>Registers (including PC)</li>
      <li>Stack</li>
      <li>Heap</li>
      <li>File descriptors</li>
      <li>Signal actions</li>
      <li>Shared libraries</li>
      <li>Inter-process communication tools</li>
    </ul>
  </li>
  <li>What are absolutely needed to support a stream of instructions, given the process context?
    <ul>
      <li>Registers (including PC)</li>
      <li>Stack</li>
    </ul>
  </li>
</ul>

<p><img src="https://i.imgur.com/6kN1sIR.jpg" alt="" /></p>

<h4 id="2-threads">(2) Threads</h4>
<ul>
  <li><strong>Advantages</strong>
    <ul>
      <li>Light-weight
        <ul>
          <li>Lower overhead for thread creation.</li>
          <li>Lower Context Switching Overhead.
            <ul>
              <li>Fewer OS resources</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Shared State
        <ul>
          <li>Don’t need IPC-like mechanism to communicate between threads of same process.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><strong>Disadvantages</strong>
    <ul>
      <li>Shared State!
        <ul>
          <li>Global variables are shared between threads. Accidental changes can be fatal.</li>
        </ul>
      </li>
      <li>Many library functions are not thread-safe
        <ul>
          <li>Library Functions that return pointers to static internal memory. E.g. gethostbyname()</li>
        </ul>
      </li>
      <li>Lack of robustness
        <ul>
          <li>Crash in one thread will crash the entire process.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="3-pthreads">3. Pthreads</h3>
<ul>
  <li>Hardware vendors used to implement
proprietary versions of threads
    <ul>
      <li>Thread programs are not portable</li>
    </ul>
  </li>
  <li>Pthreads = POSIX threads, specified in IEEE POSIX 1003.1c (1995)</li>
</ul>

<h4 id="1-the-pthreads-api">(1) The Pthreads API</h4>
<ul>
  <li>Three types of routines:
    <ol>
      <li><code class="language-plaintext highlighter-rouge">Thread management</code>: create, terminate, join, and detach</li>
      <li><code class="language-plaintext highlighter-rouge">Mutexes</code>: mutual exclusion, creating, destroying, locking, and unlocking mutexes</li>
      <li><code class="language-plaintext highlighter-rouge">Condition variables</code>: event driven synchronizaiton.
        <ul>
          <li>Mutexes and condition variables are concerned about synchronization.</li>
          <li>Why not anything related to inter-thread communication?</li>
        </ul>
      </li>
    </ol>
  </li>
  <li>The concept of opaque objects pervades the
design of the API.</li>
  <li>API naming convention
<img src="https://i.imgur.com/euq9YUQ.jpg" alt="" /></li>
</ul>

<h4 id="2-thread-management">(2) Thread management</h4>
<ul>
  <li>Pthread header file <pthread.h></pthread.h></li>
  <li>Compiling pthread programs：
    <blockquote>
      <p>gcc aaa.c -o aaa -lpthread</p>
    </blockquote>
  </li>
</ul>

<ol>
  <li><code class="language-plaintext highlighter-rouge">Creation</code>
    <ul>
      <li>pthread_create
 <img src="https://i.imgur.com/KZ0yaCh.jpg" alt="" /></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Termination</code>
    <ul>
      <li>Return</li>
      <li>Pthread_exit</li>
      <li>Can we still use exit？
 <img src="https://i.imgur.com/O8QpEBi.jpg" alt="" /></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Wait (parent/child synchronization)</code>
    <ul>
      <li>pthread_join
 <img src="https://i.imgur.com/bacALSV.jpg" alt="" /></li>
    </ul>
  </li>
</ol>

<ul>
  <li>課程作業：找出 1 - 100 的所有質數</li>
</ul>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;pthread.h&gt;
#include &lt;semaphore.h&gt; 
#include &lt;time.h&gt;
</span>
<span class="cp">#define NUM_THREADS 10
#define MSIZE 100
</span>
<span class="c1">// 找出 1 - 100 的所有質數</span>

<span class="k">static</span> <span class="kt">double</span> <span class="nf">getDoubleTime</span><span class="p">();</span>
<span class="kt">void</span> <span class="o">*</span><span class="nf">thread_function</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">);</span>
<span class="n">pthread_mutex_t</span> <span class="n">work_mutex</span><span class="p">;</span>

<span class="c1">// 宣告 prime_array 陣列</span>
<span class="kt">int</span> <span class="n">prime_array</span><span class="p">[</span><span class="n">NUM_THREADS</span><span class="p">][(</span><span class="n">MSIZE</span> <span class="o">/</span> <span class="n">NUM_THREADS</span><span class="p">)];</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
	<span class="kt">int</span> <span class="n">res</span><span class="p">;</span>
	<span class="n">pthread_t</span> <span class="n">a_thread</span><span class="p">[</span><span class="n">NUM_THREADS</span><span class="p">];</span>
	<span class="kt">void</span> <span class="o">*</span><span class="n">thread_result</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">lots_of_threads</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">print_prime</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>


	<span class="c1">// start to measure time...</span>
	<span class="kt">double</span> <span class="n">start_time</span> <span class="o">=</span> <span class="n">getDoubleTime</span><span class="p">();</span>
	
	<span class="c1">// initialize mutex...</span>
	<span class="n">res</span> <span class="o">=</span> <span class="n">pthread_mutex_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">work_mutex</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">res</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
       	<span class="n">perror</span><span class="p">(</span><span class="s">"Mutex initialization failed"</span><span class="p">);</span>
	    <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
    <span class="p">}</span>

	<span class="c1">// pthread_create...</span>
	<span class="k">for</span> <span class="p">(</span><span class="n">lots_of_threads</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">lots_of_threads</span> <span class="o">&lt;</span> <span class="n">NUM_THREADS</span><span class="p">;</span> <span class="n">lots_of_threads</span> <span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">res</span> <span class="o">=</span> <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">a_thread</span><span class="p">[</span><span class="n">lots_of_threads</span><span class="p">]),</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">thread_function</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)(</span><span class="kt">long</span><span class="p">)</span><span class="n">lots_of_threads</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">res</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">perror</span><span class="p">(</span><span class="s">"Thread creation failed"</span><span class="p">);</span>
        		<span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="c1">// pthread_join...</span>
	<span class="k">for</span> <span class="p">(</span><span class="n">lots_of_threads</span> <span class="o">=</span> <span class="n">NUM_THREADS</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">lots_of_threads</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">lots_of_threads</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
        	<span class="n">res</span> <span class="o">=</span> <span class="n">pthread_join</span><span class="p">(</span><span class="n">a_thread</span><span class="p">[</span><span class="n">lots_of_threads</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">thread_result</span><span class="p">);</span> 

            <span class="k">if</span> <span class="p">(</span><span class="n">res</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
	            <span class="n">perror</span><span class="p">(</span><span class="s">"pthread_join failed"</span><span class="p">);</span>
        	<span class="p">}</span>
    <span class="p">}</span>	
    
    <span class="cm">/* 輸出 prime_array 陣列 */</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>  <span class="c1">// 設定計數器</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">lots_of_threads</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">lots_of_threads</span> <span class="o">&lt;</span> <span class="n">NUM_THREADS</span><span class="p">;</span> <span class="n">lots_of_threads</span> <span class="o">++</span><span class="p">)</span> <span class="p">{</span> 
        <span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n\n</span><span class="s">The thread[%d]'s numbers：</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">lots_of_threads</span><span class="p">);</span>
        
        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">MSIZE</span> <span class="o">/</span> <span class="n">NUM_THREADS</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">prime_array</span><span class="p">[</span><span class="n">lots_of_threads</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
                <span class="n">printf</span><span class="p">(</span><span class="s">"%d</span><span class="se">\t</span><span class="s">"</span><span class="p">,</span> <span class="n">prime_array</span><span class="p">[</span><span class="n">lots_of_threads</span><span class="p">][</span><span class="n">i</span><span class="p">]);</span>                        <span class="p">}</span>
    <span class="p">}</span>

	<span class="n">printf</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Thread joined</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>

	<span class="c1">// stop measuring time...</span>
	<span class="kt">double</span> <span class="n">finish_time</span> <span class="o">=</span> <span class="n">getDoubleTime</span><span class="p">();</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">"Execute Time:  %.3lf ms</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="p">(</span><span class="n">finish_time</span> <span class="o">-</span> <span class="n">start_time</span><span class="p">));</span>
    <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_SUCCESS</span><span class="p">);</span>
<span class="p">}</span>


<span class="kt">void</span> <span class="o">*</span><span class="nf">thread_function</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// pthread_mutex_lock(&amp;work_mutex);</span>
	
    <span class="kt">int</span> <span class="n">my_num</span> <span class="o">=</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">arg</span><span class="p">;</span>
	<span class="c1">// if (MSIZE % NUM_THREADS != 0){    printf("error");   pthread_exit(-1);    }</span>

    <span class="kt">int</span> <span class="n">start_num</span> <span class="o">=</span> <span class="p">(</span><span class="n">MSIZE</span> <span class="o">/</span> <span class="n">NUM_THREADS</span><span class="p">)</span> <span class="o">*</span> <span class="n">my_num</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">end_num</span> <span class="o">=</span> <span class="p">(</span><span class="n">MSIZE</span> <span class="o">/</span> <span class="n">NUM_THREADS</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">my_num</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>

    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>   <span class="c1">// Set the loop</span>
    <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>      <span class="c1">// Set the counter</span>
    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>     <span class="c1">// result</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"I'm thread[%d], start_num:%d, end_num:%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">my_num</span><span class="p">,</span> <span class="n">start_num</span><span class="p">,</span> <span class="n">end_num</span><span class="p">);</span>

    <span class="cm">/* find the prime number */</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">start_num</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">end_num</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>      <span class="c1">// Reset counter</span>

        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">j</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
                <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
        
        <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span> 
            <span class="n">prime_array</span><span class="p">[</span><span class="n">my_num</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
            <span class="n">k</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>


    <span class="c1">// pthread_mutex_unlock(&amp;work_mutex);</span>
	<span class="n">pthread_exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>


<span class="k">static</span> <span class="kt">double</span> <span class="nf">getDoubleTime</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">struct</span> <span class="n">timeval</span> <span class="n">tm_tv</span><span class="p">;</span>
        <span class="n">gettimeofday</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tm_tv</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
        <span class="k">return</span> <span class="p">(</span><span class="kt">double</span><span class="p">)(((</span><span class="kt">double</span><span class="p">)</span><span class="n">tm_tv</span><span class="p">.</span><span class="n">tv_sec</span> <span class="o">*</span> <span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="mi">1000</span><span class="p">.</span> <span class="o">+</span> <span class="p">(</span><span class="kt">double</span><span class="p">)(</span><span class="n">tm_tv</span><span class="p">.</span><span class="n">tv_usec</span><span class="p">))</span> <span class="o">*</span> <span class="p">(</span><span class="kt">double</span><span class="p">)</span><span class="mi">0</span><span class="p">.</span><span class="mo">001</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>執行結果</li>
</ul>

<p><img src="https://i.imgur.com/WU12UoO.jpg" alt="" /></p>

<p><img src="https://i.imgur.com/CGXHTue.jpg" alt="" /></p>
:ET