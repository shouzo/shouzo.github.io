<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>少左 shouzo</title>
    <description></description>
    <link>http://shouzo.github.io/</link>
    <atom:link href="http://shouzo.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 01 Nov 2017 07:12:54 +0800</pubDate>
    <lastBuildDate>Wed, 01 Nov 2017 07:12:54 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>20170720 [學習筆記] 細談資料結構_6th (1)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#ch1&quot; id=&quot;markdown-toc-ch1&quot;&gt;20170720 - Ch1_導論&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#dikw-&quot; id=&quot;markdown-toc-dikw-&quot;&gt;一、DIKW 模型&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;二、定義與表示&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;[範例] 歐幾里得演算法&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;&lt;strong&gt;(1) 描述過程 (3個敘述)&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;&lt;strong&gt;(2) 將原先的 3個敘述 改為 5個敘述&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#stepwise-trace-&quot; id=&quot;markdown-toc-stepwise-trace-&quot;&gt;&lt;strong&gt;(3) 以 逐步追蹤法 (Stepwise trace) 驗證敘述過程&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#flow-chart&quot; id=&quot;markdown-toc-flow-chart&quot;&gt;(一) 流程圖 (flow chart)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#pseudo-code&quot; id=&quot;markdown-toc-pseudo-code&quot;&gt;(二) 虛擬碼 (pseudo code)&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;三、程式的分析&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#big-o-&quot; id=&quot;markdown-toc-big-o-&quot;&gt;四、Big-O 符號&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;(一) 時間複雜度等級&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;(二) 大小排序&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;(三) 範例&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;ch1&quot;&gt;20170720 - Ch1_導論&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;進度摘要
    &lt;ul&gt;
      &lt;li&gt;Ch1_導論 (100%)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;完整專案
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/Data-Structure-Learning_pages/tree/master/Data_Structures_6th_Edition/20170720&quot;&gt;https://github.com/shouzo/Data-Structure-Learning_pages/tree/master/Data_Structures_6th_Edition/20170720&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;參考資料
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/DIKW%E4%BD%93%E7%B3%BB&quot;&gt;DIKW 體系 - 維基百科&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://market.cloud.edu.tw/content/senior/computer/ks_ks/book/algodata/algorithm/algo3.htm&quot;&gt;演算法的表示&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%BC%AA%E4%BB%A3%E7%A0%81&quot;&gt;虛擬碼 - 維基百科&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6&quot;&gt;時間複雜度 - 維基百科&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.csie.ntnu.edu.tw/~u91029/AlgorithmAnalysis.html&quot;&gt;Algorithm Analysis&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;資料結構 - 鍾宜玲
        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;http://imil.au.edu.tw/~hsichcl/DataStructureHandout.htm&quot;&gt;資料結構教學講義&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://ds.klab.tw/pdf/chapter1_1.pdf&quot;&gt;第1章 - 導論 (Introduction)&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://ds.klab.tw/pdf/chapter1_2.pdf&quot;&gt;程式設計範例&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;http://ds.klab.tw/pdf/chapter1_3.pdf&quot;&gt;時間複雜度、費氏數列&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dikw-&quot;&gt;一、DIKW 模型&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;資料 (Data) - &lt;strong&gt;D&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;具體的符號或文數字。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;資訊 (Information) - &lt;strong&gt;I&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;資料所呈現出來，可以透過分析而理解的訊息。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;知識 (Knowledge) - &lt;strong&gt;K&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;從資訊中學習、推導或歸納後，經由理解所得到的結果。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;智慧 (Wisdom or Intelligence) - &lt;strong&gt;W&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;知識的系統化成果，是對於知識的整體洞察。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Ia8Tc7E.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;二、定義與表示&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/KvTLhQo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;資料結構 (Data Structures)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;將資料加以計算或處理時所建立而成的結構。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;演算法 (Algorithms)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;建立並運用資料結構的方法。&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;在有限步驟內，解決數學問題的程序&lt;/strong&gt;。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/QOe1t5m.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;[範例] 歐幾里得演算法&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;計算兩個自然數的「最大公因數 (Greatest Common Divisor, GCD)」&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-2&quot;&gt;&lt;strong&gt;(1) 描述過程 (3個敘述)&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;輸入兩個自然數。&lt;/li&gt;
  &lt;li&gt;作輾轉相除直到餘數為零。
    &lt;ul&gt;
      &lt;li&gt;註：此敘述不符合明確性&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;除數即為 GCD。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-3&quot;&gt;&lt;strong&gt;(2) 將原先的 3個敘述 改為 5個敘述&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;輸入兩個自然數 A, B。&lt;/li&gt;
  &lt;li&gt;A 除以 B 餘數為 R。&lt;/li&gt;
  &lt;li&gt;如果 R 為零，則跳至敘述 5。&lt;/li&gt;
  &lt;li&gt;A ← B (B的值給A)，B ← R (R的值給B)，跳至敘述 2。&lt;/li&gt;
  &lt;li&gt;B 即為 GCD。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;stepwise-trace-&quot;&gt;&lt;strong&gt;(3) 以 逐步追蹤法 (Stepwise trace) 驗證敘述過程&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;假設 &lt;code class=&quot;highlighter-rouge&quot;&gt;A = 18&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;B = 12&lt;/code&gt;
    &lt;ol&gt;
      &lt;li&gt;A = 18, B = 12&lt;/li&gt;
      &lt;li&gt;R = (18 MOD 12) = 6&lt;/li&gt;
      &lt;li&gt;R ≠ 0&lt;/li&gt;
      &lt;li&gt;A = 12, B = 6&lt;/li&gt;
      &lt;li&gt;R = (12 MOD 6) = 0&lt;/li&gt;
      &lt;li&gt;R = 0&lt;/li&gt;
      &lt;li&gt;B 即為 GCD (GCD = 6)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;由過程可以得知這些敘述符合明確性、有限性、正確性和具有結果的輸出。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;flow-chart&quot;&gt;(一) 流程圖 (flow chart)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/MBTLY3p.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;流程圖說明
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www2.lssh.tp.edu.tw/~hlf/class-1/lang-c/flow/flow-chat.htm&quot;&gt;http://www2.lssh.tp.edu.tw/~hlf/class-1/lang-c/flow/flow-chat.htm&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[範例] 求兩實數相減之絕對值&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;輸入兩個實數 a 與 b 的值。&lt;/li&gt;
  &lt;li&gt;設定實數 c 值為 &lt;code class=&quot;highlighter-rouge&quot;&gt;a - b&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;如果 (c &amp;lt; 0) 成立，則實數 c 設定為 &lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;輸出實數 c 的值。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/LU4WcQ5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;pseudo-code&quot;&gt;(二) 虛擬碼 (pseudo code)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;以比較口語的描述法加上「迴圈」及「條件判斷」等結構敘述來表達演算法的執行過程，藉以增加可讀性。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[範例] 從 1 加到 10 演算法的虛擬程式碼&lt;/strong&gt; (如下所示)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;counter = 1
total = 0
while counter &amp;lt;= 10
{
   total = total + counter
   add 1 to counter
}
output total
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-4&quot;&gt;三、程式的分析&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;一個好的程式必須滿足以下條件：
    &lt;ol&gt;
      &lt;li&gt;&lt;strong&gt;執行結果正確&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;記憶體需求低&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;可維護性高&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;檢驗項目一：&lt;strong&gt;程式是否模組化？&lt;/strong&gt;&lt;/li&gt;
          &lt;li&gt;檢驗項目二：&lt;strong&gt;命名是否有意義？&lt;/strong&gt;
            &lt;ul&gt;
              &lt;li&gt;常數、變數及函式&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;檢驗項目三：&lt;strong&gt;定義是否明確？&lt;/strong&gt;
            &lt;ul&gt;
              &lt;li&gt;輸入、輸出及功能&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;檢驗項目四：&lt;strong&gt;註解是否恰當？&lt;/strong&gt;&lt;/li&gt;
          &lt;li&gt;檢驗項目五：&lt;strong&gt;說明文件是否完備？&lt;/strong&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;執行效率高&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;執行時間 (run time) 的長短：簡略以程式執行的敘述多寡 (頻率計數) 來測量。&lt;/li&gt;
          &lt;li&gt;檢驗項目：&lt;strong&gt;「頻率計數」(frequency count)&lt;/strong&gt;
            &lt;ul&gt;
              &lt;li&gt;計算程式敘述被執行的總次數；當次數越高，執行時間越長。&lt;/li&gt;
              &lt;li&gt;用來評估程式的執行時間，以判斷演算法的優劣。&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;

        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/rNifrSw.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

        &lt;ol&gt;
          &lt;li&gt;&lt;strong&gt;循序敘述&lt;/strong&gt;
            &lt;ul&gt;
              &lt;li&gt;將敘述的行數進行加總。&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;決策分支敘述&lt;/strong&gt;
            &lt;ul&gt;
              &lt;li&gt;取各個條件分支中總行數的最大值，再加上比較敘述的次數。&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;迴圈敘述&lt;/strong&gt;
            &lt;ul&gt;
              &lt;li&gt;計算迴圈重複的次數，再乘上迴圈內的行數。&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;big-o-&quot;&gt;四、Big-O 符號&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Big-O：時間複雜度 (time complexity)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;程式效率以頻率計數函數的 &lt;strong&gt;級數 (order)&lt;/strong&gt; 進行分級。&lt;/li&gt;
      &lt;li&gt;一般皆以 O 符號來表示時間複雜度，讀作 &lt;strong&gt;Big-oh&lt;/strong&gt;。&lt;/li&gt;
      &lt;li&gt;可以看出執行時間相對於問題大小的「成長速度」、「成長趨勢」。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-5&quot;&gt;(一) 時間複雜度等級&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/d5Gw2H2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;(二) 大小排序&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/4BfZu1g.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://i.imgur.com/9tz4yMA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;(三) 範例&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/eWmEGTs.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Jul 2017 08:00:00 +0800</pubDate>
        <link>http://shouzo.github.io/2017/07/20/Data_Structure_Book/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/07/20/Data_Structure_Book/</guid>
        
        <category>資料結構</category>
        
        <category>演算法</category>
        
        <category>C語言</category>
        
        <category>程式設計</category>
        
        
        <category>資料結構</category>
        
        <category>演算法</category>
        
        <category>C語言</category>
        
        <category>程式設計</category>
        
      </item>
    
      <item>
        <title>20170719 [學習筆記] 30天作業自作入門筆記 (2)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#day2&quot; id=&quot;markdown-toc-day2&quot;&gt;20170719 - Day_2&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#helloosnas&quot; id=&quot;markdown-toc-helloosnas&quot;&gt;一、修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;helloos.nas&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#helloosnas-1&quot; id=&quot;markdown-toc-helloosnas-1&quot;&gt;二、編譯 &lt;code class=&quot;highlighter-rouge&quot;&gt;helloos.nas&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#osimg&quot; id=&quot;markdown-toc-osimg&quot;&gt;三、啟動虛擬機，讀取 &lt;code class=&quot;highlighter-rouge&quot;&gt;os.img&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;工作環境
    &lt;ul&gt;
      &lt;li&gt;Lubuntu 17.04&lt;/li&gt;
      &lt;li&gt;VMware Workstation 12.5.2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;參考資料
    &lt;ul&gt;
      &lt;li&gt;Linux 版本筆記：&lt;a href=&quot;http://lengly.top/archives/85&quot;&gt;http://lengly.top/archives/85&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;day2&quot;&gt;20170719 - Day_2&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;進度摘要
    &lt;ul&gt;
      &lt;li&gt;簡易 IPL 製作。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;完整專案
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/My-30OS/tree/master/20170719&quot;&gt;https://github.com/shouzo/My-30OS/tree/master/20170719&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;參考資料
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.gtwang.org/linux/dd-command-examples/&quot;&gt;dd 指令教學與實用範例，備份與回復資料的小工具&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;helloosnas&quot;&gt;一、修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;helloos.nas&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RESB	0x7dfe-$&lt;/code&gt; 此行無法通過編譯，故修改成 &lt;code class=&quot;highlighter-rouge&quot;&gt;TIMES 510-($-$$)    DB    0&lt;/code&gt;。
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; 代表目前行的位址，&lt;code class=&quot;highlighter-rouge&quot;&gt;$$&lt;/code&gt; 為目前 section 的位址。(TIMES 意思為重複，先決定次數再確定重複的內容)。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;; hello-os
; TAB=4

ORG		0x7c00			; 指定從 0x7c00 開始執行

;   以下是為了標準 FAT12 格式的軟式磁碟片的記述

    JMP		entry
    DB		0x90
    DB		&quot;HELLOIPL&quot;		
    DW		512				
    DB		1				
    DW		1				
    DB		2				
    DW		224				
    DW		2880			
    DB		0xf0			
    DW		9				
    DW		18				
    DW		2				
    DD		0				
    DD		2880			
    DB		0,0,0x29		
    DD		0xffffffff		
    DB		&quot;HELLO-OS   &quot;	
    DB		&quot;FAT12   &quot;		
    RESB	18				


; 程式碼本身

entry:
    MOV		AX,0			; 暫存器初始化
    MOV		SS,AX
    MOV		SP,0x7c00
    MOV		DS,AX
    MOV		ES,AX

    MOV		SI,msg


putloop:
    MOV		AL,[SI]
    ADD		SI,1			; 在 SI 加 1
    CMP		AL,0
    JE		fin
    MOV		AH,0x0e			; 一個文字表示功能
    MOV		BX,15			; 顏色代碼 (color code)
    INT		0x10			; 呼叫視訊 BIOS
    JMP		putloop


fin:
    HLT						; 直到有了某個物件就將 CPU 停止
    JMP		fin				; 無限迴圈


msg:
    DB		0x0a, 0x0a		; 連續兩個換行
    DB		&quot;hello, world&quot;
    DB		0x0a			; 換行 
    DB		0

    ; RESB	0x7dfe-$	       ; 此行編譯無法通過，故修改成 &quot;TIMES 510-($-$$)    DB    0&quot;
    TIMES 510-($-$$)    DB    0      ; &quot;$&quot; 代表目前行的位址，&quot;$$&quot; 為目前 section 的位址。(TIMES 意思為重複，先確定次數再確定重複的內容)

    DB		0x55, 0xaa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;helloosnas-1&quot;&gt;二、編譯 &lt;code class=&quot;highlighter-rouge&quot;&gt;helloos.nas&lt;/code&gt;&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;編譯 &lt;code class=&quot;highlighter-rouge&quot;&gt;helloos.nas&lt;/code&gt;，在輸出 &lt;code class=&quot;highlighter-rouge&quot;&gt;bootloader&lt;/code&gt; 的同時也輸出列表檔案 &lt;code class=&quot;highlighter-rouge&quot;&gt;ipl.lst&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;nasm -o bootloader -l ipl.lst helloos.nas&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/KfOYHIM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在 Linux 系統下使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;dd&lt;/code&gt; 指令產生 &lt;code class=&quot;highlighter-rouge&quot;&gt;os.img&lt;/code&gt; 檔案。
    &lt;ul&gt;
      &lt;li&gt;先將 os.img 清空歸零，再將 bootloader 拷貝到 img 裡面。&lt;/li&gt;
      &lt;li&gt;一個軟碟片容量：&lt;strong&gt;1.44MB = 512KB * 2880&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;dd if=/dev/zero of=os.img bs=512 count=2880&lt;/p&gt;

  &lt;p&gt;dd if=bootloader of=os.img bs=512 count=1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;if：指定輸入檔案
of：指定輸出檔案
bs：指定 block size，一次讀取與寫入 N 個位元組的資料
count：處理 N 個輸入區塊
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/DbKECqo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果打開 &lt;code class=&quot;highlighter-rouge&quot;&gt;ipl.lst&lt;/code&gt; ，可以檢視組合語言轉換成機械碼的情形。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;     1                                  ; hello-os
     2                                  ; TAB=4
     3                                  
     4                                  ORG		0x7c00			    ;   指定從 0x7c00 開始執行
     5                                  
     6                                  ;   以下是為了標準 FAT12 格式的軟式磁碟片的記述
     7                                  
     8 00000000 EB4E                        JMP		entry
     9 00000002 90                          DB		0x90
    10 00000003 48454C4C4F49504C            DB		&quot;HELLOIPL&quot;		
    11 0000000B 0002                        DW		512				
    12 0000000D 01                          DB		1				
    13 0000000E 0100                        DW		1				
    14 00000010 02                          DB		2				
    15 00000011 E000                        DW		224				
    16 00000013 400B                        DW		2880			
    17 00000015 F0                          DB		0xf0			
    18 00000016 0900                        DW		9				
    19 00000018 1200                        DW		18				
    20 0000001A 0200                        DW		2				
    21 0000001C 00000000                    DD		0				
    22 00000020 400B0000                    DD		2880			
    23 00000024 000029                      DB		0,0,0x29		
    24 00000027 FFFFFFFF                    DD		0xffffffff		
    25 0000002B 48454C4C4F2D4F5320-         DB		&quot;HELLO-OS   &quot;	
    25 00000034 2020               
    26 00000036 4641543132202020            DB		&quot;FAT12   &quot;		
    27 0000003E &amp;lt;res 00000012&amp;gt;              RESB	18				
    27          ******************       warning: uninitialized space declared in .text section: zeroing
    28                                  
    29                                  
    30                                  
    31                                  
    32                                  ; 程式碼本身
    33                                  
    34                                  entry:
    35 00000050 B80000                      MOV		AX,0			;   暫存器初始化
    36 00000053 8ED0                        MOV		SS,AX
    37 00000055 BC007C                      MOV		SP,0x7c00
    38 00000058 8ED8                        MOV		DS,AX
    39 0000005A 8EC0                        MOV		ES,AX
    40                                  
    41 0000005C BE[7400]                    MOV		SI,msg
    42                                  
    43                                  
    44                                  putloop:
    45 0000005F 8A04                        MOV		AL,[SI]
    46 00000061 83C601                      ADD		SI,1			;   在 SI 加 1
    47 00000064 3C00                        CMP		AL,0
    48 00000066 7409                        JE		fin
    49 00000068 B40E                        MOV		AH,0x0e			;   一個文字表示功能
    50 0000006A BB0F00                      MOV		BX,15			;   顏色代碼 (color code)
    51 0000006D CD10                        INT		0x10			;   呼叫視訊 BIOS
    52 0000006F EBEE                        JMP		putloop
    53                                  
    54                                  
    55                                  fin:
    56 00000071 F4                          HLT						;   直到有了某個物件就將 CPU 停止
    57 00000072 EBFD                        JMP		fin				;   無限迴圈
    58                                  
    59                                  
    60                                  msg:
    61 00000074 0A0A                        DB		0x0a, 0x0a		;   連續兩個換行
    62 00000076 68656C6C6F2C20776F-         DB		&quot;hello, world&quot;
    62 0000007F 726C64             
    63 00000082 0A                          DB		0x0a			;   換行 
    64 00000083 00                          DB		0
    65                                  
    66                                      ;   RESB	0x7dfe-$	;   此行編譯無法通過，故修改成 &quot;TIMES 510-($-$$)      DB      0&quot;
    67 00000084 00&amp;lt;rept&amp;gt;                    TIMES 510-($-$$)    DB      0   ;   &#39;$&#39; 代表目前行的位址，&#39;$$&#39; 為目前 section 的位址。(TIMES 意思為重複，先確定次數再確定重複的內容)
    68                                  
    69 000001FE 55AA                        DB		0x55, 0xaa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;osimg&quot;&gt;三、啟動虛擬機，讀取 &lt;code class=&quot;highlighter-rouge&quot;&gt;os.img&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;執行結果
&lt;img src=&quot;https://i.imgur.com/ZwHRrHj.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 19 Jul 2017 08:00:00 +0800</pubDate>
        <link>http://shouzo.github.io/2017/07/19/30OS_day2/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/07/19/30OS_day2/</guid>
        
        <category>組合語言</category>
        
        <category>C語言</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
        
        <category>組合語言</category>
        
        <category>C語言</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
      </item>
    
      <item>
        <title>20170714 [學習筆記] 30天作業自作入門筆記 (1)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#day1&quot; id=&quot;markdown-toc-day1&quot;&gt;20170714 - Day_1&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#nasm-&quot; id=&quot;markdown-toc-nasm-&quot;&gt;一、安裝 &lt;code class=&quot;highlighter-rouge&quot;&gt;nasm&lt;/code&gt; ，編譯映像檔&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;二、新增虛擬機、載入映像檔&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;三、改變螢幕上面的字&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;工作環境
    &lt;ul&gt;
      &lt;li&gt;Lubuntu 17.04&lt;/li&gt;
      &lt;li&gt;VMware Workstation 12.5.2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;參考資料
    &lt;ul&gt;
      &lt;li&gt;Linux 版本筆記：&lt;a href=&quot;http://lengly.top/archives/85&quot;&gt;http://lengly.top/archives/85&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;day1&quot;&gt;20170714 - Day_1&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;進度摘要
    &lt;ul&gt;
      &lt;li&gt;使用 nasm 編譯映像檔，使用虛擬機模擬。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;完整專案
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/My-30OS/tree/master/20170714&quot;&gt;https://github.com/shouzo/My-30OS/tree/master/20170714&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;參考資料
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.nasm.us/&quot;&gt;NASM&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.smalljacky.com/introduction-to-computer/carry-digital-system-conversion/&quot;&gt;數字系統_進制轉換教學&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/FAT&quot;&gt;FAT - 維基百科&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%BC%95%E5%AF%BC%E6%89%87%E5%8C%BA&quot;&gt;開機(啟動)磁區&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://flyeast-personal-area.blogspot.tw/2010/08/ipl-initial-program-loader.html&quot;&gt;IPL - Initial Program Loader&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.lifewire.com/what-does-booting-mean-2625799&quot;&gt;What Does Booting Mean?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nasm-&quot;&gt;一、安裝 &lt;code class=&quot;highlighter-rouge&quot;&gt;nasm&lt;/code&gt; ，編譯映像檔&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. 在終端上輸入以下指令，安裝 &lt;code class=&quot;highlighter-rouge&quot;&gt;nasm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;sudo apt install nasm&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/lqQOAyY.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 用 vim 檢視 &lt;code class=&quot;highlighter-rouge&quot;&gt;helloos.nas&lt;/code&gt; 的內容&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;DB	0xeb, 0x4e, 0x90, 0x48, 0x45, 0x4c, 0x4c, 0x4f
DB	0x49, 0x50, 0x4c, 0x00, 0x02, 0x01, 0x01, 0x00
DB	0x02, 0xe0, 0x00, 0x40, 0x0b, 0xf0, 0x09, 0x00
DB	0x12, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
DB	0x40, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x29, 0xff
DB	0xff, 0xff, 0xff, 0x48, 0x45, 0x4c, 0x4c, 0x4f
DB	0x2d, 0x4f, 0x53, 0x20, 0x20, 0x20, 0x46, 0x41
DB	0x54, 0x31, 0x32, 0x20, 0x20, 0x20, 0x00, 0x00
RESB	16
DB	0xb8, 0x00, 0x00, 0x8e, 0xd0, 0xbc, 0x00, 0x7c
DB	0x8e, 0xd8, 0x8e, 0xc0, 0xbe, 0x74, 0x7c, 0x8a
DB	0x04, 0x83, 0xc6, 0x01, 0x3c, 0x00, 0x74, 0x09
DB	0xb4, 0x0e, 0xbb, 0x0f, 0x00, 0xcd, 0x10, 0xeb
DB	0xee, 0xf4, 0xeb, 0xfd, 0x0a, 0x0a, 0x68, 0x65
DB	0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x77, 0x6f, 0x72
DB	0x6c, 0x64, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00
RESB	368
DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa
DB	0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00
RESB	4600
DB	0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00
RESB	1469432
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/lTRNdvC.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;好吧，我發現自己看不懂…得找找相關的組合語言書籍。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 將 &lt;code class=&quot;highlighter-rouge&quot;&gt;helloos.nas&lt;/code&gt; 編譯成映像檔 &lt;code class=&quot;highlighter-rouge&quot;&gt;helloos.img&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;nasm -o helloos.img helloos.nas&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/mof2KcD.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;二、新增虛擬機、載入映像檔&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. 環境配置 » 記憶體：256MB、硬碟：8GB&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/l0LDEAg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 設定虛擬機欲讀取的映像檔位置&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;在書本範例上是使用 “軟碟機” 讀取映像檔 &lt;code class=&quot;highlighter-rouge&quot;&gt;helloos.img&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Ng6nstQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 啟動虛擬機&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;可以看到螢幕上顯示 &lt;code class=&quot;highlighter-rouge&quot;&gt;hello, world&lt;/code&gt; 後畫面停滯不動，觀察完後便可將虛擬機關機。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/I3ap9DE.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;三、改變螢幕上面的字&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. 用 vim 修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;helloos.img&lt;/code&gt; 映像檔&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;將內文中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;hello, world&lt;/code&gt; 改成 &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello, shouzo. Be Strong to Be Useful.&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/qv125bc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;編輯完成後，將映像檔另存成 &lt;code class=&quot;highlighter-rouge&quot;&gt;hello_shouzo.img&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. 設定新的映像檔讀取位置後，啟動虛擬機&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;本次將欲讀取的映像檔改成 &lt;code class=&quot;highlighter-rouge&quot;&gt;hello_shouzo.img&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/avcdhdB.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 14 Jul 2017 08:00:00 +0800</pubDate>
        <link>http://shouzo.github.io/2017/07/14/30OS_day1/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/07/14/30OS_day1/</guid>
        
        <category>組合語言</category>
        
        <category>C語言</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
        
        <category>組合語言</category>
        
        <category>C語言</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
      </item>
    
      <item>
        <title>20170622 [學習筆記] Linux 系統程式筆記總整理</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;一、作業系統&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#linux-&quot; id=&quot;markdown-toc-linux-&quot;&gt;二、Linux 程式設計&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;本學期課程的筆記總整理。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;一、作業系統&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/collections/linux_system/Operating_System.html&quot;&gt;Operating_System (作業系統)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;linux-&quot;&gt;二、Linux 程式設計&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/collections/linux_system/Linux_Programming.html&quot;&gt;Linux_Programming  (Linux 程式設計)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 22 Jun 2017 08:00:00 +0800</pubDate>
        <link>http://shouzo.github.io/2017/06/22/linux_system/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/06/22/linux_system/</guid>
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
      </item>
    
      <item>
        <title>20170616 [有感而發] 這四年我誤入歧途、又不務正業，但活得像是個人</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;來自四年前的期許&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;命運的分歧點&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;有什麼改變了&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;參與社會化的體現：社團&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;不務正業之徒&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;誤入歧途&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;名為“後悔”的情緒&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-7&quot; id=&quot;markdown-toc-section-7&quot;&gt;有幸與你們相遇&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-8&quot; id=&quot;markdown-toc-section-8&quot;&gt;到了最後，老套依舊適切&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前幾天是我們學校的畢業典禮，許多即將畢業的準學士生在校園各地穿著“學位服”和親朋好友拍照打卡；也因為這個緣故，這幾天臉書的動態牆上都被同學的畢業文洗版。&lt;/p&gt;

&lt;p&gt;我是“形式上”的應屆畢業生，同時也是典禮幕後的工作人員(畢聯會)，當天照樣要處理各類雜事、應付奇葩的畢業生；雖說畢業典禮對我而言只是個“形式”，但它在其他應屆畢業生的心裡象徵著人生階段性的完成。這時候不發個畢業感言好像說不過去，可是我還在準備期末考(好掙扎阿)。&lt;/p&gt;

&lt;p&gt;…算了，但還是來回顧一下這幾年的積累吧！&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;來自四年前的期許&lt;/h2&gt;
&lt;p&gt;在高中時期，我習慣用筆記本記下每天發生的事情。後來 Facebook 崛起，就漸漸將一些事情放上 Facebook。
當時也做了來高雄之前的心情紀事…(&lt;a href=&quot;https://www.facebook.com/danny200026/posts/368693933257313&quot;&gt;這四年，不知道我又會訂下什麼目標&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;命運的分歧點&lt;/h3&gt;
&lt;p&gt;我想最關鍵的還是當年大一，在陰錯陽差之下擔任了社團的負責人。
原先只打算在這四年好好學習，把“唸書”定位為本業學好學滿，就這樣度過這四年。…就像個普通學生一樣，將自己埋首於書堆之中。…(&lt;a href=&quot;https://www.facebook.com/danny200026/media_set?set=a.912476945545673.100003501287209&amp;amp;type=3&quot;&gt;夢想，Loading…&lt;/a&gt;)
自從“誤入”社團之後，命運就改變了…(&lt;a href=&quot;https://www.facebook.com/danny200026/media_set?set=a.1135413809918651.1073741847.100003501287209&amp;amp;type=3&quot;&gt;社團人生回顧系列&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;有什麼改變了&lt;/h3&gt;
&lt;p&gt;原先只活在自己世界的我迫於職務上的需求，發展了與人應對進退的能力，也開始學習和接觸未曾接觸的領域；原先只在意自己生活的我，開始學會關注社團成員和周遭朋友的生活；原先只願意為自己而行動的我，開始為了其他人發起從未有人嘗試的事情；也在經歷社團生活的旅途中，曾經有過一段感情。&lt;/p&gt;

&lt;p&gt;我漸漸發覺︰「當年的陰錯陽差，讓我得以出現在某些人的生命裡，它或多或少改變了某些人的生活，同時也改變了我。」&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;或許對於某些人而言，我是高應大的社團狂人、是體委傳奇；但是在卸下了頭上那名為“社團”的光環之後，我只是個“不務正業”的人而已。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;怎麼個不務正業？&lt;/p&gt;

&lt;p&gt;「不被現有體制框架限制、脫離體制安排，透過獨立思考後瞭解現階段自己真正需要的究竟是什麼，再自行去學習為了滿足需求而必備的技能。」&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;參與社會化的體現：社團&lt;/h3&gt;
&lt;p&gt;「社團到底在學什麼？古今中外為何有這麼多人願意以學分作為籌碼，投注其中？」這裡有一篇文章寫得很有意思…(&lt;a href=&quot;https://www.facebook.com/makarove.iluete/posts/1503318633074386&quot;&gt;誰給的出尊嚴，誰就能留住人&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;從大一被半銃康接任國術社、在大二升上大三之際創立跑酷社、大四被網羅去畢聯會…，社團生活佔滿我將近全部的大學生涯，而我從中到底學了什麼？&lt;/p&gt;

&lt;p&gt;我從中 “粗淺地” 習得了兩大技能：&lt;strong&gt;思維模式&lt;/strong&gt;、&lt;strong&gt;人際互動&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;我自認自己是個內向的人，在某些時刻甚至會刻意離群索居，因為獨處讓我感到平靜。而我從參與社團的過程中找到了專屬於自己的開關，在必要時切換模式 (而任何模式下都是真實的自己，只是呈現的型態不一樣)。 &lt;strong&gt;久而久之我發現「參與社團的過程中，其實相當於參與社會化的過程」，而我也發現「唯有走入人群，才更能夠明白該如何真正的隱遁於人群之中」。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;說穿了，“外展” 和 “內斂” 只不過是一體的兩面。&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;不務正業之徒&lt;/h2&gt;
&lt;h3 id=&quot;section-5&quot;&gt;誤入歧途&lt;/h3&gt;
&lt;p&gt;曾經有一位在系上德高望重的“奇異”老師 (代號：QQ慶)，印象中他經常在課堂上講一些奇怪的東西。但有一段話在我的記憶裡特別深刻，他是這樣對我說的：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「你誤入歧途，把時間跟心力都用在『栽培別人』身上。
倘若你把這些時間放在課業上，依你的能力進入台灣“四大”唸研究所絕對不是問題…。」&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;當時聽到也只是對他笑笑，並沒有多作他想。但不知道為什麼時間越久，這段話卻像是用石頭不斷對著牆壁刻字一樣，日益清晰。也許這段話其實是心裡對於 &lt;strong&gt;“普通大學生活”&lt;/strong&gt; 這個念頭的體現。它被埋藏在我記憶深處的角落，經常在夜深人靜時提醒因焦慮而失眠的我： &lt;strong&gt;「…你不會後悔嗎？」&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;名為“後悔”的情緒&lt;/h3&gt;

&lt;p&gt;後悔，是基於完成某項抉擇之後發現錯誤，企圖去扭轉實際上無力改變的結果時所產生的情緒。在當初命運的分歧點上，我無法衡量 &lt;strong&gt;“沒有任何背景的情況下，在大一直接成為社團負責人”&lt;/strong&gt; 這件事將會帶來的損益(因為沒有概念)。在歷經風雨之後，那些因而付出的代價也都變成了沉沒成本，無從討回。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「如果大一的我當時果斷拒絕擔任社團負責人，那我現在的命運會如何？」&lt;/strong&gt; 這是個無法被驗證的問題，因為無論我們再怎麼努力也無法讓時間回溯。&lt;/p&gt;

&lt;p&gt;那我們來做一個假設： &lt;strong&gt;「如果當初沒有加入社團？」&lt;/strong&gt; 可能因為沒有人願意接任負責人的關係，國術社在當年就倒了、跑酷社也不會創立、也不可能會成為畢聯會活動部長、也沒機會認識來自各方的神人了(當然也可以朝其他面向來想像)； &lt;strong&gt;「如果沒接社團，我真的有可能會乖乖埋首於書本之中嗎？」&lt;/strong&gt; …我覺得自己應該不會 “那麼安分守己”。&lt;/p&gt;

&lt;p&gt;有趣的是，現在的我並不是為了當初的那個陰錯陽差而悔不當初，我後悔的是：「為什麼當初的自己不夠強大，能力沒辦法撐起我的願望？」也是因為認清自己當下的極限，以及“不夠強大”的事實，逼得我四處去“探索挖掘”，僅僅去尋求每一個能學習的機會。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果時光真的能夠回溯，我應該不會加入社團；但是誰也不能奪走這些年的積累、那曾經的風雨無阻。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;「那些能夠讓你成長的，不見得都是讓你感到快樂的事。」我的大學生活雖然不同於一般人，不過也正是這樣才能彰顯它的價值，也才會令人感到回味無窮。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;有幸與你們相遇&lt;/h2&gt;
&lt;p&gt;在此感謝大學四年的同班同學、KDDLab實驗室裡的所有成員、&lt;a href=&quot;https://www.facebook.com/frmparkour/&quot;&gt;Frmp摩猴跑酷&lt;/a&gt; 的朋友；&lt;a href=&quot;https://www.facebook.com/KUASMartialArt/&quot;&gt;高應大國術社&lt;/a&gt;、&lt;a href=&quot;https://www.facebook.com/airfeetparkour/&quot;&gt;高應大跑酷社, KUAS - Air Feet Parkour&lt;/a&gt;、&lt;a href=&quot;https://www.facebook.com/KUASgraduate/&quot;&gt;高應大畢聯會｜Kuas－gsa&lt;/a&gt;、&lt;a href=&quot;https://www.facebook.com/Kuas%E9%AB%94%E5%A7%94-440439566106678/&quot;&gt;Kuas體委&lt;/a&gt; 所有共事過的夥伴、校內外的社團人，以及其他出現在大學生涯裡的人。&lt;/p&gt;

&lt;p&gt;…當然了，還有我的家人們。&lt;/p&gt;

&lt;p&gt;謝謝你們出現在我的生命裡，也讓我有這個榮幸得以參與你們的生活。&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;到了最後，老套依舊適切&lt;/h3&gt;
&lt;p&gt;非得到了最後才會覺得原先平凡不過的每一天，其實都是無比的珍貴。至於祝福的話，不如就簡單一點：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;珍重再見，期待再相逢。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;期待未來再次相聚時，重新回味屬於我們當年的大學故事吧！&lt;/p&gt;
</description>
        <pubDate>Fri, 16 Jun 2017 08:00:00 +0800</pubDate>
        <link>http://shouzo.github.io/2017/06/16/university_life/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/06/16/university_life/</guid>
        
        <category>心情記事</category>
        
        <category>社團</category>
        
        
        <category>社團</category>
        
      </item>
    
      <item>
        <title>20170615 [學習筆記] Linux 系統程式 (15)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;一、作業系統&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#allocation-of-frames&quot; id=&quot;markdown-toc-allocation-of-frames&quot;&gt;(一) Allocation of Frames&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#fixed-allocation&quot; id=&quot;markdown-toc-fixed-allocation&quot;&gt;1. Fixed Allocation&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#priority-allocation&quot; id=&quot;markdown-toc-priority-allocation&quot;&gt;2. Priority Allocation&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#global-vs-local-allocation&quot; id=&quot;markdown-toc-global-vs-local-allocation&quot;&gt;3. Global vs. Local Allocation&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#non-uniform-memory-access&quot; id=&quot;markdown-toc-non-uniform-memory-access&quot;&gt;4. Non-Uniform Memory Access&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#thrashing&quot; id=&quot;markdown-toc-thrashing&quot;&gt;5. Thrashing&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#demand-paging-and-thrashing&quot; id=&quot;markdown-toc-demand-paging-and-thrashing&quot;&gt;6. Demand Paging and Thrashing&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#working-set-model&quot; id=&quot;markdown-toc-working-set-model&quot;&gt;7. Working-Set Model&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#page-fault-frequency&quot; id=&quot;markdown-toc-page-fault-frequency&quot;&gt;8. Page-Fault Frequency&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#memory-mapped-files&quot; id=&quot;markdown-toc-memory-mapped-files&quot;&gt;(二) Memory-Mapped Files&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#other-considerations----prepaging&quot; id=&quot;markdown-toc-other-considerations----prepaging&quot;&gt;(三) Other Considerations – Prepaging&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#other-issues&quot; id=&quot;markdown-toc-other-issues&quot;&gt;(四) Other Issues&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;一、作業系統&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;課堂講義
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170615/ch09.pdf&quot;&gt;Chapter 9: Virtual-Memory Management&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;allocation-of-frames&quot;&gt;(一) Allocation of Frames&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Each process needs minimum number of frames&lt;/li&gt;
  &lt;li&gt;Example: IBM 370 – 6 pages to handle SS MOVE instruction:
    &lt;ul&gt;
      &lt;li&gt;instruction is 6 bytes, might span 2 pages&lt;/li&gt;
      &lt;li&gt;2 pages to handle from&lt;/li&gt;
      &lt;li&gt;2 pages to handle to&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Maximum of course is total frames in the system&lt;/li&gt;
  &lt;li&gt;Two major allocation schemes
    &lt;ul&gt;
      &lt;li&gt;fixed allocation&lt;/li&gt;
      &lt;li&gt;priority allocation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Many variations&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;fixed-allocation&quot;&gt;1. Fixed Allocation&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Equal allocation – For example, if there are 100 frames (after allocating frames for the OS) and 5 processes, give each process 20 frames
    &lt;ul&gt;
      &lt;li&gt;Keep some as free frame buffer pool&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Proportional allocation – Allocate according to the size of process
    &lt;ul&gt;
      &lt;li&gt;Dynamic as degree of multiprogramming, process sizes change&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/EwupsLy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;priority-allocation&quot;&gt;2. Priority Allocation&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Use a proportional allocation scheme using priorities rather than size&lt;/li&gt;
  &lt;li&gt;If process P i generates a page fault,
    &lt;ul&gt;
      &lt;li&gt;select for replacement one of its frames&lt;/li&gt;
      &lt;li&gt;select for replacement a frame from a process with lower priority number&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;global-vs-local-allocation&quot;&gt;3. Global vs. Local Allocation&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Global replacement&lt;/strong&gt; – process selects a replacement frame from the set of all frames; one process can take a frame from another
    &lt;ul&gt;
      &lt;li&gt;But then process execution time can vary greatly&lt;/li&gt;
      &lt;li&gt;But greater throughput so more common&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Local replacement&lt;/strong&gt; – each process selects from only its own set of allocated frames
    &lt;ul&gt;
      &lt;li&gt;More consistent per-process performance&lt;/li&gt;
      &lt;li&gt;But possibly underutilized memory&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;non-uniform-memory-access&quot;&gt;4. Non-Uniform Memory Access&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;So far all memory accessed equally&lt;/li&gt;
  &lt;li&gt;Many systems are NUMA – speed of access to memory varies
    &lt;ul&gt;
      &lt;li&gt;Consider system boards containing CPUs and memory, interconnected over a system bus&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Optimal performance comes from allocating memory “close to” the CPU on which the thread is scheduled
    &lt;ul&gt;
      &lt;li&gt;And modifying the scheduler to schedule the thread on the same system board when possible&lt;/li&gt;
      &lt;li&gt;Solved by Solaris by creating &lt;strong&gt;lgroups&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;Structure to track CPU / Memory low latency groups&lt;/li&gt;
          &lt;li&gt;Used my schedule and pager&lt;/li&gt;
          &lt;li&gt;When possible schedule all threads of a process and allocate all memory for that process within the lgroup&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;thrashing&quot;&gt;5. Thrashing&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;If a process does not have “enough” pages, the page-fault rate is very high
    &lt;ul&gt;
      &lt;li&gt;Page fault to get page&lt;/li&gt;
      &lt;li&gt;Replace existing frame&lt;/li&gt;
      &lt;li&gt;But quickly need replaced frame back&lt;/li&gt;
      &lt;li&gt;This leads to:
        &lt;ul&gt;
          &lt;li&gt;Low CPU utilization&lt;/li&gt;
          &lt;li&gt;Operating system thinking that it needs to increase the degree of multiprogramming&lt;/li&gt;
          &lt;li&gt;Another process added to the system&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Thrashing&lt;/strong&gt; - a process is busy swapping pages in and out&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/jBcF8pC.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;demand-paging-and-thrashing&quot;&gt;6. Demand Paging and Thrashing&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Why does demand paging work? &lt;strong&gt;Locality model&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Process migrates from one locality to another&lt;/li&gt;
      &lt;li&gt;Localities may overlap&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Why does thrashing occur? &lt;strong&gt;size of locality &amp;gt; total memory size&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Limit effects by using local or priority page replacement&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;working-set-model&quot;&gt;7. Working-Set Model&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Nsrm3Lw.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://i.imgur.com/Xy48qM2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Keeping Track of the Working Set&lt;/strong&gt;
&lt;img src=&quot;https://i.imgur.com/QHoALdo.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;page-fault-frequency&quot;&gt;8. Page-Fault Frequency&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;More direct approach than WSS&lt;/li&gt;
  &lt;li&gt;Establish “acceptable” &lt;strong&gt;page-fault frequency&lt;/strong&gt; rate and use local replacement policy
    &lt;ul&gt;
      &lt;li&gt;If actual rate too low, process loses frame&lt;/li&gt;
      &lt;li&gt;If actual rate too high, process gains frame&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/ws4FmRA.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://i.imgur.com/ujHWuKv.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;memory-mapped-files&quot;&gt;(二) Memory-Mapped Files&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Memory-mapped file I/O allows file I/O to be treated as routine memory access by &lt;strong&gt;mapping&lt;/strong&gt; a disk block to a page in memory&lt;/li&gt;
  &lt;li&gt;A file is initially read using demand paging
    &lt;ul&gt;
      &lt;li&gt;A page-sized portion of the file is read from the file system into a physical page&lt;/li&gt;
      &lt;li&gt;Subsequent reads/writes to/from the file are treated as ordinary memory accesses&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Simplifies and speeds file access by driving file I/O through memory rather than &lt;code class=&quot;highlighter-rouge&quot;&gt;read()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;write()&lt;/code&gt; system calls&lt;/li&gt;
  &lt;li&gt;Also allows several processes to map the same file allowing the pages in memory to be shared&lt;/li&gt;
  &lt;li&gt;But when does written data make it to disk?
    &lt;ul&gt;
      &lt;li&gt;Periodically and / or at file &lt;code class=&quot;highlighter-rouge&quot;&gt;close()&lt;/code&gt; time&lt;/li&gt;
      &lt;li&gt;For example, when the pager scans for dirty pages&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/zWof78r.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;other-considerations----prepaging&quot;&gt;(三) Other Considerations – Prepaging&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;To reduce the large number of page faults that occurs at process startup&lt;/li&gt;
  &lt;li&gt;Prepage all or some of the pages a process will need, before they are referenced&lt;/li&gt;
  &lt;li&gt;But if prepaged pages are unused, I/O and memory was wasted&lt;/li&gt;
  &lt;li&gt;Assume s pages are prepaged and α of the pages is used
    &lt;ul&gt;
      &lt;li&gt;Is cost of &lt;code class=&quot;highlighter-rouge&quot;&gt;s * α&lt;/code&gt; save pages faults &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; than the cost of prepaging &lt;code class=&quot;highlighter-rouge&quot;&gt;s * (1-α)&lt;/code&gt; unnecessary pages?&lt;/li&gt;
      &lt;li&gt;α near zero » prepaging loses&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;other-issues&quot;&gt;(四) Other Issues&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/289vIx7.png&quot; alt=&quot;&quot; /&gt;
—
&lt;img src=&quot;https://i.imgur.com/AzOr7n2.png&quot; alt=&quot;&quot; /&gt;
—
&lt;img src=&quot;https://i.imgur.com/9ZuU18h.png&quot; alt=&quot;&quot; /&gt;
—
&lt;img src=&quot;https://i.imgur.com/cHTpyGG.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Jun 2017 08:00:00 +0800</pubDate>
        <link>http://shouzo.github.io/2017/06/15/linux_system/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/06/15/linux_system/</guid>
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
      </item>
    
      <item>
        <title>20170608 [學習筆記] Linux 系統程式 (14)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;一、作業系統&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#background&quot; id=&quot;markdown-toc-background&quot;&gt;(一) Background&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#virtual-address-space&quot; id=&quot;markdown-toc-virtual-address-space&quot;&gt;(二) Virtual Address Space&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#demand-paging&quot; id=&quot;markdown-toc-demand-paging&quot;&gt;(三) Demand Paging&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#valid-invalid-bit&quot; id=&quot;markdown-toc-valid-invalid-bit&quot;&gt;1. Valid-Invalid Bit&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#example&quot; id=&quot;markdown-toc-example&quot;&gt;2. Example&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#optimizations&quot; id=&quot;markdown-toc-optimizations&quot;&gt;3. Optimizations&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#page-fault&quot; id=&quot;markdown-toc-page-fault&quot;&gt;(四) Page Fault&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#aspects-of-demand-paging&quot; id=&quot;markdown-toc-aspects-of-demand-paging&quot;&gt;1. Aspects of Demand Paging&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#instruction-restart&quot; id=&quot;markdown-toc-instruction-restart&quot;&gt;2. Instruction Restart&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#performance-of-demand-paging&quot; id=&quot;markdown-toc-performance-of-demand-paging&quot;&gt;Performance of Demand Paging&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#copy-on-write&quot; id=&quot;markdown-toc-copy-on-write&quot;&gt;(五) Copy-on-Write&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#page-replacement&quot; id=&quot;markdown-toc-page-replacement&quot;&gt;(六) Page Replacement&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#what-happens-if-there-is-no-free-frame&quot; id=&quot;markdown-toc-what-happens-if-there-is-no-free-frame&quot;&gt;1. What Happens if There is no Free Frame?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#basic-page-replacement&quot; id=&quot;markdown-toc-basic-page-replacement&quot;&gt;2. Basic Page Replacement&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#page-and-frame-replacement-algorithms&quot; id=&quot;markdown-toc-page-and-frame-replacement-algorithms&quot;&gt;3. Page and Frame Replacement Algorithms&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#first-in-first-out-fifo-algorithm&quot; id=&quot;markdown-toc-first-in-first-out-fifo-algorithm&quot;&gt;(1) First-In-First-Out (FIFO) Algorithm&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#optimal-algorithm&quot; id=&quot;markdown-toc-optimal-algorithm&quot;&gt;(2) Optimal Algorithm&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#least-recently-used-lru-algorithm&quot; id=&quot;markdown-toc-least-recently-used-lru-algorithm&quot;&gt;(3) Least Recently Used (LRU) Algorithm&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#lru-approximation-algorithms&quot; id=&quot;markdown-toc-lru-approximation-algorithms&quot;&gt;(4) LRU Approximation Algorithms&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#counting-algorithms&quot; id=&quot;markdown-toc-counting-algorithms&quot;&gt;(5) Counting Algorithms&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#page-buffering-algorithms&quot; id=&quot;markdown-toc-page-buffering-algorithms&quot;&gt;(6) Page-Buffering Algorithms&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;一、作業系統&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;課堂講義
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170608/ch09.pdf&quot;&gt;Chapter 9: Virtual-Memory Management&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;background&quot;&gt;(一) Background&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Code needs to be in memory to execute, but entire program rarely used
    &lt;ul&gt;
      &lt;li&gt;Error code, unusual routines, large data structures&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Entire program code not needed at same time&lt;/li&gt;
  &lt;li&gt;Consider ability to execute partially-loaded program
    &lt;ul&gt;
      &lt;li&gt;Program no longer constrained by limits of physical memory&lt;/li&gt;
      &lt;li&gt;Program and programs could be larger than physical memory&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Virtual memory&lt;/strong&gt; – separation of user logical memory from physical memory
    &lt;ul&gt;
      &lt;li&gt;Only part of the program needs to be in memory for execution&lt;/li&gt;
      &lt;li&gt;Logical address space can therefore be much larger than physical address space&lt;/li&gt;
      &lt;li&gt;Allows address spaces to be shared by several processes&lt;/li&gt;
      &lt;li&gt;Allows for more efficient process creation&lt;/li&gt;
      &lt;li&gt;More programs running concurrently&lt;/li&gt;
      &lt;li&gt;Less I/O needed to load or swap processes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Virtual memory can be implemented via
    &lt;ul&gt;
      &lt;li&gt;Demand paging&lt;/li&gt;
      &lt;li&gt;Demand segmentation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;virtual-address-space&quot;&gt;(二) Virtual Address Space&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/DkDhsAx.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enables &lt;strong&gt;sparse&lt;/strong&gt; address spaces with holes left for growth, dynamically linked libraries, etc&lt;/li&gt;
  &lt;li&gt;System libraries shared via mapping into virtual address space&lt;/li&gt;
  &lt;li&gt;Shared memory by mapping pages read-write into virtual address space&lt;/li&gt;
  &lt;li&gt;Pages can be shared during &lt;code class=&quot;highlighter-rouge&quot;&gt;fork()&lt;/code&gt;, speeding process creation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/3jsjqeH.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;demand-paging&quot;&gt;(三) Demand Paging&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Could bring entire process into memory at load time&lt;/li&gt;
  &lt;li&gt;Or bring a page into memory only when it is needed
    &lt;ul&gt;
      &lt;li&gt;Less I/O needed, no unnecessary I/O&lt;/li&gt;
      &lt;li&gt;Less memory needed&lt;/li&gt;
      &lt;li&gt;Faster response&lt;/li&gt;
      &lt;li&gt;More users&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Page is needed » reference to it
    &lt;ul&gt;
      &lt;li&gt;invalid reference » abort&lt;/li&gt;
      &lt;li&gt;not-in-memory » bring to memory&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lazy swapper&lt;/strong&gt; – never swaps a page into memory unless page will be needed
    &lt;ul&gt;
      &lt;li&gt;Swapper that deals with pages is a &lt;strong&gt;pager&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/aLRTern.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;valid-invalid-bit&quot;&gt;1. Valid-Invalid Bit&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;With each page table entry a valid–invalid bit is associated (&lt;strong&gt;v&lt;/strong&gt; » in-memory – &lt;strong&gt;memory resident&lt;/strong&gt;, &lt;strong&gt;i&lt;/strong&gt; » not-in-memory)&lt;/li&gt;
  &lt;li&gt;Initially valid–invalid bit is set to &lt;strong&gt;i&lt;/strong&gt; on all entries&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/0Fk929T.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;example&quot;&gt;2. Example&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Memory access time = 200 nanoseconds&lt;/li&gt;
  &lt;li&gt;Average page-fault service time = 8 milliseconds
    &lt;blockquote&gt;
      &lt;p&gt;EAT = (1 – p) x 200 + p (8 milliseconds)
= (1 – p) x 200 + p x 8,000,000
= 200 + p x 7,999,800&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;If one access out of 1,000 causes a page fault, then EAT = 8.2 microseconds. (This is a slowdown by a factor of 40)&lt;/li&gt;
  &lt;li&gt;If want performance degradation &amp;lt; 10 percent
    &lt;ul&gt;
      &lt;li&gt;220 &amp;gt; 200 + 7,999,800 x p&lt;/li&gt;
      &lt;li&gt;20 &amp;gt; 7,999,800 x p&lt;/li&gt;
      &lt;li&gt;p &amp;lt; .0000025 (&amp;lt; one page fault in every 400,000 memory accesses)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;optimizations&quot;&gt;3. Optimizations&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Copy entire process image to swap space at process load time
    &lt;ul&gt;
      &lt;li&gt;Then page in and out of swap space&lt;/li&gt;
      &lt;li&gt;Used in older BSD Unix&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Demand page in from program binary on disk, but discard rather than paging out when freeing frame
    &lt;ul&gt;
      &lt;li&gt;Used in Solaris and current BSD&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;page-fault&quot;&gt;(四) Page Fault&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;If there is a reference to a page, first reference to that page will trap to operating system
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;page fault&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Operating system looks at another table to decide
    &lt;ul&gt;
      &lt;li&gt;Invalid reference » abort&lt;/li&gt;
      &lt;li&gt;Just not in memory&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Get empty frame&lt;/li&gt;
  &lt;li&gt;Swap page into frame via scheduled disk operation&lt;/li&gt;
  &lt;li&gt;Reset tables to indicate page now in memory Set validation bit = &lt;strong&gt;v&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Restart the instruction that caused the page fault&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/98V6oNY.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;aspects-of-demand-paging&quot;&gt;1. Aspects of Demand Paging&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Extreme case – start process with no pages in memory
    &lt;ul&gt;
      &lt;li&gt;OS sets instruction pointer to first instruction of process, non-memory-resident -&amp;gt; page fault&lt;/li&gt;
      &lt;li&gt;And for every other process pages on first access&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Pure demand paging&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Actually, a given instruction could access multiple pages -&amp;gt; multiple page faults
    &lt;ul&gt;
      &lt;li&gt;Pain decreased because of &lt;strong&gt;locality of reference&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Hardware support needed for demand paging
    &lt;ul&gt;
      &lt;li&gt;Page table with valid / invalid bit&lt;/li&gt;
      &lt;li&gt;Secondary memory (swap device with &lt;strong&gt;swap space&lt;/strong&gt;)&lt;/li&gt;
      &lt;li&gt;Instruction restart&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;instruction-restart&quot;&gt;2. Instruction Restart&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Consider an instruction that could access several different locations
    &lt;ul&gt;
      &lt;li&gt;block move&lt;/li&gt;
      &lt;li&gt;auto increment/decrement location&lt;/li&gt;
      &lt;li&gt;Restart the whole operation?
        &lt;ul&gt;
          &lt;li&gt;What if source and destination overlap?&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;performance-of-demand-paging&quot;&gt;Performance of Demand Paging&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Stages in Demand Paging
    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;Trap to the operating system&lt;/li&gt;
        &lt;li&gt;Save the user registers and process state&lt;/li&gt;
        &lt;li&gt;Determine that the interrupt was a page fault&lt;/li&gt;
        &lt;li&gt;Check that the page reference was legal and determine the location of the page on the disk&lt;/li&gt;
        &lt;li&gt;Issue a read from the disk to a free frame:
(1) Wait in a queue for this device until the read request is serviced
(2) Wait for the device seek and/or latency time
(3) Begin the transfer of the page to a free frame&lt;/li&gt;
        &lt;li&gt;While waiting, allocate the CPU to some other user&lt;/li&gt;
        &lt;li&gt;Receive an interrupt from the disk I/O subsystem (I/O completed)&lt;/li&gt;
        &lt;li&gt;Save the registers and process state for the other user&lt;/li&gt;
        &lt;li&gt;Determine that the interrupt was from the disk&lt;/li&gt;
        &lt;li&gt;Correct the page table and other tables to show page is now in memory&lt;/li&gt;
        &lt;li&gt;Wait for the CPU to be allocated to this process again&lt;/li&gt;
        &lt;li&gt;Restore the user registers, process state, and new page table, and then resume the interrupted instruction&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/HA817pb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;copy-on-write&quot;&gt;(五) Copy-on-Write&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Copy-on-Write&lt;/strong&gt; (COW) allows both parent and child processes to initially share the same pages in memory
    &lt;ul&gt;
      &lt;li&gt;If either process modifies a shared page, only then is the page copied&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;COW allows more efficient process creation as only modified pages are copied&lt;/li&gt;
  &lt;li&gt;In general, free pages are allocated from a &lt;strong&gt;pool&lt;/strong&gt; of &lt;strong&gt;zero-fill-on-demand&lt;/strong&gt; pages
    &lt;ul&gt;
      &lt;li&gt;Why zero-out a page before allocating it?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vfork()&lt;/code&gt; variation on &lt;code class=&quot;highlighter-rouge&quot;&gt;fork()&lt;/code&gt; system call has parent suspend and child using copy-on-write address space of parent
    &lt;ul&gt;
      &lt;li&gt;Designed to have child call &lt;code class=&quot;highlighter-rouge&quot;&gt;exec()&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Very efficient&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/LABMPPo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;page-replacement&quot;&gt;(六) Page Replacement&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Prevent over-allocation of memory by modifying page-fault service routine to include page replacement&lt;/li&gt;
  &lt;li&gt;Use &lt;strong&gt;modify (dirty) bit&lt;/strong&gt; to reduce overhead of page transfers – only modified pages are written to disk&lt;/li&gt;
  &lt;li&gt;Page replacement completes separation between logical memory and physical memory – large virtual memory can be provided on a smaller physical memory&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;what-happens-if-there-is-no-free-frame&quot;&gt;1. What Happens if There is no Free Frame?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Used up by process pages&lt;/li&gt;
  &lt;li&gt;Also in demand from the kernel, I/O buffers, etc&lt;/li&gt;
  &lt;li&gt;How much to allocate to each?&lt;/li&gt;
  &lt;li&gt;Page replacement – find some page in memory, but not really in use, page it out
    &lt;ul&gt;
      &lt;li&gt;Algorithm – terminate? swap out? replace the page?&lt;/li&gt;
      &lt;li&gt;Performance – want an algorithm which will result in minimum number of page faults&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Same page may be brought into memory several times&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/eFpQyPv.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;basic-page-replacement&quot;&gt;2. Basic Page Replacement&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Find the location of the desired page on disk&lt;/li&gt;
    &lt;li&gt;Find a free frame:
      &lt;blockquote&gt;
        &lt;p&gt;a. If there is a free frame, use it
b. If there is no free frame, use a page replacement algorithm to select a &lt;strong&gt;victim frame&lt;/strong&gt;
c. Write victim frame to disk if dirty&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/li&gt;
    &lt;li&gt;Bring the desired page into the (newly) free frame; update the page and frame tables&lt;/li&gt;
    &lt;li&gt;Continue the process by restarting the instruction that caused the trap
      &lt;ul&gt;
        &lt;li&gt;Note now potentially 2 page transfers for page fault – increasing EAT&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Hm6MvuN.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;page-and-frame-replacement-algorithms&quot;&gt;3. Page and Frame Replacement Algorithms&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Frame-allocation algorithm&lt;/strong&gt; determines
    &lt;ul&gt;
      &lt;li&gt;How many frames to give each process&lt;/li&gt;
      &lt;li&gt;Which frames to replace&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Page-replacement algorithm&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Want lowest page-fault rate on both first access and re-access&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Evaluate algorithm by running it on a particular string of memory references (reference string) and computing the number of page faults on that string
    &lt;ul&gt;
      &lt;li&gt;String is just page numbers, not full addresses&lt;/li&gt;
      &lt;li&gt;Repeated access to the same page does not cause a page fault&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;first-in-first-out-fifo-algorithm&quot;&gt;(1) First-In-First-Out (FIFO) Algorithm&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/cSezcCO.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://i.imgur.com/NVa4BTe.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://i.imgur.com/6VeXbGw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;optimal-algorithm&quot;&gt;(2) Optimal Algorithm&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Replace page that will not be used for longest period of time
    &lt;ul&gt;
      &lt;li&gt;9 is optimal for the example on the next slide&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How do you know this?
    &lt;ul&gt;
      &lt;li&gt;Can’t read the future&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Used for measuring how well your algorithm performs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/1jc2ngr.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;least-recently-used-lru-algorithm&quot;&gt;(3) Least Recently Used (LRU) Algorithm&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Use past knowledge rather than future&lt;/li&gt;
  &lt;li&gt;Replace page that has not been used in the most amount of time&lt;/li&gt;
  &lt;li&gt;Associate time of last use with each page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/RiLxhrF.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Counter implementation
    &lt;ul&gt;
      &lt;li&gt;Every page entry has a counter; every time page is referenced through this entry, copy the clock into the counter&lt;/li&gt;
      &lt;li&gt;When a page needs to be changed, look at the counters to find smallest value
        &lt;ul&gt;
          &lt;li&gt;Search through table needed&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Stack implementation
    &lt;ul&gt;
      &lt;li&gt;Keep a stack of page numbers in a double link form:&lt;/li&gt;
      &lt;li&gt;Page referenced:
        &lt;ul&gt;
          &lt;li&gt;move it to the top&lt;/li&gt;
          &lt;li&gt;requires 6 pointers to be changed&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;But each update more expensive&lt;/li&gt;
      &lt;li&gt;No search for replacement&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;LRU and OPT are cases of &lt;strong&gt;stack algorithms&lt;/strong&gt; that don’t have Belady’s Anomaly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/yvsGPvm.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;lru-approximation-algorithms&quot;&gt;(4) LRU Approximation Algorithms&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;LRU needs special hardware and still slow&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reference bit&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;With each page associate a bit, initially = 0&lt;/li&gt;
      &lt;li&gt;When page is referenced bit set to 1&lt;/li&gt;
      &lt;li&gt;Replace any with reference bit = 0 (if one exists)
        &lt;ul&gt;
          &lt;li&gt;We do not know the order, however&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Second-chance algorithm&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Generally FIFO, plus hardware-provided reference bit&lt;/li&gt;
      &lt;li&gt;Clock replacement&lt;/li&gt;
      &lt;li&gt;If page to be replaced has
        &lt;ul&gt;
          &lt;li&gt;Reference bit = 0 -&amp;gt; replace it&lt;/li&gt;
          &lt;li&gt;reference bit = 1 then:
            &lt;ul&gt;
              &lt;li&gt;set reference bit 0, leave page in memory&lt;/li&gt;
              &lt;li&gt;replace next page, subject to same rules&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/jInNXqt.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;counting-algorithms&quot;&gt;(5) Counting Algorithms&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Keep a counter of the number of references that have been made to each page
    &lt;ul&gt;
      &lt;li&gt;Not common&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;LFU Algorithm&lt;/strong&gt;: replaces page with smallest count&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MFU Algorithm&lt;/strong&gt;: based on the argument that the page with the smallest count was probably just brought in and has yet to be used&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;page-buffering-algorithms&quot;&gt;(6) Page-Buffering Algorithms&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Keep a pool of free frames, always
    &lt;ul&gt;
      &lt;li&gt;Then frame available when needed, not found at fault time&lt;/li&gt;
      &lt;li&gt;Read page into free frame and select victim to evict and add to free pool&lt;/li&gt;
      &lt;li&gt;When convenient, evict victim&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Possibly, keep list of modified pages
    &lt;ul&gt;
      &lt;li&gt;When backing store otherwise idle, write pages there and set to non-dirty&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Possibly, keep free frame contents intact and note what is in them
    &lt;ul&gt;
      &lt;li&gt;If referenced again before reused, no need to load contents again from disk&lt;/li&gt;
      &lt;li&gt;Generally useful to reduce penalty if wrong victim frame selected&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 08 Jun 2017 08:00:00 +0800</pubDate>
        <link>http://shouzo.github.io/2017/06/08/linux_system/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/06/08/linux_system/</guid>
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
      </item>
    
      <item>
        <title>20170607 [有感而發] 一切都只是選擇，那你自己的戰場是什麼？</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;一、前言&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;二、想像與實際的落差&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;1.如何去定義「學業」？&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;(一) 你就是不自覺地被吸引&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;2.對於大學的「期望」？&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-5&quot; id=&quot;markdown-toc-section-5&quot;&gt;三、理念，未必能夠被理解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;一、前言&lt;/h2&gt;
&lt;p&gt;先前在 Dcard 看到這篇文章，在內容中作者表達了對於“活動”的看法：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://goo.gl/xormkV&quot;&gt;各種活動&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在看完的當下沒有特別的感覺。但隨著時間過去，那篇文章像顆石頭投入湖中一樣，在腦海中蕩起了漣漪…於是便起了個念頭，將心裡的想法做個整理。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;二、想像與實際的落差&lt;/h2&gt;
&lt;p&gt;在台灣的教育制度裡面，普通學生從國小、國中、高中一路唸上來，終於到了大學的階段；當年的我也是一樣照著這既定的劇本走了上來，並沒有多餘的想法。我只想著︰「我想要讀資工，該怎麼樣才能考上第一志願？」之後到了高雄唸書，當年的我仍滿心期待地想要在系上「學好學滿」，也打算投注精力在課業上，到最後才發現期待落空…&lt;/p&gt;

&lt;p&gt;(詳細的過程請看：&lt;a href=&quot;https://goo.gl/CsTBCv&quot;&gt;https://goo.gl/CsTBCv&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;就整體而言 &lt;a href=&quot;https://goo.gl/xormkV&quot;&gt;各種活動&lt;/a&gt; 這篇文章沒什麼問題。雖然沒有明講，但是不難看出作者暗中導入了 &lt;strong&gt;「學業為主，其他的為輔」&lt;/strong&gt; 這個思考框架。在此我不會探討這篇文章裡的其他觀點，僅就這個思考框架進行討論。 &lt;strong&gt;用這個框架去思考事情沒有什麼問題，但是這適用於所有人嗎？&lt;/strong&gt; 我認為得先釐清兩件事情：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;何謂「學業」？&lt;/li&gt;
  &lt;li&gt;你對大學的「期望」是什麼？&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;1.如何去定義「學業」？&lt;/h3&gt;

&lt;p&gt;「正常作息」、「該上的課，該做的事」、「本末倒置」…這些想法其實都是建立在 &lt;strong&gt;當事人既定的價值觀&lt;/strong&gt; 之上來探討的；但其實每個人在大學期間想要學習、嘗試的都不一樣。&lt;/p&gt;

&lt;p&gt;一味用自己的價值觀來衡量別人的「作息是否正常」(有人一天只睡4小時就飽了)、「該做的事情」、「行為是否本末倒置」…，未免過於狹隘。&lt;/p&gt;

&lt;p&gt;學業是什麼？它僅止於所謂書本上的知識嗎？它可以被量化嗎？&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;狹義的學習，指的即是學生的學習。在各類學校環境中，在教師的指導下，有目的、有計劃、有組織地進行的，是在較短的時間內系統地接受前人積累的文化經驗，以發展個人的知識技能，形成符合社會期望的道德品質的過程。
《原文網址》https://read01.com/xQ26k5.html&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我的看法是：「任何你應該知道的、想學習的，其實都是 &lt;strong&gt;學業&lt;/strong&gt; 的一部分。」至於內容是什麼，這因人而異。但是我相信很多人並不知道自己要的是什麼，因為根本就沒有人引導你思考這個問題。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「沒思考過又怎麼樣呢？」&lt;/strong&gt; 不怎麼樣，但是帶給周遭人的感覺就是不一樣。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;(一) 你就是不自覺地被吸引&lt;/h3&gt;
&lt;p&gt;回顧一下日常生活，你的目光總是會不自覺地被某些人吸引。「因為他的穿著，很難不讓人注意到他。」、「我之前就久仰他的大名了，想要前來一睹風采。」、「為什麼他的談吐那麼有趣？」、「從他的肢體動作可以感覺到，他很有自信。」…那群人總是有辦法在任何時候成為眾人目光的焦點。 &lt;strong&gt;但這究竟是為什麼？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(二) 源自於內心的動機，體現於實際的行為上&lt;/strong&gt;
「我就是想要嘗試一下以前從未試過的事情。」、「不知道為什麼，但是我想像他一樣。」、「自從認識他們之後，我也想要改變自己，但是該怎麼做？」於是你開始參與校外活動、在社團擔任幹部…，期望的是一個蛻變的契機。而在過程中你得到了心目中所期望的東西，與過去的自己相比變得判若兩人。這樣的過程不也是學業的一環嗎？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(三) 何來兼顧？&lt;/strong&gt;
相信各位都耳熟能詳的一段話：「大學時期的三大學分 &lt;strong&gt;“課業、社團、愛情”&lt;/strong&gt; 。」這三門學分，你修得如何？
「課業才是學生的本分，想要參與社團或是校外活動不是不行；若你無法兼顧課業，還是得回歸“本分”。」(哦，是這樣嗎？)&lt;/p&gt;

&lt;p&gt;事實上學生的本分不該只框限在課業上面，也根本就沒有所謂“兼顧”這一回事。但是為什麼課業以外的東西卻總是被矮化為 “本分之餘” 才要去完成的東西？&lt;/p&gt;

&lt;p&gt;我推測這是源自於過去「萬般皆下品，唯有讀書高」的價值觀在社會裡根深蒂固所致。(獲取知識的重要性毋庸置疑，但你知道為何而讀嗎？難道只有從系上課業才能獲取知識嗎？)&lt;/p&gt;

&lt;p&gt;有一部發人省思的影片可以作為參考 (這沒有標準答案)：&lt;a href=&quot;https://www.youtube.com/watch?v=a0G2gl7X1pA&quot;&gt;https://www.youtube.com/watch?v=a0G2gl7X1pA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;「任何你應該知道的、想學習的，其實都是 &lt;strong&gt;學業&lt;/strong&gt; 的一部分。」沒有在學生時期領悟這些道理，最後就只能等到出社會後才能去學習 (並非不行，只是學習的成本將會隨著你出社會的那一刻起日益增加)；你決定投注精力在哪一方面，成果就會呈現在那個方向的道路上 (想要投注多少、在哪些面向上下功夫都沒有對錯)。&lt;/p&gt;

&lt;p&gt;出自於自己的決定，結果終究得由自己承擔。&lt;/p&gt;

&lt;p&gt;在大學以前的歲月，大多數人都在家人的編織的保護傘下成長。接下來我們得離開這把傘，在傘外的世界追尋方向的同時，也得學會面對自己。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;一切都只是選擇，也是時候該為自己的選擇負起責任了。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;2.對於大學的「期望」？&lt;/h3&gt;

&lt;p&gt;當你在踏入大學階段時期才發現「現實的環境無法滿足你原先的期望」，此時你會怎麼做？
&lt;strong&gt;(1) 轉換環境&lt;/strong&gt;：轉系、休(退)學、轉學，亦可以直接去工作。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(2) 維持現況&lt;/strong&gt;：就這樣漫無目的等到畢業，去拿 A4 收據。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(3) 改變環境&lt;/strong&gt;：把環境變得符合自己的「期望」。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(4) 調整戰場&lt;/strong&gt;：在既有條件之下調整學習目標，把學校的資源挖得一乾二淨、同時去另尋資源滿足「期望」。&lt;/p&gt;

&lt;p&gt;要如何做出上述的選擇？其實這得視由自己在當下的期望和條件來決定。以我的狀況來說，(1)、(3)要付出的成本太大，(2)亦不符合我的人格特質。&lt;/p&gt;

&lt;p&gt;於是我選擇(4)。&lt;/p&gt;

&lt;p&gt;除了從大一時期就開始的社團生活之外，我在大二開始逐漸發現學校體制並不符合我的期望、大三已對在學校體制內學習這件事情不抱持希望。&lt;strong&gt;扣除社團和基本的“食衣住行育樂”，基本上我都在 “自學”。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我曾經被問過：&lt;strong&gt;「既然環境不符合你當下的目標，怎麼不直接轉系？」&lt;/strong&gt; 原因其實很簡單。&lt;/p&gt;

&lt;p&gt;《第一》校內轉系的難度和門檻太高，而當下的我成績達不到轉系的門檻。&lt;/p&gt;

&lt;p&gt;《第二》目前所在的科系 &lt;strong&gt;“並非完全”&lt;/strong&gt; 和我的目標脫節，只不過我們身在其中的環境體制 &lt;strong&gt;極度不友善&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;何謂不友善？除了體制缺乏彈性，另一部份就是師資的問題。&lt;/p&gt;

&lt;p&gt;扣除掉教學認真的老師之外，我真的不知道某些老師在上課時到底在講三小；其實不知道老師上課時在講什麼也就算了，甚至可能還會遇到一些根本沒有為人師表自覺，只是用 “教授” 這個職銜藉由來欺壓學生來滿足自己虛榮的人。&lt;/p&gt;

&lt;p&gt;於是我便 “選擇性” 的放掉沒興趣的科目，將那些時間轉去鑽研自己真正有興趣的領域。或許在未來那些被我 “放掉” 的科目還是會在人生的某個階段遇到，但是求學的路這麼長 (不僅在於學校)，先從有興趣的開始學習，總比從沒有興趣的開始要容易的多吧？&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;三、理念，未必能夠被理解&lt;/h2&gt;

&lt;p&gt;之所以會有這麼多人(包括我自己)願意在大學時期投注心力在“課業”以外的事情，是因為他們從中獲得了某些東西，進而對他們產生了正面的影響。&lt;/p&gt;

&lt;p&gt;這篇文章的觀點很有意思。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.facebook.com/makarove.iluete/posts/1503318633074386&quot;&gt;誰給的出尊嚴，誰就能留住人&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;他們未必要求什麼回報，心中所想的也未必能被他人所理解。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;這些人不一定是因為在課業上無法獲得成就才轉換戰場；相反的，他們的表現比起普通學生都還要來的活躍亮眼。我想這也就是為什麼人們會不自覺被他們所吸引的原因吧。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;希望各位從中受益的人們，能夠願意給予這些不吝投注課外活動、為這個環境帶來正向改變的社團人，一個鼓勵和掌聲。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;正是因為這些人的存在，讓這個枯燥無趣世界擁有了更多的可能性。&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Jun 2017 08:00:00 +0800</pubDate>
        <link>http://shouzo.github.io/2017/06/07/university_choice/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/06/07/university_choice/</guid>
        
        <category>心情記事</category>
        
        
        <category>未分類</category>
        
      </item>
    
      <item>
        <title>20170601 [學習筆記] Linux 系統程式 (13)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;一、作業系統&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#paging&quot; id=&quot;markdown-toc-paging&quot;&gt;(一) Paging&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#address-translation-scheme&quot; id=&quot;markdown-toc-address-translation-scheme&quot;&gt;(二) Address Translation Scheme&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#implementation-of-page-table&quot; id=&quot;markdown-toc-implementation-of-page-table&quot;&gt;(三) Implementation of Page Table&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#effective-access-time&quot; id=&quot;markdown-toc-effective-access-time&quot;&gt;(四) Effective Access Time&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#memory-protection&quot; id=&quot;markdown-toc-memory-protection&quot;&gt;(五) Memory Protection&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#shared-pages&quot; id=&quot;markdown-toc-shared-pages&quot;&gt;(六) Shared Pages&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#structure-of-the-page-table&quot; id=&quot;markdown-toc-structure-of-the-page-table&quot;&gt;(七) Structure of the Page Table&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#hierarchical-page-tables&quot; id=&quot;markdown-toc-hierarchical-page-tables&quot;&gt;Hierarchical Page Tables&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#two-level-page-table-scheme&quot; id=&quot;markdown-toc-two-level-page-table-scheme&quot;&gt;Two-Level Page-Table Scheme&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#three-level-paging-scheme&quot; id=&quot;markdown-toc-three-level-paging-scheme&quot;&gt;Three-level Paging Scheme&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#hashed-page-tables&quot; id=&quot;markdown-toc-hashed-page-tables&quot;&gt;Hashed Page Tables&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#inverted-page-table&quot; id=&quot;markdown-toc-inverted-page-table&quot;&gt;Inverted Page Table&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;一、作業系統&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;課堂講義
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170601/ch08.pdf&quot;&gt;Chapter 8: Memory-Management Strategies&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;paging&quot;&gt;(一) Paging&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Physical address space of a process can be noncontiguous; process is allocated physical memory whenever the latter is available
    &lt;ul&gt;
      &lt;li&gt;Avoids external fragmentation&lt;/li&gt;
      &lt;li&gt;Avoids problem of varying sized memory chunks&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Divide physical memory into fixed-sized blocks called &lt;strong&gt;frames&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Size is power of 2, between 512 bytes and 16 Mbytes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Divide logical memory into blocks of same size called &lt;strong&gt;pages&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Keep track of all free frames&lt;/li&gt;
  &lt;li&gt;To run a program of size &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; pages, need to find &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; free frames and load program&lt;/li&gt;
  &lt;li&gt;Set up a page table to translate logical to physical addresses&lt;/li&gt;
  &lt;li&gt;Backing store likewise split into pages&lt;/li&gt;
  &lt;li&gt;Still have Internal fragmentation&lt;/li&gt;
  &lt;li&gt;Calculating internal fragmentation
    &lt;ul&gt;
      &lt;li&gt;Page size = 2,048 bytes&lt;/li&gt;
      &lt;li&gt;Process size = 72,766 bytes&lt;/li&gt;
      &lt;li&gt;35 pages + 1,086 bytes&lt;/li&gt;
      &lt;li&gt;Internal fragmentation of 2,048 - 1,086 = 962 bytes&lt;/li&gt;
      &lt;li&gt;On average fragmentation = 1 / 2 frame size&lt;/li&gt;
      &lt;li&gt;So small frame sizes desirable?&lt;/li&gt;
      &lt;li&gt;But each page table entry takes memory to track&lt;/li&gt;
      &lt;li&gt;Page sizes growing over time
        &lt;ul&gt;
          &lt;li&gt;Solaris supports two page sizes – 8 KB and 4 MB&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Process view and physical memory now very different&lt;/li&gt;
  &lt;li&gt;By implementation process can only access its own memory&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;address-translation-scheme&quot;&gt;(二) Address Translation Scheme&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/rbuMKKY.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Address generated by CPU is divided into
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Page number &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt;&lt;/strong&gt; – used as an index into a &lt;strong&gt;page table&lt;/strong&gt; which contains base address of each page in physical memory&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Page offset &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt;&lt;/strong&gt; – combined with base address to define the physical memory address that is sent to the memory unit&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/hY3zgAC.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://i.imgur.com/ASgBcxX.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://i.imgur.com/tLepGb4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;implementation-of-page-table&quot;&gt;(三) Implementation of Page Table&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Page table is kept in main memory&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Page-table base register (PTBR)&lt;/strong&gt; points to the page table&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Page-table length register (PTLR)&lt;/strong&gt; indicates size of the page table&lt;/li&gt;
  &lt;li&gt;In this scheme every data/instruction access requires two memory accesses
    &lt;ul&gt;
      &lt;li&gt;One for the page table and one for the data / instruction&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The two memory access problem can be solved by the use of a special fast-lookup hardware cache called &lt;strong&gt;associative memory&lt;/strong&gt; or &lt;strong&gt;translation look-aside buffers (TLBs)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Some TLBs store &lt;strong&gt;address-space identifiers (ASIDs)&lt;/strong&gt; in each TLB entry – uniquely identifies each process to provide address-space protection for that process
    &lt;ul&gt;
      &lt;li&gt;Otherwise need to flush at every context switch&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TLBs typically small (64 to 1,024 entries)&lt;/li&gt;
  &lt;li&gt;On a TLB miss, value is loaded into the TLB for faster access next time
    &lt;ul&gt;
      &lt;li&gt;Replacement policies must be considered&lt;/li&gt;
      &lt;li&gt;Some entries can be &lt;strong&gt;wired down&lt;/strong&gt; for permanent fast access&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/aH3Zg2J.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://i.imgur.com/923AOvB.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;effective-access-time&quot;&gt;(四) Effective Access Time&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Y0mMzTR.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;memory-protection&quot;&gt;(五) Memory Protection&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Memory protection implemented by associating protection bit with each frame to indicate if read-only or read-write access is allowed
    &lt;ul&gt;
      &lt;li&gt;Can also add more bits to indicate page execute-only, and so on&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Valid-invalid&lt;/strong&gt; bit attached to each entry in the page table
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;valid&lt;/code&gt; indicates that the associated page is in the process’ logical address space, and is thus a legal page&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;invalid&lt;/code&gt; indicates that the page is not in the process’ logical address space&lt;/li&gt;
      &lt;li&gt;Or use &lt;strong&gt;page-table length register (PTLR)&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Any violations result in a trap to the kernel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/3UtvoGB.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;shared-pages&quot;&gt;(六) Shared Pages&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Shared code&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;One copy of read-only (&lt;strong&gt;reentrant&lt;/strong&gt;) code shared among processes (i.e., text editors, compilers, window systems)&lt;/li&gt;
      &lt;li&gt;Similar to multiple threads sharing the same process space&lt;/li&gt;
      &lt;li&gt;Also useful for interprocess communication if sharing of read-write pages is allowed&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Private code and data&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Each process keeps a separate copy of the code and data&lt;/li&gt;
      &lt;li&gt;The pages for the private code and data can appear anywhere in the logical address space&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/JYNkQQT.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;structure-of-the-page-table&quot;&gt;(七) Structure of the Page Table&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Memory structures for paging can get huge using straight-forward methods
    &lt;ul&gt;
      &lt;li&gt;Consider a 32-bit logical address space as on modern computers&lt;/li&gt;
      &lt;li&gt;Page size of 4 KB (2^12^)&lt;/li&gt;
      &lt;li&gt;Page table would have 1 million entries (2^32^ / 2^12^)&lt;/li&gt;
      &lt;li&gt;If each entry is 4 bytes -&amp;gt; 4 MB of physical address space / memory for page table alone lot
        &lt;ul&gt;
          &lt;li&gt;Don’t want to allocate that contiguously in main memory&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Hierarchical Paging&lt;/li&gt;
  &lt;li&gt;Hashed Page Tables&lt;/li&gt;
  &lt;li&gt;Inverted Page Tables&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;hierarchical-page-tables&quot;&gt;Hierarchical Page Tables&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Break up the logical address space into multiple page tables&lt;/li&gt;
  &lt;li&gt;A simple technique is a two-level page table&lt;/li&gt;
  &lt;li&gt;We then page the page table&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;two-level-page-table-scheme&quot;&gt;Two-Level Page-Table Scheme&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/EXa669R.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Example&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;A logical address (on 32-bit machine with 1K page size) is divided into
        &lt;ul&gt;
          &lt;li&gt;a page number consisting of 22 bits&lt;/li&gt;
          &lt;li&gt;a page offset consisting of 10 bits&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Since the page table is paged, the page number is further divided into
        &lt;ul&gt;
          &lt;li&gt;a 12-bit page number&lt;/li&gt;
          &lt;li&gt;a 10-bit page offset&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Thus, a logical address is as follows
&lt;img src=&quot;http://i.imgur.com/uwG3NvI.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;where p 1 is an index into the outer page table, and p 2 is the displacement within the page of the inner page table&lt;/li&gt;
      &lt;li&gt;Known as &lt;strong&gt;forward-mapped page table&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;three-level-paging-scheme&quot;&gt;Three-level Paging Scheme&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/LYA2JD3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;hashed-page-tables&quot;&gt;Hashed Page Tables&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/itaf25z.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Common in address spaces &amp;gt; 32 bits&lt;/li&gt;
  &lt;li&gt;The virtual page number is hashed into a page table
    &lt;ul&gt;
      &lt;li&gt;This page table contains a chain of elements hashing to the same location&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Each element contains (1) the virtual page number (2) the value of the mapped page frame (3) a pointer to the next element&lt;/li&gt;
  &lt;li&gt;Virtual page numbers are compared in this chain searching for a match
    &lt;ul&gt;
      &lt;li&gt;If a match is found, the corresponding physical frame is extracted&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Variation for 64-bit addresses is &lt;strong&gt;clustered page tables&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Similar to hashed but each entry refers to several pages (such as 16) rather than 1&lt;/li&gt;
      &lt;li&gt;Especially useful for &lt;strong&gt;sparse&lt;/strong&gt; address spaces (where memory references are non-contiguous and scattered)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;inverted-page-table&quot;&gt;Inverted Page Table&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Rather than each process having a page table and keeping track of all possible logical pages, track all physical pages&lt;/li&gt;
  &lt;li&gt;One entry for each real page of memory&lt;/li&gt;
  &lt;li&gt;Entry consists of the virtual address of the page stored in that real memory location, with information about the process that owns that page&lt;/li&gt;
  &lt;li&gt;Decreases memory needed to store each page table, but increases time needed to search the table when a page reference occurs&lt;/li&gt;
  &lt;li&gt;Use hash table to limit the search to one — or at most a few — page-table entries
    &lt;ul&gt;
      &lt;li&gt;TLB can accelerate access&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;But how to implement shared memory?
    &lt;ul&gt;
      &lt;li&gt;One mapping of a virtual address to the shared physical address&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 01 Jun 2017 08:00:00 +0800</pubDate>
        <link>http://shouzo.github.io/2017/06/01/linux_system/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/06/01/linux_system/</guid>
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
      </item>
    
      <item>
        <title>20170525 [學習筆記] Linux 系統程式 (12)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;一、作業系統&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#contiguous-allocation&quot; id=&quot;markdown-toc-contiguous-allocation&quot;&gt;(一) Contiguous Allocation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#dynamic-storage-allocation-problem&quot; id=&quot;markdown-toc-dynamic-storage-allocation-problem&quot;&gt;(二) Dynamic Storage-Allocation Problem&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#fragmentation&quot; id=&quot;markdown-toc-fragmentation&quot;&gt;(三) Fragmentation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#segmentation&quot; id=&quot;markdown-toc-segmentation&quot;&gt;(四) Segmentation&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#segmentation-architecture&quot; id=&quot;markdown-toc-segmentation-architecture&quot;&gt;Segmentation Architecture&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;一、作業系統&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;課堂講義
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170525/ch08.pdf&quot;&gt;Chapter 8: Memory-Management Strategies&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;contiguous-allocation&quot;&gt;(一) Contiguous Allocation&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Main memory must support both OS and user processes&lt;/li&gt;
  &lt;li&gt;Limited resource, must allocate efficiently&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Contiguous allocation is one early method&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Main memory usually into two &lt;strong&gt;partitions&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Resident operating system, usually held in low memory with interrupt vector&lt;/li&gt;
      &lt;li&gt;User processes then held in high memory&lt;/li&gt;
      &lt;li&gt;Each process contained in single contiguous section of memory&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Relocation registers used to protect user processes from each other, and from changing operating-system code and data
    &lt;ul&gt;
      &lt;li&gt;Base register contains value of smallest physical address&lt;/li&gt;
      &lt;li&gt;Limit register contains range of logical addresses – each logical address must be less than the limit register&lt;/li&gt;
      &lt;li&gt;MMU maps logical address dynamically&lt;/li&gt;
      &lt;li&gt;Can then allow actions such as kernel code being &lt;code class=&quot;highlighter-rouge&quot;&gt;transient&lt;/code&gt; and kernel changing size&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/z3R2FCC.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Multiple-partition allocation
    &lt;ul&gt;
      &lt;li&gt;Degree of multiprogramming limited by number of partitions&lt;/li&gt;
      &lt;li&gt;Variable-partition sizes for efficiency (sized to a given process’ needs)&lt;/li&gt;
      &lt;li&gt;Hole – block of available memory; holes of various size are scattered throughout memory&lt;/li&gt;
      &lt;li&gt;When a process arrives, it is allocated memory from a hole large enough to accommodate it&lt;/li&gt;
      &lt;li&gt;Process exiting frees its partition, adjacent free partitions combined&lt;/li&gt;
      &lt;li&gt;Operating system maintains information about
        &lt;ul&gt;
          &lt;li&gt;(a) allocated partitions&lt;/li&gt;
          &lt;li&gt;(b) free partitions (hole)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/JQ1uTUe.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dynamic-storage-allocation-problem&quot;&gt;(二) Dynamic Storage-Allocation Problem&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;First-fit&lt;/strong&gt;：Allocate the &lt;code class=&quot;highlighter-rouge&quot;&gt;first&lt;/code&gt; hole that is big enough&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Best-fit&lt;/strong&gt;：Allocate the &lt;code class=&quot;highlighter-rouge&quot;&gt;smallest&lt;/code&gt; hole that is big enough; must search entire list, unless ordered by size
    &lt;ul&gt;
      &lt;li&gt;Produces the smallest leftover hole&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Worst-fit&lt;/strong&gt;：Allocate the &lt;code class=&quot;highlighter-rouge&quot;&gt;largest&lt;/code&gt; hole; must also search entire list
    &lt;ul&gt;
      &lt;li&gt;Produces the largest leftover hole&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;First-fit and best-fit better than worst-fit in terms of speed and storage utilization&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;fragmentation&quot;&gt;(三) Fragmentation&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;External Fragmentation&lt;/strong&gt; – total memory space exists to satisfy a request, but it is not contiguous&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Internal Fragmentation&lt;/strong&gt; – allocated memory may be slightly larger than requested memory; this size difference is memory internal to a partition, but not being used&lt;/li&gt;
  &lt;li&gt;First fit analysis reveals that given N blocks allocated, 0.5 N blocks lost to fragmentation
    &lt;ul&gt;
      &lt;li&gt;1/3 may be unusable -&amp;gt; &lt;strong&gt;50-percent rule&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reduce external fragmentation by &lt;strong&gt;compaction&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Shuffle memory contents to place all free memory together in one large block&lt;/li&gt;
      &lt;li&gt;Compaction is possible only if relocation is dynamic, and is done at execution time&lt;/li&gt;
      &lt;li&gt;I/O problem
        &lt;ul&gt;
          &lt;li&gt;Latch job in memory while it is involved in I/O&lt;/li&gt;
          &lt;li&gt;Do I/O only into OS buffers&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Now consider that backing store has same fragmentation problems&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;segmentation&quot;&gt;(四) Segmentation&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Memory-management scheme that supports user view of memory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/hiMN3YJ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A program is a collection of segments
    &lt;ul&gt;
      &lt;li&gt;A segment is a logical unit such as：&lt;code class=&quot;highlighter-rouge&quot;&gt;main program&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;procedure&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;method&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;local variables&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;global variables&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;common block&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;stack&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;symbol table&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;arrays&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/PKuwv70.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;segmentation-architecture&quot;&gt;Segmentation Architecture&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Logical address consists of a two tuple：&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;segment-number, offset&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Segment table&lt;/strong&gt; – maps two-dimensional physical addresses; each table entry has
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;base&lt;/strong&gt; – contains the starting physical address where the segments reside in memory&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;limit&lt;/strong&gt; – specifies the length of the segment&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Segment-table base register (STBR)&lt;/strong&gt; points to the segment table’s location in memory&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Segment-table length register (STLR)&lt;/strong&gt; indicates number of segments used by a program：&lt;code class=&quot;highlighter-rouge&quot;&gt;segment number s is legal if s &amp;lt; STLR&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Protection
    &lt;ul&gt;
      &lt;li&gt;With each entry in segment table associate
        &lt;ul&gt;
          &lt;li&gt;validation bit = 0 » illegal segment&lt;/li&gt;
          &lt;li&gt;read/write/execute privileges&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Protection bits associated with segments; code sharing occurs at segment level&lt;/li&gt;
  &lt;li&gt;Since segments vary in length, memory allocation is a dynamic storage-allocation problem&lt;/li&gt;
  &lt;li&gt;A segmentation example is shown in the following diagram&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/raq8eDi.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 25 May 2017 08:00:00 +0800</pubDate>
        <link>http://shouzo.github.io/2017/05/25/linux_system/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/05/25/linux_system/</guid>
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
      </item>
    
  </channel>
</rss>
