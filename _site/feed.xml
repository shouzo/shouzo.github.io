<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>少左 shouzo</title>
    <description></description>
    <link>http://shouzo.github.io/</link>
    <atom:link href="http://shouzo.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 17 Mar 2017 12:52:15 +0800</pubDate>
    <lastBuildDate>Fri, 17 Mar 2017 12:52:15 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>20170317 [學習筆記] Linux 系統程式 (3)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;一、作業系統&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#basic-concepts&quot; id=&quot;markdown-toc-basic-concepts&quot;&gt;一、Basic Concepts&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#cpu-scheduler&quot; id=&quot;markdown-toc-cpu-scheduler&quot;&gt;二、CPU Scheduler&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#dispatcher&quot; id=&quot;markdown-toc-dispatcher&quot;&gt;三、Dispatcher&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#scheduling-algorithm-optimization-criteria&quot; id=&quot;markdown-toc-scheduling-algorithm-optimization-criteria&quot;&gt;四、Scheduling Algorithm Optimization Criteria&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#scheduling-algorithm&quot; id=&quot;markdown-toc-scheduling-algorithm&quot;&gt;五、Scheduling Algorithm&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#shortest-job-first-sjf&quot; id=&quot;markdown-toc-shortest-job-first-sjf&quot;&gt;(二) Shortest-Job-First (SJF)：最短優先法&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#priority-scheduling-ps&quot; id=&quot;markdown-toc-priority-scheduling-ps&quot;&gt;(三) Priority Scheduling (PS)：優先權排班法&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#round-robin-rr&quot; id=&quot;markdown-toc-round-robin-rr&quot;&gt;(四) Round Robin (RR)：輪流法&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#time-quantum-and-context-switch-time&quot; id=&quot;markdown-toc-time-quantum-and-context-switch-time&quot;&gt;1. Time Quantum and Context Switch Time&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#turnaround-time-varies-with-the-time-quantum&quot; id=&quot;markdown-toc-turnaround-time-varies-with-the-time-quantum&quot;&gt;2. Turnaround Time Varies With The Time Quantum&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#multilevel&quot; id=&quot;markdown-toc-multilevel&quot;&gt;(五) Multilevel&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#feedback-queue&quot; id=&quot;markdown-toc-feedback-queue&quot;&gt;2. Feedback Queue&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#linux-&quot; id=&quot;markdown-toc-linux-&quot;&gt;二、Linux 程式設計&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#what-is-a-thread&quot; id=&quot;markdown-toc-what-is-a-thread&quot;&gt;1. What is a Thread？&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#software-developer-view&quot; id=&quot;markdown-toc-software-developer-view&quot;&gt;(2) Software developer view&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#example&quot; id=&quot;markdown-toc-example&quot;&gt;[Example]&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#process-and-thread&quot; id=&quot;markdown-toc-process-and-thread&quot;&gt;2. Process and Thread&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#threads&quot; id=&quot;markdown-toc-threads&quot;&gt;(2) Threads&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#pthreads&quot; id=&quot;markdown-toc-pthreads&quot;&gt;3. Pthreads&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#the-pthreads-api&quot; id=&quot;markdown-toc-the-pthreads-api&quot;&gt;(1) The Pthreads API&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#thread-management&quot; id=&quot;markdown-toc-thread-management&quot;&gt;(2) Thread management&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;一、作業系統&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;課程簡報
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170316/ch05.pdf&quot;&gt;Chapter 5: Process Scheduling&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;參考資料
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.jollen.org/blog/2006/11/_scheduler_running_process.html&quot;&gt;Preemptive Process Scheduling 的觀念&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://moon.cse.yzu.edu.tw/~s981502/7/Chap4.pdf&quot;&gt;各種 CPU 排程演算法之探討&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://publish.get.com.tw/BookPre_pdf/51MG060707-2.PDF&quot;&gt;行程排程演算法&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.tutorialspoint.com/operating_system/os_process_scheduling_algorithms.htm&quot;&gt;Operating System Scheduling algorithms&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;basic-concepts&quot;&gt;一、Basic Concepts&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Maximum CPU utilization obtained with multiprogramming.&lt;/li&gt;
  &lt;li&gt;CPU–I/O Burst Cycle – Process execution consists of a cycle of CPU execution and I/O wait.&lt;/li&gt;
  &lt;li&gt;CPU burst followed by I/O burst.&lt;/li&gt;
  &lt;li&gt;CPU burst distribution is of main concern.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cpu-scheduler&quot;&gt;二、CPU Scheduler&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Short-term scheduler selects from among the processes in ready queue, and allocates the CPU to one of them.
    &lt;ul&gt;
      &lt;li&gt;Queue may be ordered in various ways.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;CPU scheduling decisions may take place when a process:
    &lt;ol&gt;
      &lt;li&gt;Switches from running to waiting state&lt;/li&gt;
      &lt;li&gt;Switches from running to ready state&lt;/li&gt;
      &lt;li&gt;Switches from waiting to ready&lt;/li&gt;
      &lt;li&gt;Terminates&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Scheduling under 1 and 4 is nonpreemptive.&lt;/li&gt;
  &lt;li&gt;All other scheduling is preemptive.
    &lt;ul&gt;
      &lt;li&gt;Consider access to shared data.&lt;/li&gt;
      &lt;li&gt;Consider preemption while in kernel mode.&lt;/li&gt;
      &lt;li&gt;Consider interrupts occurring during crucial OS activities.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dispatcher&quot;&gt;三、Dispatcher&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Dispatcher module gives control of the CPU to the process selected by the short-term scheduler; this involves：
    &lt;ol&gt;
      &lt;li&gt;switching context&lt;/li&gt;
      &lt;li&gt;switching to user mode&lt;/li&gt;
      &lt;li&gt;jumping to the proper location in the user program to restart that program&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Dispatch latency：time it takes for the dispatcher to stop one process and start another running.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scheduling-algorithm-optimization-criteria&quot;&gt;四、Scheduling Algorithm Optimization Criteria&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/LuBGjEu.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
1. CPU utilization – keep the CPU as busy as possible.&lt;br /&gt;
2. Throughput – # of processes that complete their execution per time unit.&lt;br /&gt;
3. Turnaround time – amount of time to execute a particular process.&lt;br /&gt;
4. Waiting time – amount of time a process has been waiting in the ready queue.&lt;br /&gt;
5. Response time – amount of time it takes from when a request was submitted until the first response is produced, not output (for time-sharing environment).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Length of Next CPU Burst
    &lt;ul&gt;
      &lt;li&gt;Determining&lt;br /&gt;
  &lt;img src=&quot;https://i.imgur.com/1GaCgCb.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;Prediction&lt;br /&gt;
  &lt;img src=&quot;https://i.imgur.com/HWSLIdj.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scheduling-algorithm&quot;&gt;五、Scheduling Algorithm&lt;/h3&gt;
&lt;p&gt;#### (一) First-Come, First-Served (FCFS)：先到先服務法&lt;br /&gt;
&lt;img src=&quot;https://i.imgur.com/xWKL0Z3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/6MIKb3Q.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Convoy effect：很多短時間的 process，都在等一個&lt;br /&gt;
長時間的 process 時，所產生的效應 (因為等待時間很長)。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;shortest-job-first-sjf&quot;&gt;(二) Shortest-Job-First (SJF)：最短優先法&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Associate with each process the length of its next CPU burst.
    &lt;ul&gt;
      &lt;li&gt;Use these lengths to schedule the process with the shortest time.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SJF is optimal – gives minimum average waiting time for a given set of processes.
    &lt;ul&gt;
      &lt;li&gt;The difficulty is knowing the length of the next CPU request.&lt;/li&gt;
      &lt;li&gt;Could ask the user.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Wf8bEgG.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;priority-scheduling-ps&quot;&gt;(三) Priority Scheduling (PS)：優先權排班法&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;A priority number (integer) is associated with each process.&lt;/li&gt;
  &lt;li&gt;The CPU is allocated to the process with the highest priority (smallest integer » highest priority).
    &lt;ul&gt;
      &lt;li&gt;Preemptive&lt;/li&gt;
      &lt;li&gt;Nonpreemptive&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SJF is priority scheduling where priority is the inverse of predicted next CPU burst time.&lt;/li&gt;
  &lt;li&gt;Problem：Starvation – low priority processes may never execute.&lt;/li&gt;
  &lt;li&gt;Solution：Aging – as time progresses increase the priority of the process.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/ZeyVmU1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;round-robin-rr&quot;&gt;(四) Round Robin (RR)：輪流法&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Each process gets a small unit of CPU time (time quantum q), usually 10-100 milliseconds. After this time has elapsed, the process is preempted and added to the end of the ready queue.&lt;/li&gt;
  &lt;li&gt;If there are n processes in the ready queue and the time quantum is q, then each process gets 1/n of the CPU time in chunks of at most q time units at once. No process waits more than (n-1)q time units.&lt;/li&gt;
  &lt;li&gt;Timer interrupts every quantum to schedule next process.&lt;/li&gt;
  &lt;li&gt;Performance.
    &lt;ul&gt;
      &lt;li&gt;q large » FIFO.&lt;/li&gt;
      &lt;li&gt;q small » q must be large with respect to context switch, otherwise overhead is too high.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/uu9W1cI.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;time-quantum-and-context-switch-time&quot;&gt;1. Time Quantum and Context Switch Time&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/7SMF7rd.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;turnaround-time-varies-with-the-time-quantum&quot;&gt;2. Turnaround Time Varies With The Time Quantum&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/EtNCekP.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;multilevel&quot;&gt;(五) Multilevel&lt;/h4&gt;
&lt;p&gt;##### 1. Queue&lt;br /&gt;
* Ready queue is partitioned into separate queues, eg:&lt;br /&gt;
	* foreground (interactive)&lt;br /&gt;
	* background (batch)&lt;br /&gt;
* Process permanently in a given queue.&lt;br /&gt;
Each queue has its own scheduling algorithm:&lt;br /&gt;
	* foreground – RR&lt;br /&gt;
	* background – FCFS&lt;br /&gt;
* Scheduling must be done between the queues:&lt;br /&gt;
	* Fixed priority scheduling; (i.e., serve all from foreground then from background). Possibility of starvation.&lt;br /&gt;
	* Time slice – each queue gets a certain amount of CPU time which it can schedule amongst its processes; i.e., 80% to foreground in RR.&lt;br /&gt;
	* 20% to background in FCFS.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/rW9GXTr.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;feedback-queue&quot;&gt;2. Feedback Queue&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;A process can move between the various queues; aging can be implemented this way.&lt;/li&gt;
  &lt;li&gt;Multilevel-feedback-queue scheduler. defined by the following parameters:
    &lt;ul&gt;
      &lt;li&gt;number of queues.&lt;/li&gt;
      &lt;li&gt;scheduling algorithms for each queue.&lt;/li&gt;
      &lt;li&gt;method used to determine when to upgrade a process.&lt;/li&gt;
      &lt;li&gt;method used to determine when to demote a process.&lt;/li&gt;
      &lt;li&gt;method used to determine which queue a process will enter when that process needs service.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Nc2SsIQ.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;課程作業&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;linux-&quot;&gt;二、Linux 程式設計&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;課程簡報
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170317/Linux_programming_pthread-1.pdf&quot;&gt;Linux_programming_pthread-1&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170317/Linux_programming_pthread-2.pdf&quot;&gt;Linux_Programming_pthread-2&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;參考資料
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://computing.llnl.gov/tutorials/pthreads/&quot;&gt;POSIX Threads Programming&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-is-a-thread&quot;&gt;1. What is a Thread？&lt;/h3&gt;
&lt;p&gt;#### (1) OS view&lt;br /&gt;
* A thread is an independent stream of instructions that can be scheduled to run by&lt;br /&gt;
the OS.&lt;/p&gt;

&lt;h4 id=&quot;software-developer-view&quot;&gt;(2) Software developer view&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;a thread can be considered as a “procedure” that runs independently from the main program.
    &lt;ul&gt;
      &lt;li&gt;Sequential program: a single stream of instructions in&lt;br /&gt;
a program.&lt;/li&gt;
      &lt;li&gt;Multi-threaded program: a program with multiple streams.
        &lt;ul&gt;
          &lt;li&gt;Multiple threads are needed to use multiple cores/CPUs.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;example&quot;&gt;[Example]&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;Computer games
    &lt;ul&gt;
      &lt;li&gt;each thread controls the movement of an object.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Scientific simulations
    &lt;ul&gt;
      &lt;li&gt;Hurricane movement simulation: each thread simulates the hurricane in a small domain.&lt;/li&gt;
      &lt;li&gt;Molecular dynamic: each thread simulates a subset of particulars.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Web server
    &lt;ul&gt;
      &lt;li&gt;Each thread handles a connection.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;process-and-thread&quot;&gt;2. Process and Thread&lt;/h3&gt;
&lt;p&gt;#### (1) Process context&lt;br /&gt;
* Two parts in the context: &lt;code class=&quot;highlighter-rouge&quot;&gt;self-contained domain (protection)&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;execution of instructions&lt;/code&gt;.&lt;br /&gt;
    * Process ID, process group ID, user ID, and group ID&lt;br /&gt;
    * Environment&lt;br /&gt;
    * Working directory.&lt;br /&gt;
    * Program instructions&lt;br /&gt;
    * Registers (including PC)&lt;br /&gt;
    * Stack&lt;br /&gt;
    * Heap&lt;br /&gt;
    * File descriptors&lt;br /&gt;
    * Signal actions&lt;br /&gt;
    * Shared libraries&lt;br /&gt;
    * Inter-process communication tools&lt;br /&gt;
* What are absolutely needed to support a stream of instructions, given the process context?&lt;br /&gt;
    * Registers (including PC)&lt;br /&gt;
    * Stack&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/6kN1sIR.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;threads&quot;&gt;(2) Threads&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Advantages&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Light-weight
        &lt;ul&gt;
          &lt;li&gt;Lower overhead for thread creation.&lt;/li&gt;
          &lt;li&gt;Lower Context Switching Overhead.
            &lt;ul&gt;
              &lt;li&gt;Fewer OS resources&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Shared State
        &lt;ul&gt;
          &lt;li&gt;Don’t need IPC-like mechanism to communicate between threads of same process.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Shared State!
        &lt;ul&gt;
          &lt;li&gt;Global variables are shared between threads. Accidental changes can be fatal.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Many library functions are not thread-safe
        &lt;ul&gt;
          &lt;li&gt;Library Functions that return pointers to static internal memory. E.g. gethostbyname()&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Lack of robustness
        &lt;ul&gt;
          &lt;li&gt;Crash in one thread will crash the entire process.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pthreads&quot;&gt;3. Pthreads&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Hardware vendors used to implement&lt;br /&gt;
proprietary versions of threads
    &lt;ul&gt;
      &lt;li&gt;Thread programs are not portable&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Pthreads = POSIX threads, specified in IEEE POSIX 1003.1c (1995)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;the-pthreads-api&quot;&gt;(1) The Pthreads API&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Three types of routines:
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Thread management&lt;/code&gt;: create, terminate, join, and detach&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Mutexes&lt;/code&gt;: mutual exclusion, creating, destroying, locking, and unlocking mutexes&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Condition variables&lt;/code&gt;: event driven synchronizaiton.
        &lt;ul&gt;
          &lt;li&gt;Mutexes and condition variables are concerned about synchronization.&lt;/li&gt;
          &lt;li&gt;Why not anything related to inter-thread communication?&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;The concept of opaque objects pervades the&lt;br /&gt;
design of the API.&lt;/li&gt;
  &lt;li&gt;API naming convention&lt;br /&gt;
&lt;img src=&quot;https://i.imgur.com/euq9YUQ.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;thread-management&quot;&gt;(2) Thread management&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Pthread header file &lt;pthread.h&gt;&lt;/pthread.h&gt;&lt;/li&gt;
  &lt;li&gt;Compiling pthread programs：&lt;br /&gt;
  &amp;gt; gcc aaa.c -o aaa -lpthread&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Creation&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;pthread_create&lt;br /&gt;
 &lt;img src=&quot;https://i.imgur.com/KZ0yaCh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Termination&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Return&lt;/li&gt;
      &lt;li&gt;Pthread_exit&lt;/li&gt;
      &lt;li&gt;Can we still use exit？&lt;br /&gt;
 &lt;img src=&quot;https://i.imgur.com/O8QpEBi.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Wait (parent/child synchronization)&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;pthread_join&lt;br /&gt;
 &lt;img src=&quot;https://i.imgur.com/bacALSV.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;課程作業&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 17 Mar 2017 08:00:00 +0800</pubDate>
        <link>http://shouzo.github.io/2017/03/17/linux_system/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/03/17/linux_system/</guid>
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
      </item>
    
      <item>
        <title>20170316 [學習筆記] 人工智慧 (3)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;(一)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;(二)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;(三)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;(四)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;(一)&lt;/h3&gt;

&lt;h3 id=&quot;section-1&quot;&gt;(二)&lt;/h3&gt;

&lt;h3 id=&quot;section-2&quot;&gt;(三)&lt;/h3&gt;

&lt;h3 id=&quot;section-3&quot;&gt;(四)&lt;/h3&gt;
</description>
        <pubDate>Thu, 16 Mar 2017 08:00:00 +0800</pubDate>
        <link>http://shouzo.github.io/2017/03/16/ai/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/03/16/ai/</guid>
        
        <category>人工智慧</category>
        
        
        <category>人工智慧</category>
        
      </item>
    
      <item>
        <title>20170310 [學習筆記] Linux 系統程式 (2)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;一、作業系統&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#process-in-memory&quot; id=&quot;markdown-toc-process-in-memory&quot;&gt;(一) Process in Memory&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#process-state&quot; id=&quot;markdown-toc-process-state&quot;&gt;(二) Process State&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#process-control-block-pcb&quot; id=&quot;markdown-toc-process-control-block-pcb&quot;&gt;(三) Process Control Block (PCB)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#process-switch&quot; id=&quot;markdown-toc-process-switch&quot;&gt;(四) Process Switch&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#processthread&quot; id=&quot;markdown-toc-processthread&quot;&gt;(五) Process、Thread&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#process-scheduling&quot; id=&quot;markdown-toc-process-scheduling&quot;&gt;(六) Process Scheduling&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#schedulers&quot; id=&quot;markdown-toc-schedulers&quot;&gt;Schedulers&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#processes&quot; id=&quot;markdown-toc-processes&quot;&gt;Processes&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#process-creation&quot; id=&quot;markdown-toc-process-creation&quot;&gt;(七) Process Creation&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#linux-&quot; id=&quot;markdown-toc-linux-&quot;&gt;二、Linux 程式設計&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#unix-system-call&quot; id=&quot;markdown-toc-unix-system-call&quot;&gt;(一) Unix system call&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#execv&quot; id=&quot;markdown-toc-execv&quot;&gt;1. execv()&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#signals&quot; id=&quot;markdown-toc-signals&quot;&gt;(二) Signals&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#unix-process-control&quot; id=&quot;markdown-toc-unix-process-control&quot;&gt;1. UNIX Process Control&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#kill-command&quot; id=&quot;markdown-toc-kill-command&quot;&gt;2. kill Command&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#function-call&quot; id=&quot;markdown-toc-function-call&quot;&gt;3. Function Call&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#linux-signal&quot; id=&quot;markdown-toc-linux-signal&quot;&gt;4. Linux Signal&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#signalh&quot; id=&quot;markdown-toc-signalh&quot;&gt;5. 訊號處理 - signal.h&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#signal&quot; id=&quot;markdown-toc-signal&quot;&gt;(1) signal()&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#sigaction&quot; id=&quot;markdown-toc-sigaction&quot;&gt;(2) sigaction()&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;一、作業系統&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170309/ch03.pdf&quot;&gt;課程簡報 - Ch3：Process Concept&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;process-in-memory&quot;&gt;(一) Process in Memory&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/I9HnU1O.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;process-state&quot;&gt;(二) Process State&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/mFSgwiJ.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
   * &lt;strong&gt;new&lt;/strong&gt;: The process is being created.&lt;br /&gt;
   * &lt;strong&gt;running&lt;/strong&gt;: Instructions are being executed.&lt;br /&gt;
   * &lt;strong&gt;waiting&lt;/strong&gt;: The process is waiting for some event to occur.&lt;br /&gt;
   * &lt;strong&gt;ready&lt;/strong&gt;: The process is waiting to be assigned to a processor.&lt;br /&gt;
   * &lt;strong&gt;terminated&lt;/strong&gt;: The process has finished execution.&lt;/p&gt;

&lt;h3 id=&quot;process-control-block-pcb&quot;&gt;(三) Process Control Block (PCB)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/fOf7e2Q.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;process-switch&quot;&gt;(四) Process Switch&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Bto5DiZ.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;processthread&quot;&gt;(五) Process、Thread&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;參考資料
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://goo.gl/whe9F&quot;&gt;Program / Process / Thread 的差別&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://goo.gl/5BnKWN&quot;&gt;“Process 行程”、”Thread 執行緒”、”Multithreading 多執行緒” 簡介&lt;/a&gt;&lt;br /&gt;
&lt;img src=&quot;https://i.imgur.com/DI9y5OS.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;process-scheduling&quot;&gt;(六) Process Scheduling&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Process scheduler selects among available processes for next execution on CPU.&lt;/li&gt;
  &lt;li&gt;Maintains scheduling queues of processes.
    &lt;ul&gt;
      &lt;li&gt;Job queue – set of all processes in the system.&lt;/li&gt;
      &lt;li&gt;Ready queue – set of all processes residing in main memory, ready and waiting to&lt;br /&gt;
execute.&lt;/li&gt;
      &lt;li&gt;Device queues – set of processes waiting for an I/O device.&lt;/li&gt;
      &lt;li&gt;Processes migrate among the various queues.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;schedulers&quot;&gt;Schedulers&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Long-term scheduler&lt;/strong&gt; (or job scheduler) – selects which processes should be brought into the&lt;br /&gt;
ready queue.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Short-term scheduler&lt;/strong&gt; (or CPU scheduler) – selects which process should be executed next and&lt;br /&gt;
allocates CPU.
    &lt;ul&gt;
      &lt;li&gt;Sometimes the only scheduler in a system.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The long-term scheduler controls the &lt;strong&gt;degree of multiprogramming&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Medium-term scheduler&lt;/strong&gt; can be added if degree of multiple programming needs to decrease.
    &lt;ul&gt;
      &lt;li&gt;Remove process from memory, store on disk, bring back in from disk to continue execution:&lt;br /&gt;
swapping.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://enews.open2u.com.tw/~noupd/book_up/1746/8719.htm&quot;&gt;Degree of multiprogramming&lt;/a&gt;&lt;/strong&gt;：多工程度、記憶體中行程的總數量&lt;/p&gt;

&lt;h4 id=&quot;processes&quot;&gt;Processes&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;I/O-bound process&lt;/strong&gt; – spends more time doing I/O than computations, many short CPU&lt;br /&gt;
bursts.
    &lt;ul&gt;
      &lt;li&gt;行程大部份的時間在做 I/O，只有少部份的時間在做計算。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CPU-bound process&lt;/strong&gt; – spends more time doing computations; few very long CPU bursts.
    &lt;ul&gt;
      &lt;li&gt;行程大部份的時間在做計算，只有少部份的時間在做  I/O。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Xnhn0Sa.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;process-creation&quot;&gt;(七) Process Creation&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/MDkGD81.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
* UNIX examples&lt;br /&gt;
    * &lt;strong&gt;fork()&lt;/strong&gt;：system call creates new process&lt;br /&gt;
    * &lt;strong&gt;exec()&lt;/strong&gt;：system call used after a fork() to replace the process’ memory space with a new program&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/AxrT24a.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;課程作業&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;pid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	
&lt;span class=&quot;cm&quot;&gt;/* fork a child process */&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// erro occurred
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Fork Failed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// child process
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;execlp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bin/ls&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ls&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;			&lt;span class=&quot;c1&quot;&gt;// parent process
&lt;/span&gt;		&lt;span class=&quot;c1&quot;&gt;// parent will wait for the child to complete
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Child Complete&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;	
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;執行結果&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/CfTMr9N.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;linux-&quot;&gt;二、Linux 程式設計&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170310/Creating_and_Executing_Processes.pdf&quot;&gt;課程簡報 - Creating and Executing Processes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170310/Signals.pdf&quot;&gt;課程簡報 - Signal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;unix-system-call&quot;&gt;(一) Unix system call&lt;/h3&gt;

&lt;h4 id=&quot;execv&quot;&gt;1. execv()&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;課堂練習： &lt;code class=&quot;highlighter-rouge&quot;&gt;execv()&lt;/code&gt; 的概念&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bin/ls&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Fork error &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* Child executes here */&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;execv&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Exec error &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;		&lt;span class=&quot;cm&quot;&gt;/* Parent executes here */&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello there! &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;signals&quot;&gt;(二) Signals&lt;/h3&gt;

&lt;h4 id=&quot;unix-process-control&quot;&gt;1. UNIX Process Control&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/kFzherv.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;kill-command&quot;&gt;2. kill Command&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;p&gt;kill -signal pid&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Example
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;kill –2 1234&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;kill -SIGINT 1234&lt;/em&gt;
        &lt;ul&gt;
          &lt;li&gt;Same as pressing Ctrl-c if process 1234 is running in foreground.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;function-call&quot;&gt;3. Function Call&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;raise()&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;raise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGINT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Process commits suicide. */&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* Shouldn&#39;t get here. */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;kill()&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;int kill(pid_t iPid, int iSig);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iPid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Process gets its id.*/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iPid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIGINT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/* Process sends itself a SIGINT signal (commits suicide?) */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;linux-signal&quot;&gt;4. Linux Signal&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.comptechdoc.org/os/linux/programming/linux_pgsignals.html&quot;&gt;Linux Signal 種類&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Ctrl-C (in older Unixes, DEL)
        &lt;ul&gt;
          &lt;li&gt;sends an INT signal (SIGINT)&lt;/li&gt;
          &lt;li&gt;by default, this causes the process to terminate.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Ctrl-Z
        &lt;ul&gt;
          &lt;li&gt;sends a TSTP signal (SIGTSTP)&lt;/li&gt;
          &lt;li&gt;by default, this causes the process to suspend execution.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Ctrl-\
        &lt;ul&gt;
          &lt;li&gt;sends a QUIT signal (SIGQUIT)&lt;/li&gt;
          &lt;li&gt;by default, this causes the process to terminate and dump core.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;signalh&quot;&gt;5. 訊號處理 - signal.h&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;意義說明
    &lt;ul&gt;
      &lt;li&gt;SIGABORT    程序停止&lt;/li&gt;
      &lt;li&gt;SIGALRM     警示&lt;/li&gt;
      &lt;li&gt;SIGFPE      浮點數例外&lt;/li&gt;
      &lt;li&gt;SIGHUP      掛斷&lt;/li&gt;
      &lt;li&gt;SIGILL      非法指令&lt;/li&gt;
      &lt;li&gt;SIGINT      終端機插斷&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;signal&quot;&gt;(1) signal()&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;signal.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;攔截 Ctrl-C 訊號&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;signal.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ouch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OUCH! - I got signal %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGINT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIG_DFL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SIGINT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ouch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	
	&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;sigaction&quot;&gt;(2) sigaction()&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;signal.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sigaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sigaction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sigaction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;參數說明
    &lt;ul&gt;
      &lt;li&gt;sig: 要處理的訊號,若 act 指針非空, 則根據 act 修改該信號的處理動作；若 oact 指針非空, 則通過 oact 傳出該信號原來的處理動作。&lt;/li&gt;
      &lt;li&gt;void(*)(int) sa_handler&lt;/li&gt;
      &lt;li&gt;sigset_t sa_mask&lt;/li&gt;
      &lt;li&gt;int sa_flags&lt;/li&gt;
      &lt;li&gt;sa_handler 代表新的信號處理。&lt;/li&gt;
      &lt;li&gt;sa_mask 用來設置在處理該信號時暫時將 sa_mask 指定的信號集擱置。&lt;/li&gt;
      &lt;li&gt;sa_flags 用來設置信號處理的其他相關操作。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 10 Mar 2017 08:00:00 +0800</pubDate>
        <link>http://shouzo.github.io/2017/03/10/linux_system/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/03/10/linux_system/</guid>
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
      </item>
    
      <item>
        <title>20170309 [學習筆記] 人工智慧 (2)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;(一) 自動控制分類：一般型式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;(二) 迴授控制&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;(三) 模糊集合&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;(四) 歸屬函數&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;(一) 自動控制分類：一般型式&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;以下皆不用精確數學模型
    &lt;ol&gt;
      &lt;li&gt;&lt;strong&gt;ON - OFF 控制&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;比例控制&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;PI 比例積分控制&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;PD 比例微分控制&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;PID 比例微分積分控制&lt;/strong&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;應用範例
    &lt;ul&gt;
      &lt;li&gt;水塔水位控制：ON - OFF 控制&lt;/li&gt;
      &lt;li&gt;騎車：比例控制&lt;/li&gt;
      &lt;li&gt;工業製程控制：PI、PD、PID 控制&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;(二) 迴授控制&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/QysvSAH.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://i.imgur.com/VJcsemV.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;(三) 模糊集合&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/KQ9mDmH.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://i.imgur.com/obEt0R0.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;(四) 歸屬函數&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Gpc2LC6.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://i.imgur.com/fglu2Jg.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://i.imgur.com/XmdiO3q.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Mar 2017 08:00:00 +0800</pubDate>
        <link>http://shouzo.github.io/2017/03/09/ai/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/03/09/ai/</guid>
        
        <category>人工智慧</category>
        
        
        <category>人工智慧</category>
        
      </item>
    
      <item>
        <title>20170303 [學習筆記] Linux 系統程式 (1)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;(一) 作業系統&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#linux-&quot; id=&quot;markdown-toc-linux-&quot;&gt;(二) Linux 程式設計&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;(一) 作業系統&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170302/ch01.pdf&quot;&gt;課程簡報 - Ch1：Introduction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;linux-&quot;&gt;(二) Linux 程式設計&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170303/Creating_and_Executing_Processes.pdf&quot;&gt;課程簡報 - Creating and Executing Processes&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;課程作業： &lt;code class=&quot;highlighter-rouge&quot;&gt;fork()&lt;/code&gt; 的概念&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* Press any Integer */&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;scanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* Use &quot;fork()&quot; to create Child&#39;s and Parent&#39;s process */&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Set the &quot;result&quot; initial value
&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Child&#39;s entry
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;***** Child&#39;s pid = %d *****&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1 + 2 + ... + n = %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	&lt;span class=&quot;c1&quot;&gt;// Parent&#39;s entry
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;***** Parent&#39;s pid = %d *****&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;n 的因數：%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;執行結果&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/TKyt2rB.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Mar 2017 07:59:59 +0800</pubDate>
        <link>http://shouzo.github.io/2017/03/04/linux_system/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/03/04/linux_system/</guid>
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
      </item>
    
      <item>
        <title>20170302 [學習筆記] 人工智慧 (1)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#a----&quot; id=&quot;markdown-toc-a----&quot;&gt;A. 模糊理論 - 模糊控制&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#b-&quot; id=&quot;markdown-toc-b-&quot;&gt;B. 類神經網路&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;專家系統結構&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;智慧控制的定義&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;a----&quot;&gt;A. 模糊理論 - 模糊控制&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;藉由規則庫建立專家系統
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;https://goo.gl/MTt7jw&quot;&gt;專家系統&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://goo.gl/39piYs&quot;&gt;基於規則的專家系統&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;b-&quot;&gt;B. 類神經網路&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;藉由學習建立網路&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section&quot;&gt;專家系統結構&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/A3xyOE9.jpg&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;1. 正向推論&lt;/strong&gt;：已知條件，推論出結論。&lt;br /&gt;
&lt;img src=&quot;https://i.imgur.com/CLp1mH4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 逆向推論&lt;/strong&gt;：先提出結論或假設， 再推論前提(條件)。&lt;br /&gt;
&lt;img src=&quot;https://i.imgur.com/JECgCGc.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;智慧控制的定義&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;古典控制與現代控制都需要精確數學模型，然而工業控制對象常見有非線性、多不確定因素，使精確數學模型不易取得，甚至無法取得。因此有一個結合人工智慧、運算性自動控制，而成 &lt;strong&gt;智慧型控制&lt;/strong&gt; 。&lt;br /&gt;
&lt;img src=&quot;https://i.imgur.com/dlm1zVL.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[優點] 模糊智慧型控制&lt;/strong&gt;&lt;br /&gt;
* 不需要數學模型。&lt;br /&gt;
* 系統強健。&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Mar 2017 07:59:59 +0800</pubDate>
        <link>http://shouzo.github.io/2017/03/02/ai/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/03/02/ai/</guid>
        
        <category>人工智慧</category>
        
        
        <category>人工智慧</category>
        
      </item>
    
      <item>
        <title>20170118 [社團相關] 社團負責人課程</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;(一) 社團大代誌 - 社團負責人課程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section&quot;&gt;(一) 社團大代誌 - 社團負責人課程&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;簡報網址：&lt;a href=&quot;https://shouzo.github.io/collections/clubs/20170118-clubmanager.pdf&quot;&gt;https://shouzo.github.io/collections/clubs/20170118-clubmanager.pdf&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SlideShare：&lt;a href=&quot;http://www.slideshare.net/danny200026/20170118-71124221&quot;&gt;http://www.slideshare.net/danny200026/20170118-71124221&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[畫面預覽]&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/20170118/clubmanger.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 19 Jan 2017 07:59:59 +0800</pubDate>
        <link>http://shouzo.github.io/2017/01/19/clubmanager/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/01/19/clubmanager/</guid>
        
        <category>社團</category>
        
        
        <category>社團</category>
        
      </item>
    
      <item>
        <title>20161211 [社團相關] 給社團人的一封信</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;(一) 給社團人的一封信&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section&quot;&gt;(一) 給社團人的一封信&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;簡報網址：&lt;a href=&quot;https://shouzo.github.io/collections/clubs/20161211-why-clubs.html#/&quot;&gt;https://shouzo.github.io/collections/clubs/20161211-why-clubs.html#/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SlideShare：&lt;a href=&quot;http://www.slideshare.net/danny200026/20161211-70030175&quot;&gt;http://www.slideshare.net/danny200026/20161211-70030175&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[畫面預覽]&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/20161211/why-clubs.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 12 Dec 2016 07:59:59 +0800</pubDate>
        <link>http://shouzo.github.io/2016/12/12/why-clubs/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2016/12/12/why-clubs/</guid>
        
        <category>社團</category>
        
        
        <category>社團</category>
        
      </item>
    
      <item>
        <title>20161024 [資料科學系列] R語言資料分析實務(3)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#r3&quot; id=&quot;markdown-toc-r3&quot;&gt;簡報主題：R語言資料分析實務(3)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;r3&quot;&gt;簡報主題：R語言資料分析實務(3)&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;簡報網址：&lt;a href=&quot;https://shouzo.github.io/collections/data-science/20161024-R-doing-3.html#/&quot;&gt;20161024 [資料科學系列] R語言資料分析實務(3)&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;PDF網址：&lt;a href=&quot;https://shouzo.github.io/collections/data-science/20161024-R-doing-3.pdf&quot;&gt;20161024 [資料科學系列] R語言資料分析實務(3)&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SlideShare：&lt;a href=&quot;http://www.slideshare.net/danny200026/20161024-r-3&quot;&gt;http://www.slideshare.net/danny200026/20161024-r-3&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[畫面預覽]&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/20161024/R-doing-3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 23 Oct 2016 18:00:00 +0800</pubDate>
        <link>http://shouzo.github.io/2016/10/23/R-doing-3/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2016/10/23/R-doing-3/</guid>
        
        <category>Data-Science</category>
        
        <category>Data-Mining</category>
        
        <category>R語言</category>
        
        
        <category>Data-Science</category>
        
        <category>R語言</category>
        
      </item>
    
      <item>
        <title>20161017 [資料科學系列] R語言資料分析實務(2)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#r2&quot; id=&quot;markdown-toc-r2&quot;&gt;簡報主題：R語言資料分析實務(2)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;r2&quot;&gt;簡報主題：R語言資料分析實務(2)&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;簡報網址：&lt;a href=&quot;https://shouzo.github.io/collections/data-science/20161017-R-doing-2.html#/&quot;&gt;20161017 [資料科學系列] R語言資料分析實務(2)&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;PDF簡報網址：&lt;a href=&quot;https://shouzo.github.io/collections/data-science/20161017-R-doing-2.pdf&quot;&gt;20161017 [資料科學系列] R語言資料分析實務(2)&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SlideShare：&lt;a href=&quot;http://www.slideshare.net/danny200026/20161017-r-2&quot;&gt;http://www.slideshare.net/danny200026/20161017-r-2&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;[畫面預覽]&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/20161017/R-doing-2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 16 Oct 2016 18:00:00 +0800</pubDate>
        <link>http://shouzo.github.io/2016/10/16/R-doing-2/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2016/10/16/R-doing-2/</guid>
        
        <category>Data-Science</category>
        
        <category>Data-Mining</category>
        
        <category>R語言</category>
        
        
        <category>Data-Science</category>
        
        <category>R語言</category>
        
      </item>
    
  </channel>
</rss>
