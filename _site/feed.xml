<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>少左 shouzo</title>
    <description></description>
    <link>http://shouzo.github.io/</link>
    <atom:link href="http://shouzo.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 19 Jul 2017 18:49:55 +0800</pubDate>
    <lastBuildDate>Wed, 19 Jul 2017 18:49:55 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>20170719 [學習筆記] 30天作業自作入門筆記 (2)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#day2&quot; id=&quot;markdown-toc-day2&quot;&gt;20170719 - Day_2&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#helloosnas&quot; id=&quot;markdown-toc-helloosnas&quot;&gt;一、修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;helloos.nas&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#helloosnas-1&quot; id=&quot;markdown-toc-helloosnas-1&quot;&gt;二、編譯 &lt;code class=&quot;highlighter-rouge&quot;&gt;helloos.nas&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#osimg&quot; id=&quot;markdown-toc-osimg&quot;&gt;三、啟動虛擬機，讀取 &lt;code class=&quot;highlighter-rouge&quot;&gt;os.img&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;工作環境
    &lt;ul&gt;
      &lt;li&gt;Lubuntu 17.04&lt;/li&gt;
      &lt;li&gt;VMware Workstation 12.5.2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;參考資料
    &lt;ul&gt;
      &lt;li&gt;Linux 版本筆記：&lt;a href=&quot;http://lengly.top/archives/85&quot;&gt;http://lengly.top/archives/85&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;day2&quot;&gt;20170719 - Day_2&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;進度摘要
    &lt;ul&gt;
      &lt;li&gt;簡易 IPL 製作。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;完整專案
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/My-30OS/tree/master/20170719&quot;&gt;https://github.com/shouzo/My-30OS/tree/master/20170719&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;參考資料
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://blog.gtwang.org/linux/dd-command-examples/&quot;&gt;dd 指令教學與實用範例，備份與回復資料的小工具&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;helloosnas&quot;&gt;一、修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;helloos.nas&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RESB	0x7dfe-$&lt;/code&gt; 此行無法通過編譯，故修改成 &lt;code class=&quot;highlighter-rouge&quot;&gt;TIMES 510-($-$$)    DB    0&lt;/code&gt;。
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; 代表目前行的位址，&lt;code class=&quot;highlighter-rouge&quot;&gt;$$&lt;/code&gt; 為目前 section 的位址。(TIMES 意思為重複，先決定次數再確定重複的內容)。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;; hello-os
; TAB=4

ORG		0x7c00			; 指定從 0x7c00 開始執行

;   以下是為了標準 FAT12 格式的軟式磁碟片的記述

    JMP		entry
    DB		0x90
    DB		&quot;HELLOIPL&quot;		
    DW		512				
    DB		1				
    DW		1				
    DB		2				
    DW		224				
    DW		2880			
    DB		0xf0			
    DW		9				
    DW		18				
    DW		2				
    DD		0				
    DD		2880			
    DB		0,0,0x29		
    DD		0xffffffff		
    DB		&quot;HELLO-OS   &quot;	
    DB		&quot;FAT12   &quot;		
    RESB	18				


; 程式碼本身

entry:
    MOV		AX,0			; 暫存器初始化
    MOV		SS,AX
    MOV		SP,0x7c00
    MOV		DS,AX
    MOV		ES,AX

    MOV		SI,msg


putloop:
    MOV		AL,[SI]
    ADD		SI,1			; 在 SI 加 1
    CMP		AL,0
    JE		fin
    MOV		AH,0x0e			; 一個文字表示功能
    MOV		BX,15			; 顏色代碼 (color code)
    INT		0x10			; 呼叫視訊 BIOS
    JMP		putloop


fin:
    HLT						; 直到有了某個物件就將 CPU 停止
    JMP		fin				; 無限迴圈


msg:
    DB		0x0a, 0x0a		; 連續兩個換行
    DB		&quot;hello, world&quot;
    DB		0x0a			; 換行 
    DB		0

    ; RESB	0x7dfe-$	       ; 此行編譯無法通過，故修改成 &quot;TIMES 510-($-$$)    DB    0&quot;
    TIMES 510-($-$$)    DB    0      ; &quot;$&quot; 代表目前行的位址，&quot;$$&quot; 為目前 section 的位址。(TIMES 意思為重複，先確定次數再確定重複的內容)

    DB		0x55, 0xaa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;helloosnas-1&quot;&gt;二、編譯 &lt;code class=&quot;highlighter-rouge&quot;&gt;helloos.nas&lt;/code&gt;&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;編譯 &lt;code class=&quot;highlighter-rouge&quot;&gt;helloos.nas&lt;/code&gt;，在輸出 &lt;code class=&quot;highlighter-rouge&quot;&gt;bootloader&lt;/code&gt; 的同時也輸出列表檔案 &lt;code class=&quot;highlighter-rouge&quot;&gt;ipl.lst&lt;/code&gt;。
    &lt;blockquote&gt;
      &lt;p&gt;nasm -o bootloader -l ipl.lst helloos.nas&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/KfOYHIM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在 Linux 系統下使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;dd&lt;/code&gt; 指令產生 &lt;code class=&quot;highlighter-rouge&quot;&gt;.img&lt;/code&gt; 檔案。
    &lt;ul&gt;
      &lt;li&gt;先將 os.img 清空歸零，再將 bootloader 拷貝到 img 裡面。&lt;/li&gt;
      &lt;li&gt;一個軟碟片容量：++1.44MB = 512KB * 2880++&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;dd if=/dev/zero of=os.img bs=512 count=2880
dd if=bootloader of=os.img bs=512 count=1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;if：指定輸入檔案
of：指定輸出檔案
bs：指定 block size，一次讀取與寫入 N 個位元組的資料
count：處理 N 個輸入區塊
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/DbKECqo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果打開 &lt;code class=&quot;highlighter-rouge&quot;&gt;ipl.lst&lt;/code&gt; ，可以檢視組合語言轉換成機械碼的情形。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;     1                                  ; hello-os
     2                                  ; TAB=4
     3                                  
     4                                  ORG		0x7c00			    ;   指定從 0x7c00 開始執行
     5                                  
     6                                  ;   以下是為了標準 FAT12 格式的軟式磁碟片的記述
     7                                  
     8 00000000 EB4E                        JMP		entry
     9 00000002 90                          DB		0x90
    10 00000003 48454C4C4F49504C            DB		&quot;HELLOIPL&quot;		
    11 0000000B 0002                        DW		512				
    12 0000000D 01                          DB		1				
    13 0000000E 0100                        DW		1				
    14 00000010 02                          DB		2				
    15 00000011 E000                        DW		224				
    16 00000013 400B                        DW		2880			
    17 00000015 F0                          DB		0xf0			
    18 00000016 0900                        DW		9				
    19 00000018 1200                        DW		18				
    20 0000001A 0200                        DW		2				
    21 0000001C 00000000                    DD		0				
    22 00000020 400B0000                    DD		2880			
    23 00000024 000029                      DB		0,0,0x29		
    24 00000027 FFFFFFFF                    DD		0xffffffff		
    25 0000002B 48454C4C4F2D4F5320-         DB		&quot;HELLO-OS   &quot;	
    25 00000034 2020               
    26 00000036 4641543132202020            DB		&quot;FAT12   &quot;		
    27 0000003E &amp;lt;res 00000012&amp;gt;              RESB	18				
    27          ******************       warning: uninitialized space declared in .text section: zeroing
    28                                  
    29                                  
    30                                  
    31                                  
    32                                  ; 程式碼本身
    33                                  
    34                                  entry:
    35 00000050 B80000                      MOV		AX,0			;   暫存器初始化
    36 00000053 8ED0                        MOV		SS,AX
    37 00000055 BC007C                      MOV		SP,0x7c00
    38 00000058 8ED8                        MOV		DS,AX
    39 0000005A 8EC0                        MOV		ES,AX
    40                                  
    41 0000005C BE[7400]                    MOV		SI,msg
    42                                  
    43                                  
    44                                  putloop:
    45 0000005F 8A04                        MOV		AL,[SI]
    46 00000061 83C601                      ADD		SI,1			;   在 SI 加 1
    47 00000064 3C00                        CMP		AL,0
    48 00000066 7409                        JE		fin
    49 00000068 B40E                        MOV		AH,0x0e			;   一個文字表示功能
    50 0000006A BB0F00                      MOV		BX,15			;   顏色代碼 (color code)
    51 0000006D CD10                        INT		0x10			;   呼叫視訊 BIOS
    52 0000006F EBEE                        JMP		putloop
    53                                  
    54                                  
    55                                  fin:
    56 00000071 F4                          HLT						;   直到有了某個物件就將 CPU 停止
    57 00000072 EBFD                        JMP		fin				;   無限迴圈
    58                                  
    59                                  
    60                                  msg:
    61 00000074 0A0A                        DB		0x0a, 0x0a		;   連續兩個換行
    62 00000076 68656C6C6F2C20776F-         DB		&quot;hello, world&quot;
    62 0000007F 726C64             
    63 00000082 0A                          DB		0x0a			;   換行 
    64 00000083 00                          DB		0
    65                                  
    66                                      ;   RESB	0x7dfe-$	;   此行編譯無法通過，故修改成 &quot;TIMES 510-($-$$)      DB      0&quot;
    67 00000084 00&amp;lt;rept&amp;gt;                    TIMES 510-($-$$)    DB      0   ;   &#39;$&#39; 代表目前行的位址，&#39;$$&#39; 為目前 section 的位址。(TIMES 意思為重複，先確定次數再確定重複的內容)
    68                                  
    69 000001FE 55AA                        DB		0x55, 0xaa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;osimg&quot;&gt;三、啟動虛擬機，讀取 &lt;code class=&quot;highlighter-rouge&quot;&gt;os.img&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;執行結果
&lt;img src=&quot;https://i.imgur.com/ZwHRrHj.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 19 Jul 2017 08:00:00 +0800</pubDate>
        <link>http://shouzo.github.io/2017/07/19/30OS_day2/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/07/19/30OS_day2/</guid>
        
        <category>組合語言</category>
        
        <category>C語言</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
        
        <category>組合語言</category>
        
        <category>C語言</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
      </item>
    
      <item>
        <title>20170714 [學習筆記] 30天作業自作入門筆記 (1)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#day1&quot; id=&quot;markdown-toc-day1&quot;&gt;20170714 - Day_1&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#nasm-&quot; id=&quot;markdown-toc-nasm-&quot;&gt;一、安裝 &lt;code class=&quot;highlighter-rouge&quot;&gt;nasm&lt;/code&gt; ，編譯映像檔&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;二、新增虛擬機、載入映像檔&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;三、改變螢幕上面的字&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;工作環境
    &lt;ul&gt;
      &lt;li&gt;Lubuntu 17.04&lt;/li&gt;
      &lt;li&gt;VMware Workstation 12.5.2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;參考資料
    &lt;ul&gt;
      &lt;li&gt;Linux 版本筆記：&lt;a href=&quot;http://lengly.top/archives/85&quot;&gt;http://lengly.top/archives/85&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;day1&quot;&gt;20170714 - Day_1&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;進度摘要
    &lt;ul&gt;
      &lt;li&gt;使用 nasm 編譯映像檔，使用虛擬機模擬。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;完整專案
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/My-30OS/tree/master/20170714&quot;&gt;https://github.com/shouzo/My-30OS/tree/master/20170714&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;參考資料
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.nasm.us/&quot;&gt;NASM&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.smalljacky.com/introduction-to-computer/carry-digital-system-conversion/&quot;&gt;數字系統_進制轉換教學&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/FAT&quot;&gt;FAT - 維基百科&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%BC%95%E5%AF%BC%E6%89%87%E5%8C%BA&quot;&gt;開機(啟動)磁區&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://flyeast-personal-area.blogspot.tw/2010/08/ipl-initial-program-loader.html&quot;&gt;IPL - Initial Program Loader&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.lifewire.com/what-does-booting-mean-2625799&quot;&gt;What Does Booting Mean?&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nasm-&quot;&gt;一、安裝 &lt;code class=&quot;highlighter-rouge&quot;&gt;nasm&lt;/code&gt; ，編譯映像檔&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. 在終端上輸入以下指令，安裝 &lt;code class=&quot;highlighter-rouge&quot;&gt;nasm&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;sudo apt install nasm&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/lqQOAyY.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 用 vim 檢視 &lt;code class=&quot;highlighter-rouge&quot;&gt;helloos.nas&lt;/code&gt; 的內容&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;DB	0xeb, 0x4e, 0x90, 0x48, 0x45, 0x4c, 0x4c, 0x4f
DB	0x49, 0x50, 0x4c, 0x00, 0x02, 0x01, 0x01, 0x00
DB	0x02, 0xe0, 0x00, 0x40, 0x0b, 0xf0, 0x09, 0x00
DB	0x12, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00
DB	0x40, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x29, 0xff
DB	0xff, 0xff, 0xff, 0x48, 0x45, 0x4c, 0x4c, 0x4f
DB	0x2d, 0x4f, 0x53, 0x20, 0x20, 0x20, 0x46, 0x41
DB	0x54, 0x31, 0x32, 0x20, 0x20, 0x20, 0x00, 0x00
RESB	16
DB	0xb8, 0x00, 0x00, 0x8e, 0xd0, 0xbc, 0x00, 0x7c
DB	0x8e, 0xd8, 0x8e, 0xc0, 0xbe, 0x74, 0x7c, 0x8a
DB	0x04, 0x83, 0xc6, 0x01, 0x3c, 0x00, 0x74, 0x09
DB	0xb4, 0x0e, 0xbb, 0x0f, 0x00, 0xcd, 0x10, 0xeb
DB	0xee, 0xf4, 0xeb, 0xfd, 0x0a, 0x0a, 0x68, 0x65
DB	0x6c, 0x6c, 0x6f, 0x2c, 0x20, 0x77, 0x6f, 0x72
DB	0x6c, 0x64, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00
RESB	368
DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa
DB	0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00
RESB	4600
DB	0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00
RESB	1469432
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/lTRNdvC.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;好吧，我發現自己看不懂…得找找相關的組合語言書籍。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 將 &lt;code class=&quot;highlighter-rouge&quot;&gt;helloos.nas&lt;/code&gt; 編譯成映像檔 &lt;code class=&quot;highlighter-rouge&quot;&gt;helloos.img&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;nasm -o helloos.img helloos.nas&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/mof2KcD.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;二、新增虛擬機、載入映像檔&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. 環境配置 » 記憶體：256MB、硬碟：8GB&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/l0LDEAg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 設定虛擬機欲讀取的映像檔位置&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;在書本範例上是使用 “軟碟機” 讀取映像檔 &lt;code class=&quot;highlighter-rouge&quot;&gt;helloos.img&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Ng6nstQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 啟動虛擬機&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;可以看到螢幕上顯示 &lt;code class=&quot;highlighter-rouge&quot;&gt;hello, world&lt;/code&gt; 後畫面停滯不動，觀察完後便可將虛擬機關機。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/I3ap9DE.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;三、改變螢幕上面的字&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. 用 vim 修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;helloos.img&lt;/code&gt; 映像檔&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;將內文中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;hello, world&lt;/code&gt; 改成 &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello, shouzo. Be Strong to Be Useful.&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/qv125bc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;編輯完成後，將映像檔另存成 &lt;code class=&quot;highlighter-rouge&quot;&gt;hello_shouzo.img&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. 設定新的映像檔讀取位置後，啟動虛擬機&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;本次將欲讀取的映像檔改成 &lt;code class=&quot;highlighter-rouge&quot;&gt;hello_shouzo.img&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/avcdhdB.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 14 Jul 2017 08:00:00 +0800</pubDate>
        <link>http://shouzo.github.io/2017/07/14/30OS_day1/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/07/14/30OS_day1/</guid>
        
        <category>組合語言</category>
        
        <category>C語言</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
        
        <category>組合語言</category>
        
        <category>C語言</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
      </item>
    
      <item>
        <title>20170622 [學習筆記] Linux 系統程式筆記總整理</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;一、作業系統&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#linux-&quot; id=&quot;markdown-toc-linux-&quot;&gt;二、Linux 程式設計&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
  &lt;li&gt;本學期課程的筆記總整理。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;一、作業系統&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/collections/linux_system/Operating_System.html&quot;&gt;Operating_System (作業系統)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;linux-&quot;&gt;二、Linux 程式設計&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/collections/linux_system/Linux_Programming.html&quot;&gt;Linux_Programming  (Linux 程式設計)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 22 Jun 2017 08:00:00 +0800</pubDate>
        <link>http://shouzo.github.io/2017/06/22/linux_system/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/06/22/linux_system/</guid>
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
      </item>
    
      <item>
        <title>20170615 [學習筆記] Linux 系統程式 (15)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;一、作業系統&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#allocation-of-frames&quot; id=&quot;markdown-toc-allocation-of-frames&quot;&gt;(一) Allocation of Frames&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#fixed-allocation&quot; id=&quot;markdown-toc-fixed-allocation&quot;&gt;1. Fixed Allocation&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#priority-allocation&quot; id=&quot;markdown-toc-priority-allocation&quot;&gt;2. Priority Allocation&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#global-vs-local-allocation&quot; id=&quot;markdown-toc-global-vs-local-allocation&quot;&gt;3. Global vs. Local Allocation&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#non-uniform-memory-access&quot; id=&quot;markdown-toc-non-uniform-memory-access&quot;&gt;4. Non-Uniform Memory Access&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#thrashing&quot; id=&quot;markdown-toc-thrashing&quot;&gt;5. Thrashing&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#demand-paging-and-thrashing&quot; id=&quot;markdown-toc-demand-paging-and-thrashing&quot;&gt;6. Demand Paging and Thrashing&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#working-set-model&quot; id=&quot;markdown-toc-working-set-model&quot;&gt;7. Working-Set Model&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#page-fault-frequency&quot; id=&quot;markdown-toc-page-fault-frequency&quot;&gt;8. Page-Fault Frequency&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#memory-mapped-files&quot; id=&quot;markdown-toc-memory-mapped-files&quot;&gt;(二) Memory-Mapped Files&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#other-considerations----prepaging&quot; id=&quot;markdown-toc-other-considerations----prepaging&quot;&gt;(三) Other Considerations – Prepaging&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#other-issues&quot; id=&quot;markdown-toc-other-issues&quot;&gt;(四) Other Issues&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;一、作業系統&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;課堂講義
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170615/ch09.pdf&quot;&gt;Chapter 9: Virtual-Memory Management&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;allocation-of-frames&quot;&gt;(一) Allocation of Frames&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Each process needs minimum number of frames&lt;/li&gt;
  &lt;li&gt;Example: IBM 370 – 6 pages to handle SS MOVE instruction:
    &lt;ul&gt;
      &lt;li&gt;instruction is 6 bytes, might span 2 pages&lt;/li&gt;
      &lt;li&gt;2 pages to handle from&lt;/li&gt;
      &lt;li&gt;2 pages to handle to&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Maximum of course is total frames in the system&lt;/li&gt;
  &lt;li&gt;Two major allocation schemes
    &lt;ul&gt;
      &lt;li&gt;fixed allocation&lt;/li&gt;
      &lt;li&gt;priority allocation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Many variations&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;fixed-allocation&quot;&gt;1. Fixed Allocation&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Equal allocation – For example, if there are 100 frames (after allocating frames for the OS) and 5 processes, give each process 20 frames
    &lt;ul&gt;
      &lt;li&gt;Keep some as free frame buffer pool&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Proportional allocation – Allocate according to the size of process
    &lt;ul&gt;
      &lt;li&gt;Dynamic as degree of multiprogramming, process sizes change&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/EwupsLy.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;priority-allocation&quot;&gt;2. Priority Allocation&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Use a proportional allocation scheme using priorities rather than size&lt;/li&gt;
  &lt;li&gt;If process P i generates a page fault,
    &lt;ul&gt;
      &lt;li&gt;select for replacement one of its frames&lt;/li&gt;
      &lt;li&gt;select for replacement a frame from a process with lower priority number&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;global-vs-local-allocation&quot;&gt;3. Global vs. Local Allocation&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Global replacement&lt;/strong&gt; – process selects a replacement frame from the set of all frames; one process can take a frame from another
    &lt;ul&gt;
      &lt;li&gt;But then process execution time can vary greatly&lt;/li&gt;
      &lt;li&gt;But greater throughput so more common&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Local replacement&lt;/strong&gt; – each process selects from only its own set of allocated frames
    &lt;ul&gt;
      &lt;li&gt;More consistent per-process performance&lt;/li&gt;
      &lt;li&gt;But possibly underutilized memory&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;non-uniform-memory-access&quot;&gt;4. Non-Uniform Memory Access&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;So far all memory accessed equally&lt;/li&gt;
  &lt;li&gt;Many systems are NUMA – speed of access to memory varies
    &lt;ul&gt;
      &lt;li&gt;Consider system boards containing CPUs and memory, interconnected over a system bus&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Optimal performance comes from allocating memory “close to” the CPU on which the thread is scheduled
    &lt;ul&gt;
      &lt;li&gt;And modifying the scheduler to schedule the thread on the same system board when possible&lt;/li&gt;
      &lt;li&gt;Solved by Solaris by creating &lt;strong&gt;lgroups&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;Structure to track CPU / Memory low latency groups&lt;/li&gt;
          &lt;li&gt;Used my schedule and pager&lt;/li&gt;
          &lt;li&gt;When possible schedule all threads of a process and allocate all memory for that process within the lgroup&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;thrashing&quot;&gt;5. Thrashing&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;If a process does not have “enough” pages, the page-fault rate is very high
    &lt;ul&gt;
      &lt;li&gt;Page fault to get page&lt;/li&gt;
      &lt;li&gt;Replace existing frame&lt;/li&gt;
      &lt;li&gt;But quickly need replaced frame back&lt;/li&gt;
      &lt;li&gt;This leads to:
        &lt;ul&gt;
          &lt;li&gt;Low CPU utilization&lt;/li&gt;
          &lt;li&gt;Operating system thinking that it needs to increase the degree of multiprogramming&lt;/li&gt;
          &lt;li&gt;Another process added to the system&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Thrashing&lt;/strong&gt; - a process is busy swapping pages in and out&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/jBcF8pC.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;demand-paging-and-thrashing&quot;&gt;6. Demand Paging and Thrashing&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Why does demand paging work? &lt;strong&gt;Locality model&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Process migrates from one locality to another&lt;/li&gt;
      &lt;li&gt;Localities may overlap&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Why does thrashing occur? &lt;strong&gt;size of locality &amp;gt; total memory size&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Limit effects by using local or priority page replacement&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;working-set-model&quot;&gt;7. Working-Set Model&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Nsrm3Lw.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://i.imgur.com/Xy48qM2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Keeping Track of the Working Set&lt;/strong&gt;
&lt;img src=&quot;https://i.imgur.com/QHoALdo.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;page-fault-frequency&quot;&gt;8. Page-Fault Frequency&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;More direct approach than WSS&lt;/li&gt;
  &lt;li&gt;Establish “acceptable” &lt;strong&gt;page-fault frequency&lt;/strong&gt; rate and use local replacement policy
    &lt;ul&gt;
      &lt;li&gt;If actual rate too low, process loses frame&lt;/li&gt;
      &lt;li&gt;If actual rate too high, process gains frame&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/ws4FmRA.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://i.imgur.com/ujHWuKv.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;memory-mapped-files&quot;&gt;(二) Memory-Mapped Files&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Memory-mapped file I/O allows file I/O to be treated as routine memory access by &lt;strong&gt;mapping&lt;/strong&gt; a disk block to a page in memory&lt;/li&gt;
  &lt;li&gt;A file is initially read using demand paging
    &lt;ul&gt;
      &lt;li&gt;A page-sized portion of the file is read from the file system into a physical page&lt;/li&gt;
      &lt;li&gt;Subsequent reads/writes to/from the file are treated as ordinary memory accesses&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Simplifies and speeds file access by driving file I/O through memory rather than &lt;code class=&quot;highlighter-rouge&quot;&gt;read()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;write()&lt;/code&gt; system calls&lt;/li&gt;
  &lt;li&gt;Also allows several processes to map the same file allowing the pages in memory to be shared&lt;/li&gt;
  &lt;li&gt;But when does written data make it to disk?
    &lt;ul&gt;
      &lt;li&gt;Periodically and / or at file &lt;code class=&quot;highlighter-rouge&quot;&gt;close()&lt;/code&gt; time&lt;/li&gt;
      &lt;li&gt;For example, when the pager scans for dirty pages&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/zWof78r.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;other-considerations----prepaging&quot;&gt;(三) Other Considerations – Prepaging&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;To reduce the large number of page faults that occurs at process startup&lt;/li&gt;
  &lt;li&gt;Prepage all or some of the pages a process will need, before they are referenced&lt;/li&gt;
  &lt;li&gt;But if prepaged pages are unused, I/O and memory was wasted&lt;/li&gt;
  &lt;li&gt;Assume s pages are prepaged and α of the pages is used
    &lt;ul&gt;
      &lt;li&gt;Is cost of &lt;code class=&quot;highlighter-rouge&quot;&gt;s * α&lt;/code&gt; save pages faults &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt; than the cost of prepaging &lt;code class=&quot;highlighter-rouge&quot;&gt;s * (1-α)&lt;/code&gt; unnecessary pages?&lt;/li&gt;
      &lt;li&gt;α near zero » prepaging loses&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;other-issues&quot;&gt;(四) Other Issues&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/289vIx7.png&quot; alt=&quot;&quot; /&gt;
—
&lt;img src=&quot;https://i.imgur.com/AzOr7n2.png&quot; alt=&quot;&quot; /&gt;
—
&lt;img src=&quot;https://i.imgur.com/9ZuU18h.png&quot; alt=&quot;&quot; /&gt;
—
&lt;img src=&quot;https://i.imgur.com/cHTpyGG.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Jun 2017 08:00:00 +0800</pubDate>
        <link>http://shouzo.github.io/2017/06/15/linux_system/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/06/15/linux_system/</guid>
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
      </item>
    
      <item>
        <title>20170608 [學習筆記] Linux 系統程式 (14)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;一、作業系統&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#background&quot; id=&quot;markdown-toc-background&quot;&gt;(一) Background&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#virtual-address-space&quot; id=&quot;markdown-toc-virtual-address-space&quot;&gt;(二) Virtual Address Space&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#demand-paging&quot; id=&quot;markdown-toc-demand-paging&quot;&gt;(三) Demand Paging&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#valid-invalid-bit&quot; id=&quot;markdown-toc-valid-invalid-bit&quot;&gt;1. Valid-Invalid Bit&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#example&quot; id=&quot;markdown-toc-example&quot;&gt;2. Example&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#optimizations&quot; id=&quot;markdown-toc-optimizations&quot;&gt;3. Optimizations&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#page-fault&quot; id=&quot;markdown-toc-page-fault&quot;&gt;(四) Page Fault&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#aspects-of-demand-paging&quot; id=&quot;markdown-toc-aspects-of-demand-paging&quot;&gt;1. Aspects of Demand Paging&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#instruction-restart&quot; id=&quot;markdown-toc-instruction-restart&quot;&gt;2. Instruction Restart&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#performance-of-demand-paging&quot; id=&quot;markdown-toc-performance-of-demand-paging&quot;&gt;Performance of Demand Paging&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#copy-on-write&quot; id=&quot;markdown-toc-copy-on-write&quot;&gt;(五) Copy-on-Write&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#page-replacement&quot; id=&quot;markdown-toc-page-replacement&quot;&gt;(六) Page Replacement&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#what-happens-if-there-is-no-free-frame&quot; id=&quot;markdown-toc-what-happens-if-there-is-no-free-frame&quot;&gt;1. What Happens if There is no Free Frame?&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#basic-page-replacement&quot; id=&quot;markdown-toc-basic-page-replacement&quot;&gt;2. Basic Page Replacement&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#page-and-frame-replacement-algorithms&quot; id=&quot;markdown-toc-page-and-frame-replacement-algorithms&quot;&gt;3. Page and Frame Replacement Algorithms&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#first-in-first-out-fifo-algorithm&quot; id=&quot;markdown-toc-first-in-first-out-fifo-algorithm&quot;&gt;(1) First-In-First-Out (FIFO) Algorithm&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#optimal-algorithm&quot; id=&quot;markdown-toc-optimal-algorithm&quot;&gt;(2) Optimal Algorithm&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#least-recently-used-lru-algorithm&quot; id=&quot;markdown-toc-least-recently-used-lru-algorithm&quot;&gt;(3) Least Recently Used (LRU) Algorithm&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#lru-approximation-algorithms&quot; id=&quot;markdown-toc-lru-approximation-algorithms&quot;&gt;(4) LRU Approximation Algorithms&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#counting-algorithms&quot; id=&quot;markdown-toc-counting-algorithms&quot;&gt;(5) Counting Algorithms&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#page-buffering-algorithms&quot; id=&quot;markdown-toc-page-buffering-algorithms&quot;&gt;(6) Page-Buffering Algorithms&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;一、作業系統&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;課堂講義
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170608/ch09.pdf&quot;&gt;Chapter 9: Virtual-Memory Management&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;background&quot;&gt;(一) Background&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Code needs to be in memory to execute, but entire program rarely used
    &lt;ul&gt;
      &lt;li&gt;Error code, unusual routines, large data structures&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Entire program code not needed at same time&lt;/li&gt;
  &lt;li&gt;Consider ability to execute partially-loaded program
    &lt;ul&gt;
      &lt;li&gt;Program no longer constrained by limits of physical memory&lt;/li&gt;
      &lt;li&gt;Program and programs could be larger than physical memory&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Virtual memory&lt;/strong&gt; – separation of user logical memory from physical memory
    &lt;ul&gt;
      &lt;li&gt;Only part of the program needs to be in memory for execution&lt;/li&gt;
      &lt;li&gt;Logical address space can therefore be much larger than physical address space&lt;/li&gt;
      &lt;li&gt;Allows address spaces to be shared by several processes&lt;/li&gt;
      &lt;li&gt;Allows for more efficient process creation&lt;/li&gt;
      &lt;li&gt;More programs running concurrently&lt;/li&gt;
      &lt;li&gt;Less I/O needed to load or swap processes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Virtual memory can be implemented via
    &lt;ul&gt;
      &lt;li&gt;Demand paging&lt;/li&gt;
      &lt;li&gt;Demand segmentation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;virtual-address-space&quot;&gt;(二) Virtual Address Space&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/DkDhsAx.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enables &lt;strong&gt;sparse&lt;/strong&gt; address spaces with holes left for growth, dynamically linked libraries, etc&lt;/li&gt;
  &lt;li&gt;System libraries shared via mapping into virtual address space&lt;/li&gt;
  &lt;li&gt;Shared memory by mapping pages read-write into virtual address space&lt;/li&gt;
  &lt;li&gt;Pages can be shared during &lt;code class=&quot;highlighter-rouge&quot;&gt;fork()&lt;/code&gt;, speeding process creation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/3jsjqeH.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;demand-paging&quot;&gt;(三) Demand Paging&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Could bring entire process into memory at load time&lt;/li&gt;
  &lt;li&gt;Or bring a page into memory only when it is needed
    &lt;ul&gt;
      &lt;li&gt;Less I/O needed, no unnecessary I/O&lt;/li&gt;
      &lt;li&gt;Less memory needed&lt;/li&gt;
      &lt;li&gt;Faster response&lt;/li&gt;
      &lt;li&gt;More users&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Page is needed » reference to it
    &lt;ul&gt;
      &lt;li&gt;invalid reference » abort&lt;/li&gt;
      &lt;li&gt;not-in-memory » bring to memory&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Lazy swapper&lt;/strong&gt; – never swaps a page into memory unless page will be needed
    &lt;ul&gt;
      &lt;li&gt;Swapper that deals with pages is a &lt;strong&gt;pager&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/aLRTern.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;valid-invalid-bit&quot;&gt;1. Valid-Invalid Bit&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;With each page table entry a valid–invalid bit is associated (&lt;strong&gt;v&lt;/strong&gt; » in-memory – &lt;strong&gt;memory resident&lt;/strong&gt;, &lt;strong&gt;i&lt;/strong&gt; » not-in-memory)&lt;/li&gt;
  &lt;li&gt;Initially valid–invalid bit is set to &lt;strong&gt;i&lt;/strong&gt; on all entries&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/0Fk929T.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;example&quot;&gt;2. Example&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Memory access time = 200 nanoseconds&lt;/li&gt;
  &lt;li&gt;Average page-fault service time = 8 milliseconds
    &lt;blockquote&gt;
      &lt;p&gt;EAT = (1 – p) x 200 + p (8 milliseconds)
= (1 – p) x 200 + p x 8,000,000
= 200 + p x 7,999,800&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;If one access out of 1,000 causes a page fault, then EAT = 8.2 microseconds. (This is a slowdown by a factor of 40)&lt;/li&gt;
  &lt;li&gt;If want performance degradation &amp;lt; 10 percent
    &lt;ul&gt;
      &lt;li&gt;220 &amp;gt; 200 + 7,999,800 x p&lt;/li&gt;
      &lt;li&gt;20 &amp;gt; 7,999,800 x p&lt;/li&gt;
      &lt;li&gt;p &amp;lt; .0000025 (&amp;lt; one page fault in every 400,000 memory accesses)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;optimizations&quot;&gt;3. Optimizations&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Copy entire process image to swap space at process load time
    &lt;ul&gt;
      &lt;li&gt;Then page in and out of swap space&lt;/li&gt;
      &lt;li&gt;Used in older BSD Unix&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Demand page in from program binary on disk, but discard rather than paging out when freeing frame
    &lt;ul&gt;
      &lt;li&gt;Used in Solaris and current BSD&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;page-fault&quot;&gt;(四) Page Fault&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;If there is a reference to a page, first reference to that page will trap to operating system
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;page fault&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Operating system looks at another table to decide
    &lt;ul&gt;
      &lt;li&gt;Invalid reference » abort&lt;/li&gt;
      &lt;li&gt;Just not in memory&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Get empty frame&lt;/li&gt;
  &lt;li&gt;Swap page into frame via scheduled disk operation&lt;/li&gt;
  &lt;li&gt;Reset tables to indicate page now in memory Set validation bit = &lt;strong&gt;v&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Restart the instruction that caused the page fault&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/98V6oNY.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;aspects-of-demand-paging&quot;&gt;1. Aspects of Demand Paging&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Extreme case – start process with no pages in memory
    &lt;ul&gt;
      &lt;li&gt;OS sets instruction pointer to first instruction of process, non-memory-resident -&amp;gt; page fault&lt;/li&gt;
      &lt;li&gt;And for every other process pages on first access&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Pure demand paging&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Actually, a given instruction could access multiple pages -&amp;gt; multiple page faults
    &lt;ul&gt;
      &lt;li&gt;Pain decreased because of &lt;strong&gt;locality of reference&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Hardware support needed for demand paging
    &lt;ul&gt;
      &lt;li&gt;Page table with valid / invalid bit&lt;/li&gt;
      &lt;li&gt;Secondary memory (swap device with &lt;strong&gt;swap space&lt;/strong&gt;)&lt;/li&gt;
      &lt;li&gt;Instruction restart&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;instruction-restart&quot;&gt;2. Instruction Restart&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Consider an instruction that could access several different locations
    &lt;ul&gt;
      &lt;li&gt;block move&lt;/li&gt;
      &lt;li&gt;auto increment/decrement location&lt;/li&gt;
      &lt;li&gt;Restart the whole operation?
        &lt;ul&gt;
          &lt;li&gt;What if source and destination overlap?&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;performance-of-demand-paging&quot;&gt;Performance of Demand Paging&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Stages in Demand Paging
    &lt;blockquote&gt;
      &lt;ol&gt;
        &lt;li&gt;Trap to the operating system&lt;/li&gt;
        &lt;li&gt;Save the user registers and process state&lt;/li&gt;
        &lt;li&gt;Determine that the interrupt was a page fault&lt;/li&gt;
        &lt;li&gt;Check that the page reference was legal and determine the location of the page on the disk&lt;/li&gt;
        &lt;li&gt;Issue a read from the disk to a free frame:
(1) Wait in a queue for this device until the read request is serviced
(2) Wait for the device seek and/or latency time
(3) Begin the transfer of the page to a free frame&lt;/li&gt;
        &lt;li&gt;While waiting, allocate the CPU to some other user&lt;/li&gt;
        &lt;li&gt;Receive an interrupt from the disk I/O subsystem (I/O completed)&lt;/li&gt;
        &lt;li&gt;Save the registers and process state for the other user&lt;/li&gt;
        &lt;li&gt;Determine that the interrupt was from the disk&lt;/li&gt;
        &lt;li&gt;Correct the page table and other tables to show page is now in memory&lt;/li&gt;
        &lt;li&gt;Wait for the CPU to be allocated to this process again&lt;/li&gt;
        &lt;li&gt;Restore the user registers, process state, and new page table, and then resume the interrupted instruction&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/HA817pb.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;copy-on-write&quot;&gt;(五) Copy-on-Write&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Copy-on-Write&lt;/strong&gt; (COW) allows both parent and child processes to initially share the same pages in memory
    &lt;ul&gt;
      &lt;li&gt;If either process modifies a shared page, only then is the page copied&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;COW allows more efficient process creation as only modified pages are copied&lt;/li&gt;
  &lt;li&gt;In general, free pages are allocated from a &lt;strong&gt;pool&lt;/strong&gt; of &lt;strong&gt;zero-fill-on-demand&lt;/strong&gt; pages
    &lt;ul&gt;
      &lt;li&gt;Why zero-out a page before allocating it?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vfork()&lt;/code&gt; variation on &lt;code class=&quot;highlighter-rouge&quot;&gt;fork()&lt;/code&gt; system call has parent suspend and child using copy-on-write address space of parent
    &lt;ul&gt;
      &lt;li&gt;Designed to have child call &lt;code class=&quot;highlighter-rouge&quot;&gt;exec()&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Very efficient&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/LABMPPo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;page-replacement&quot;&gt;(六) Page Replacement&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Prevent over-allocation of memory by modifying page-fault service routine to include page replacement&lt;/li&gt;
  &lt;li&gt;Use &lt;strong&gt;modify (dirty) bit&lt;/strong&gt; to reduce overhead of page transfers – only modified pages are written to disk&lt;/li&gt;
  &lt;li&gt;Page replacement completes separation between logical memory and physical memory – large virtual memory can be provided on a smaller physical memory&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;what-happens-if-there-is-no-free-frame&quot;&gt;1. What Happens if There is no Free Frame?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Used up by process pages&lt;/li&gt;
  &lt;li&gt;Also in demand from the kernel, I/O buffers, etc&lt;/li&gt;
  &lt;li&gt;How much to allocate to each?&lt;/li&gt;
  &lt;li&gt;Page replacement – find some page in memory, but not really in use, page it out
    &lt;ul&gt;
      &lt;li&gt;Algorithm – terminate? swap out? replace the page?&lt;/li&gt;
      &lt;li&gt;Performance – want an algorithm which will result in minimum number of page faults&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Same page may be brought into memory several times&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/eFpQyPv.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;basic-page-replacement&quot;&gt;2. Basic Page Replacement&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Find the location of the desired page on disk&lt;/li&gt;
    &lt;li&gt;Find a free frame:
      &lt;blockquote&gt;
        &lt;p&gt;a. If there is a free frame, use it
b. If there is no free frame, use a page replacement algorithm to select a &lt;strong&gt;victim frame&lt;/strong&gt;
c. Write victim frame to disk if dirty&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/li&gt;
    &lt;li&gt;Bring the desired page into the (newly) free frame; update the page and frame tables&lt;/li&gt;
    &lt;li&gt;Continue the process by restarting the instruction that caused the trap
      &lt;ul&gt;
        &lt;li&gt;Note now potentially 2 page transfers for page fault – increasing EAT&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Hm6MvuN.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;page-and-frame-replacement-algorithms&quot;&gt;3. Page and Frame Replacement Algorithms&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Frame-allocation algorithm&lt;/strong&gt; determines
    &lt;ul&gt;
      &lt;li&gt;How many frames to give each process&lt;/li&gt;
      &lt;li&gt;Which frames to replace&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Page-replacement algorithm&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Want lowest page-fault rate on both first access and re-access&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Evaluate algorithm by running it on a particular string of memory references (reference string) and computing the number of page faults on that string
    &lt;ul&gt;
      &lt;li&gt;String is just page numbers, not full addresses&lt;/li&gt;
      &lt;li&gt;Repeated access to the same page does not cause a page fault&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;first-in-first-out-fifo-algorithm&quot;&gt;(1) First-In-First-Out (FIFO) Algorithm&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/cSezcCO.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://i.imgur.com/NVa4BTe.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://i.imgur.com/6VeXbGw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;optimal-algorithm&quot;&gt;(2) Optimal Algorithm&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Replace page that will not be used for longest period of time
    &lt;ul&gt;
      &lt;li&gt;9 is optimal for the example on the next slide&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How do you know this?
    &lt;ul&gt;
      &lt;li&gt;Can’t read the future&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Used for measuring how well your algorithm performs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/1jc2ngr.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;least-recently-used-lru-algorithm&quot;&gt;(3) Least Recently Used (LRU) Algorithm&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Use past knowledge rather than future&lt;/li&gt;
  &lt;li&gt;Replace page that has not been used in the most amount of time&lt;/li&gt;
  &lt;li&gt;Associate time of last use with each page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/RiLxhrF.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Counter implementation
    &lt;ul&gt;
      &lt;li&gt;Every page entry has a counter; every time page is referenced through this entry, copy the clock into the counter&lt;/li&gt;
      &lt;li&gt;When a page needs to be changed, look at the counters to find smallest value
        &lt;ul&gt;
          &lt;li&gt;Search through table needed&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Stack implementation
    &lt;ul&gt;
      &lt;li&gt;Keep a stack of page numbers in a double link form:&lt;/li&gt;
      &lt;li&gt;Page referenced:
        &lt;ul&gt;
          &lt;li&gt;move it to the top&lt;/li&gt;
          &lt;li&gt;requires 6 pointers to be changed&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;But each update more expensive&lt;/li&gt;
      &lt;li&gt;No search for replacement&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;LRU and OPT are cases of &lt;strong&gt;stack algorithms&lt;/strong&gt; that don’t have Belady’s Anomaly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/yvsGPvm.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;lru-approximation-algorithms&quot;&gt;(4) LRU Approximation Algorithms&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;LRU needs special hardware and still slow&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reference bit&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;With each page associate a bit, initially = 0&lt;/li&gt;
      &lt;li&gt;When page is referenced bit set to 1&lt;/li&gt;
      &lt;li&gt;Replace any with reference bit = 0 (if one exists)
        &lt;ul&gt;
          &lt;li&gt;We do not know the order, however&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Second-chance algorithm&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Generally FIFO, plus hardware-provided reference bit&lt;/li&gt;
      &lt;li&gt;Clock replacement&lt;/li&gt;
      &lt;li&gt;If page to be replaced has
        &lt;ul&gt;
          &lt;li&gt;Reference bit = 0 -&amp;gt; replace it&lt;/li&gt;
          &lt;li&gt;reference bit = 1 then:
            &lt;ul&gt;
              &lt;li&gt;set reference bit 0, leave page in memory&lt;/li&gt;
              &lt;li&gt;replace next page, subject to same rules&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/jInNXqt.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;counting-algorithms&quot;&gt;(5) Counting Algorithms&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Keep a counter of the number of references that have been made to each page
    &lt;ul&gt;
      &lt;li&gt;Not common&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;LFU Algorithm&lt;/strong&gt;: replaces page with smallest count&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MFU Algorithm&lt;/strong&gt;: based on the argument that the page with the smallest count was probably just brought in and has yet to be used&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;page-buffering-algorithms&quot;&gt;(6) Page-Buffering Algorithms&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Keep a pool of free frames, always
    &lt;ul&gt;
      &lt;li&gt;Then frame available when needed, not found at fault time&lt;/li&gt;
      &lt;li&gt;Read page into free frame and select victim to evict and add to free pool&lt;/li&gt;
      &lt;li&gt;When convenient, evict victim&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Possibly, keep list of modified pages
    &lt;ul&gt;
      &lt;li&gt;When backing store otherwise idle, write pages there and set to non-dirty&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Possibly, keep free frame contents intact and note what is in them
    &lt;ul&gt;
      &lt;li&gt;If referenced again before reused, no need to load contents again from disk&lt;/li&gt;
      &lt;li&gt;Generally useful to reduce penalty if wrong victim frame selected&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 08 Jun 2017 08:00:00 +0800</pubDate>
        <link>http://shouzo.github.io/2017/06/08/linux_system/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/06/08/linux_system/</guid>
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
      </item>
    
      <item>
        <title>20170601 [學習筆記] Linux 系統程式 (13)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;一、作業系統&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#paging&quot; id=&quot;markdown-toc-paging&quot;&gt;(一) Paging&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#address-translation-scheme&quot; id=&quot;markdown-toc-address-translation-scheme&quot;&gt;(二) Address Translation Scheme&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#implementation-of-page-table&quot; id=&quot;markdown-toc-implementation-of-page-table&quot;&gt;(三) Implementation of Page Table&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#effective-access-time&quot; id=&quot;markdown-toc-effective-access-time&quot;&gt;(四) Effective Access Time&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#memory-protection&quot; id=&quot;markdown-toc-memory-protection&quot;&gt;(五) Memory Protection&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#shared-pages&quot; id=&quot;markdown-toc-shared-pages&quot;&gt;(六) Shared Pages&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#structure-of-the-page-table&quot; id=&quot;markdown-toc-structure-of-the-page-table&quot;&gt;(七) Structure of the Page Table&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#hierarchical-page-tables&quot; id=&quot;markdown-toc-hierarchical-page-tables&quot;&gt;Hierarchical Page Tables&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#two-level-page-table-scheme&quot; id=&quot;markdown-toc-two-level-page-table-scheme&quot;&gt;Two-Level Page-Table Scheme&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#three-level-paging-scheme&quot; id=&quot;markdown-toc-three-level-paging-scheme&quot;&gt;Three-level Paging Scheme&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#hashed-page-tables&quot; id=&quot;markdown-toc-hashed-page-tables&quot;&gt;Hashed Page Tables&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#inverted-page-table&quot; id=&quot;markdown-toc-inverted-page-table&quot;&gt;Inverted Page Table&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;一、作業系統&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;課堂講義
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170601/ch08.pdf&quot;&gt;Chapter 8: Memory-Management Strategies&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;paging&quot;&gt;(一) Paging&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Physical address space of a process can be noncontiguous; process is allocated physical memory whenever the latter is available
    &lt;ul&gt;
      &lt;li&gt;Avoids external fragmentation&lt;/li&gt;
      &lt;li&gt;Avoids problem of varying sized memory chunks&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Divide physical memory into fixed-sized blocks called &lt;strong&gt;frames&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Size is power of 2, between 512 bytes and 16 Mbytes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Divide logical memory into blocks of same size called &lt;strong&gt;pages&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Keep track of all free frames&lt;/li&gt;
  &lt;li&gt;To run a program of size &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; pages, need to find &lt;code class=&quot;highlighter-rouge&quot;&gt;N&lt;/code&gt; free frames and load program&lt;/li&gt;
  &lt;li&gt;Set up a page table to translate logical to physical addresses&lt;/li&gt;
  &lt;li&gt;Backing store likewise split into pages&lt;/li&gt;
  &lt;li&gt;Still have Internal fragmentation&lt;/li&gt;
  &lt;li&gt;Calculating internal fragmentation
    &lt;ul&gt;
      &lt;li&gt;Page size = 2,048 bytes&lt;/li&gt;
      &lt;li&gt;Process size = 72,766 bytes&lt;/li&gt;
      &lt;li&gt;35 pages + 1,086 bytes&lt;/li&gt;
      &lt;li&gt;Internal fragmentation of 2,048 - 1,086 = 962 bytes&lt;/li&gt;
      &lt;li&gt;On average fragmentation = 1 / 2 frame size&lt;/li&gt;
      &lt;li&gt;So small frame sizes desirable?&lt;/li&gt;
      &lt;li&gt;But each page table entry takes memory to track&lt;/li&gt;
      &lt;li&gt;Page sizes growing over time
        &lt;ul&gt;
          &lt;li&gt;Solaris supports two page sizes – 8 KB and 4 MB&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Process view and physical memory now very different&lt;/li&gt;
  &lt;li&gt;By implementation process can only access its own memory&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;address-translation-scheme&quot;&gt;(二) Address Translation Scheme&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/rbuMKKY.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Address generated by CPU is divided into
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Page number &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt;&lt;/strong&gt; – used as an index into a &lt;strong&gt;page table&lt;/strong&gt; which contains base address of each page in physical memory&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Page offset &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt;&lt;/strong&gt; – combined with base address to define the physical memory address that is sent to the memory unit&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/hY3zgAC.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://i.imgur.com/ASgBcxX.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://i.imgur.com/tLepGb4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;implementation-of-page-table&quot;&gt;(三) Implementation of Page Table&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Page table is kept in main memory&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Page-table base register (PTBR)&lt;/strong&gt; points to the page table&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Page-table length register (PTLR)&lt;/strong&gt; indicates size of the page table&lt;/li&gt;
  &lt;li&gt;In this scheme every data/instruction access requires two memory accesses
    &lt;ul&gt;
      &lt;li&gt;One for the page table and one for the data / instruction&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The two memory access problem can be solved by the use of a special fast-lookup hardware cache called &lt;strong&gt;associative memory&lt;/strong&gt; or &lt;strong&gt;translation look-aside buffers (TLBs)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Some TLBs store &lt;strong&gt;address-space identifiers (ASIDs)&lt;/strong&gt; in each TLB entry – uniquely identifies each process to provide address-space protection for that process
    &lt;ul&gt;
      &lt;li&gt;Otherwise need to flush at every context switch&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;TLBs typically small (64 to 1,024 entries)&lt;/li&gt;
  &lt;li&gt;On a TLB miss, value is loaded into the TLB for faster access next time
    &lt;ul&gt;
      &lt;li&gt;Replacement policies must be considered&lt;/li&gt;
      &lt;li&gt;Some entries can be &lt;strong&gt;wired down&lt;/strong&gt; for permanent fast access&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/aH3Zg2J.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://i.imgur.com/923AOvB.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;effective-access-time&quot;&gt;(四) Effective Access Time&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Y0mMzTR.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;memory-protection&quot;&gt;(五) Memory Protection&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Memory protection implemented by associating protection bit with each frame to indicate if read-only or read-write access is allowed
    &lt;ul&gt;
      &lt;li&gt;Can also add more bits to indicate page execute-only, and so on&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Valid-invalid&lt;/strong&gt; bit attached to each entry in the page table
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;valid&lt;/code&gt; indicates that the associated page is in the process’ logical address space, and is thus a legal page&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;invalid&lt;/code&gt; indicates that the page is not in the process’ logical address space&lt;/li&gt;
      &lt;li&gt;Or use &lt;strong&gt;page-table length register (PTLR)&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Any violations result in a trap to the kernel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/3UtvoGB.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;shared-pages&quot;&gt;(六) Shared Pages&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Shared code&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;One copy of read-only (&lt;strong&gt;reentrant&lt;/strong&gt;) code shared among processes (i.e., text editors, compilers, window systems)&lt;/li&gt;
      &lt;li&gt;Similar to multiple threads sharing the same process space&lt;/li&gt;
      &lt;li&gt;Also useful for interprocess communication if sharing of read-write pages is allowed&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Private code and data&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Each process keeps a separate copy of the code and data&lt;/li&gt;
      &lt;li&gt;The pages for the private code and data can appear anywhere in the logical address space&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/JYNkQQT.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;structure-of-the-page-table&quot;&gt;(七) Structure of the Page Table&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Memory structures for paging can get huge using straight-forward methods
    &lt;ul&gt;
      &lt;li&gt;Consider a 32-bit logical address space as on modern computers&lt;/li&gt;
      &lt;li&gt;Page size of 4 KB (2^12^)&lt;/li&gt;
      &lt;li&gt;Page table would have 1 million entries (2^32^ / 2^12^)&lt;/li&gt;
      &lt;li&gt;If each entry is 4 bytes -&amp;gt; 4 MB of physical address space / memory for page table alone lot
        &lt;ul&gt;
          &lt;li&gt;Don’t want to allocate that contiguously in main memory&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Hierarchical Paging&lt;/li&gt;
  &lt;li&gt;Hashed Page Tables&lt;/li&gt;
  &lt;li&gt;Inverted Page Tables&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;hierarchical-page-tables&quot;&gt;Hierarchical Page Tables&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Break up the logical address space into multiple page tables&lt;/li&gt;
  &lt;li&gt;A simple technique is a two-level page table&lt;/li&gt;
  &lt;li&gt;We then page the page table&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;two-level-page-table-scheme&quot;&gt;Two-Level Page-Table Scheme&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/EXa669R.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Example&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;A logical address (on 32-bit machine with 1K page size) is divided into
        &lt;ul&gt;
          &lt;li&gt;a page number consisting of 22 bits&lt;/li&gt;
          &lt;li&gt;a page offset consisting of 10 bits&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Since the page table is paged, the page number is further divided into
        &lt;ul&gt;
          &lt;li&gt;a 12-bit page number&lt;/li&gt;
          &lt;li&gt;a 10-bit page offset&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Thus, a logical address is as follows
&lt;img src=&quot;http://i.imgur.com/uwG3NvI.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;where p 1 is an index into the outer page table, and p 2 is the displacement within the page of the inner page table&lt;/li&gt;
      &lt;li&gt;Known as &lt;strong&gt;forward-mapped page table&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;three-level-paging-scheme&quot;&gt;Three-level Paging Scheme&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/LYA2JD3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;hashed-page-tables&quot;&gt;Hashed Page Tables&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/itaf25z.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Common in address spaces &amp;gt; 32 bits&lt;/li&gt;
  &lt;li&gt;The virtual page number is hashed into a page table
    &lt;ul&gt;
      &lt;li&gt;This page table contains a chain of elements hashing to the same location&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Each element contains (1) the virtual page number (2) the value of the mapped page frame (3) a pointer to the next element&lt;/li&gt;
  &lt;li&gt;Virtual page numbers are compared in this chain searching for a match
    &lt;ul&gt;
      &lt;li&gt;If a match is found, the corresponding physical frame is extracted&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Variation for 64-bit addresses is &lt;strong&gt;clustered page tables&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Similar to hashed but each entry refers to several pages (such as 16) rather than 1&lt;/li&gt;
      &lt;li&gt;Especially useful for &lt;strong&gt;sparse&lt;/strong&gt; address spaces (where memory references are non-contiguous and scattered)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;inverted-page-table&quot;&gt;Inverted Page Table&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Rather than each process having a page table and keeping track of all possible logical pages, track all physical pages&lt;/li&gt;
  &lt;li&gt;One entry for each real page of memory&lt;/li&gt;
  &lt;li&gt;Entry consists of the virtual address of the page stored in that real memory location, with information about the process that owns that page&lt;/li&gt;
  &lt;li&gt;Decreases memory needed to store each page table, but increases time needed to search the table when a page reference occurs&lt;/li&gt;
  &lt;li&gt;Use hash table to limit the search to one — or at most a few — page-table entries
    &lt;ul&gt;
      &lt;li&gt;TLB can accelerate access&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;But how to implement shared memory?
    &lt;ul&gt;
      &lt;li&gt;One mapping of a virtual address to the shared physical address&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 01 Jun 2017 08:00:00 +0800</pubDate>
        <link>http://shouzo.github.io/2017/06/01/linux_system/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/06/01/linux_system/</guid>
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
      </item>
    
      <item>
        <title>20170525 [學習筆記] Linux 系統程式 (12)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;一、作業系統&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#contiguous-allocation&quot; id=&quot;markdown-toc-contiguous-allocation&quot;&gt;(一) Contiguous Allocation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#dynamic-storage-allocation-problem&quot; id=&quot;markdown-toc-dynamic-storage-allocation-problem&quot;&gt;(二) Dynamic Storage-Allocation Problem&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#fragmentation&quot; id=&quot;markdown-toc-fragmentation&quot;&gt;(三) Fragmentation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#segmentation&quot; id=&quot;markdown-toc-segmentation&quot;&gt;(四) Segmentation&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#segmentation-architecture&quot; id=&quot;markdown-toc-segmentation-architecture&quot;&gt;Segmentation Architecture&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;一、作業系統&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;課堂講義
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170525/ch08.pdf&quot;&gt;Chapter 8: Memory-Management Strategies&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;contiguous-allocation&quot;&gt;(一) Contiguous Allocation&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Main memory must support both OS and user processes&lt;/li&gt;
  &lt;li&gt;Limited resource, must allocate efficiently&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Contiguous allocation is one early method&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Main memory usually into two &lt;strong&gt;partitions&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Resident operating system, usually held in low memory with interrupt vector&lt;/li&gt;
      &lt;li&gt;User processes then held in high memory&lt;/li&gt;
      &lt;li&gt;Each process contained in single contiguous section of memory&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Relocation registers used to protect user processes from each other, and from changing operating-system code and data
    &lt;ul&gt;
      &lt;li&gt;Base register contains value of smallest physical address&lt;/li&gt;
      &lt;li&gt;Limit register contains range of logical addresses – each logical address must be less than the limit register&lt;/li&gt;
      &lt;li&gt;MMU maps logical address dynamically&lt;/li&gt;
      &lt;li&gt;Can then allow actions such as kernel code being &lt;code class=&quot;highlighter-rouge&quot;&gt;transient&lt;/code&gt; and kernel changing size&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/z3R2FCC.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Multiple-partition allocation
    &lt;ul&gt;
      &lt;li&gt;Degree of multiprogramming limited by number of partitions&lt;/li&gt;
      &lt;li&gt;Variable-partition sizes for efficiency (sized to a given process’ needs)&lt;/li&gt;
      &lt;li&gt;Hole – block of available memory; holes of various size are scattered throughout memory&lt;/li&gt;
      &lt;li&gt;When a process arrives, it is allocated memory from a hole large enough to accommodate it&lt;/li&gt;
      &lt;li&gt;Process exiting frees its partition, adjacent free partitions combined&lt;/li&gt;
      &lt;li&gt;Operating system maintains information about
        &lt;ul&gt;
          &lt;li&gt;(a) allocated partitions&lt;/li&gt;
          &lt;li&gt;(b) free partitions (hole)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/JQ1uTUe.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dynamic-storage-allocation-problem&quot;&gt;(二) Dynamic Storage-Allocation Problem&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;First-fit&lt;/strong&gt;：Allocate the &lt;code class=&quot;highlighter-rouge&quot;&gt;first&lt;/code&gt; hole that is big enough&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Best-fit&lt;/strong&gt;：Allocate the &lt;code class=&quot;highlighter-rouge&quot;&gt;smallest&lt;/code&gt; hole that is big enough; must search entire list, unless ordered by size
    &lt;ul&gt;
      &lt;li&gt;Produces the smallest leftover hole&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Worst-fit&lt;/strong&gt;：Allocate the &lt;code class=&quot;highlighter-rouge&quot;&gt;largest&lt;/code&gt; hole; must also search entire list
    &lt;ul&gt;
      &lt;li&gt;Produces the largest leftover hole&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;First-fit and best-fit better than worst-fit in terms of speed and storage utilization&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;fragmentation&quot;&gt;(三) Fragmentation&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;External Fragmentation&lt;/strong&gt; – total memory space exists to satisfy a request, but it is not contiguous&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Internal Fragmentation&lt;/strong&gt; – allocated memory may be slightly larger than requested memory; this size difference is memory internal to a partition, but not being used&lt;/li&gt;
  &lt;li&gt;First fit analysis reveals that given N blocks allocated, 0.5 N blocks lost to fragmentation
    &lt;ul&gt;
      &lt;li&gt;1/3 may be unusable -&amp;gt; &lt;strong&gt;50-percent rule&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reduce external fragmentation by &lt;strong&gt;compaction&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Shuffle memory contents to place all free memory together in one large block&lt;/li&gt;
      &lt;li&gt;Compaction is possible only if relocation is dynamic, and is done at execution time&lt;/li&gt;
      &lt;li&gt;I/O problem
        &lt;ul&gt;
          &lt;li&gt;Latch job in memory while it is involved in I/O&lt;/li&gt;
          &lt;li&gt;Do I/O only into OS buffers&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Now consider that backing store has same fragmentation problems&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;segmentation&quot;&gt;(四) Segmentation&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Memory-management scheme that supports user view of memory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/hiMN3YJ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A program is a collection of segments
    &lt;ul&gt;
      &lt;li&gt;A segment is a logical unit such as：&lt;code class=&quot;highlighter-rouge&quot;&gt;main program&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;procedure&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;function&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;method&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;local variables&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;global variables&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;common block&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;stack&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;symbol table&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;arrays&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/PKuwv70.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;segmentation-architecture&quot;&gt;Segmentation Architecture&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Logical address consists of a two tuple：&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;segment-number, offset&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Segment table&lt;/strong&gt; – maps two-dimensional physical addresses; each table entry has
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;base&lt;/strong&gt; – contains the starting physical address where the segments reside in memory&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;limit&lt;/strong&gt; – specifies the length of the segment&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Segment-table base register (STBR)&lt;/strong&gt; points to the segment table’s location in memory&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Segment-table length register (STLR)&lt;/strong&gt; indicates number of segments used by a program：&lt;code class=&quot;highlighter-rouge&quot;&gt;segment number s is legal if s &amp;lt; STLR&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Protection
    &lt;ul&gt;
      &lt;li&gt;With each entry in segment table associate
        &lt;ul&gt;
          &lt;li&gt;validation bit = 0 » illegal segment&lt;/li&gt;
          &lt;li&gt;read/write/execute privileges&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Protection bits associated with segments; code sharing occurs at segment level&lt;/li&gt;
  &lt;li&gt;Since segments vary in length, memory allocation is a dynamic storage-allocation problem&lt;/li&gt;
  &lt;li&gt;A segmentation example is shown in the following diagram&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/raq8eDi.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 25 May 2017 08:00:00 +0800</pubDate>
        <link>http://shouzo.github.io/2017/05/25/linux_system/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/05/25/linux_system/</guid>
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
      </item>
    
      <item>
        <title>20170519 [學習筆記] Linux 系統程式 (11)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;一、作業系統&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#deadlock-detection&quot; id=&quot;markdown-toc-deadlock-detection&quot;&gt;(一) Deadlock Detection&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#detection-algorithm&quot; id=&quot;markdown-toc-detection-algorithm&quot;&gt;(二) Detection Algorithm&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#recovery-from-deadlock&quot; id=&quot;markdown-toc-recovery-from-deadlock&quot;&gt;(三) Recovery from Deadlock&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#process-termination&quot; id=&quot;markdown-toc-process-termination&quot;&gt;1. Process Termination&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#resource-preemption&quot; id=&quot;markdown-toc-resource-preemption&quot;&gt;2. Resource Preemption&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#memory-management&quot; id=&quot;markdown-toc-memory-management&quot;&gt;(四) Memory-Management&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#linux-&quot; id=&quot;markdown-toc-linux-&quot;&gt;二、Linux 程式設計&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#function&quot; id=&quot;markdown-toc-function&quot;&gt;(一) 函數 (Function)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#command&quot; id=&quot;markdown-toc-command&quot;&gt;(二) 命令 (command)&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#example-1&quot; id=&quot;markdown-toc-example-1&quot;&gt;Example 1&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#example-2&quot; id=&quot;markdown-toc-example-2&quot;&gt;Example 2&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;其他命令&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#command---find&quot; id=&quot;markdown-toc-command---find&quot;&gt;(三) 命令 (command) - find&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#command---grep&quot; id=&quot;markdown-toc-command---grep&quot;&gt;(四) 命令 (command) - grep&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;正規表示式&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;一、作業系統&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;課堂講義
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170518/ch07.pdf&quot;&gt;Chapter 7: Deadlocks&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170518/ch08.pdf&quot;&gt;Chapter 8: Memory-Management Strategies&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;參考資料
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www3.nd.edu/~dthain/courses/classconf/worts2006/WangLiu.ppt&quot;&gt;Static Linking VS. Dynamic Linking&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;deadlock-detection&quot;&gt;(一) Deadlock Detection&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Allow system to enter deadlock state&lt;/li&gt;
  &lt;li&gt;Detection algorithm&lt;/li&gt;
  &lt;li&gt;Recovery scheme&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;detection-algorithm&quot;&gt;(二) Detection Algorithm&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/LRO7qdP.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://i.imgur.com/ZG7BUjD.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/PBYJ62y.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://i.imgur.com/rt4bsYL.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Usage&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;When, and how often, to invoke depends on
        &lt;ul&gt;
          &lt;li&gt;How often a deadlock is likely to occur?&lt;/li&gt;
          &lt;li&gt;How many processes will need to be rolled back?
            &lt;ul&gt;
              &lt;li&gt;one for each disjoint cycle&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;If detection algorithm is invoked arbitrarily, there may be many cycles in the resource graph and so we would not be able to tell which of the many deadlocked processes “caused” the deadlock.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;recovery-from-deadlock&quot;&gt;(三) Recovery from Deadlock&lt;/h3&gt;
&lt;h4 id=&quot;process-termination&quot;&gt;1. Process Termination&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Abort all deadlocked processes&lt;/li&gt;
  &lt;li&gt;Abort one process at a time until the deadlock cycle is eliminated&lt;/li&gt;
  &lt;li&gt;In which order should we choose to abort?
    &lt;ol&gt;
      &lt;li&gt;Priority of the process&lt;/li&gt;
      &lt;li&gt;How long process has computed, and how much longer to completion&lt;/li&gt;
      &lt;li&gt;Resources the process has used&lt;/li&gt;
      &lt;li&gt;Resources process needs to complete&lt;/li&gt;
      &lt;li&gt;How many processes will need to be terminated&lt;/li&gt;
      &lt;li&gt;Is process interactive or batch?&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;resource-preemption&quot;&gt;2. Resource Preemption&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Selecting a victim&lt;/strong&gt; - minimize cost&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Rollback&lt;/strong&gt; - return to some safe state, restart process for that state&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Starvation&lt;/strong&gt; - same process may always be picked as victim, include number of rollback in cost factor&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;memory-management&quot;&gt;(四) Memory-Management&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Program must be brought (from disk) into memory and placed within a process for it to be run&lt;/li&gt;
  &lt;li&gt;Main memory and registers are only storage CPU can access directly&lt;/li&gt;
  &lt;li&gt;Memory unit only sees a stream of &lt;code class=&quot;highlighter-rouge&quot;&gt;addresses + read requests&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;address + data and write requests&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Register access in one CPU clock (or less)&lt;/li&gt;
  &lt;li&gt;Main memory can take many cycles, causing a &lt;strong&gt;stall&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cache&lt;/strong&gt; sits between main memory and CPU registers&lt;/li&gt;
  &lt;li&gt;Protection of memory required to ensure correct operation&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Base and Limit Registers&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;A pair of &lt;strong&gt;base&lt;/strong&gt; and limit &lt;strong&gt;registers&lt;/strong&gt; define the logical address space&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;CPU must check every memory access generated in user mode to be sure it is between base and limit for that user
 &lt;img src=&quot;https://i.imgur.com/mxLWZHF.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;Hardware Address Protection with Base and Limit Registers
 &lt;img src=&quot;https://i.imgur.com/ztutE6h.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Address Binding&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Programs on disk, ready to be brought into memory to execute form an &lt;strong&gt;input queue&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;Without support, must be loaded into address 0000&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Inconvenient to have first user process physical address always at 0000
        &lt;ul&gt;
          &lt;li&gt;How can it not be?&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Further, addresses represented in different ways at different stages of a program’s life
        &lt;ul&gt;
          &lt;li&gt;Source code addresses usually symbolic&lt;/li&gt;
          &lt;li&gt;Compiled code addresses &lt;strong&gt;bind&lt;/strong&gt; to relocatable addresses
            &lt;ul&gt;
              &lt;li&gt;i.e. “14 bytes from beginning of this module”&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Linker or loader will bind relocatable addresses to absolute addresses
            &lt;ul&gt;
              &lt;li&gt;i.e. 74014&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;Each binding maps one address space to another&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/cXzBuNp.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Logical vs. Physical Address Space&lt;/strong&gt;
&lt;img src=&quot;https://i.imgur.com/LwA18UW.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Memory-Management Unit (MMU)&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Hardware device that at run time maps virtual to physical address&lt;/li&gt;
      &lt;li&gt;Many methods possible, covered in the rest of this chapter&lt;/li&gt;
      &lt;li&gt;To start, consider simple scheme where the value in the relocation register is added to every address generated by a user process at the time it is sent to memory
        &lt;ul&gt;
          &lt;li&gt;Base register now called &lt;strong&gt;relocation register&lt;/strong&gt;&lt;/li&gt;
          &lt;li&gt;MS-DOS on Intel 80x86 used 4 relocation registers&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;The user program deals with logical addresses; it never sees the real physical addresses
        &lt;ul&gt;
          &lt;li&gt;Execution-time binding occurs when reference is made to location in memory&lt;/li&gt;
          &lt;li&gt;Logical address bound to physical addresses&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dynamic relocation&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Using a relocation register
&lt;img src=&quot;https://i.imgur.com/RICsWcf.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dynamic Linking&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Static linking&lt;/strong&gt; - system libraries and program code combined by the loader into the binary program image&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Dynamic linking&lt;/strong&gt; – linking postponed until execution time&lt;/li&gt;
      &lt;li&gt;Small piece of code, &lt;strong&gt;stub&lt;/strong&gt;, used to locate the appropriate memory-resident library routine&lt;/li&gt;
      &lt;li&gt;Stub replaces itself with the address of the routine, and executes the routine&lt;/li&gt;
      &lt;li&gt;Operating system checks if routine is in processes’ memory address
        &lt;ul&gt;
          &lt;li&gt;If not in address space, add to address space&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Dynamic linking is particularly useful for libraries&lt;/li&gt;
      &lt;li&gt;System also known as &lt;strong&gt;shared libraries&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;Consider applicability to patching system libraries
        &lt;ul&gt;
          &lt;li&gt;Versioning may be needed&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Swapping&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;A process can be swapped temporarily out of memory to a backing store, and then brought back into memory for continued execution
        &lt;ul&gt;
          &lt;li&gt;Total physical memory space of processes can exceed physical memory&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Backing store&lt;/strong&gt; – fast disk large enough to accommodate copies of all memory images for all users; must provide direct access to these memory images&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Roll out, roll in&lt;/strong&gt; – swapping variant used for priority-based scheduling algorithms; lower-priority process is swapped out so higher-priority process can be loaded and executed&lt;/li&gt;
      &lt;li&gt;Major part of swap time is transfer time; total transfer time is directly proportional to the amount of memory swapped&lt;/li&gt;
      &lt;li&gt;System maintains a &lt;strong&gt;ready queue&lt;/strong&gt; of ready-to-run processes which have memory images on disk&lt;/li&gt;
      &lt;li&gt;Does the swapped out process need to swap back in to same physical addresses?
        &lt;ul&gt;
          &lt;li&gt;Depends on address binding method
            &lt;ul&gt;
              &lt;li&gt;Plus consider pending &lt;code class=&quot;highlighter-rouge&quot;&gt;I/O&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; from process memory space&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Modified versions of swapping are found on many systems (i.e., UNIX, Linux, and Windows)
        &lt;ul&gt;
          &lt;li&gt;Swapping normally disabled&lt;/li&gt;
          &lt;li&gt;Started if more than threshold amount of memory allocated&lt;/li&gt;
          &lt;li&gt;Disabled again once memory demand reduced below threshold&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/hptlmlg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;linux-&quot;&gt;二、Linux 程式設計&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;課程簡報
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170512/Linux_shell.pdf&quot;&gt;Linux_shell&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170512/Shell_practice.pdf&quot;&gt;Shell_practice&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;參考資料
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://linux.vbird.org/linux_basic/0340bashshell-scripts.php#script_why&quot;&gt;學習 Shell Scripts&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;function&quot;&gt;(一) 函數 (Function)&lt;/h3&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

foo&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Function foo is excuting&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Script starting&quot;&lt;/span&gt;
foo
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Script ending&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;執行結果
&lt;img src=&quot;https://i.imgur.com/WPrf3XF.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;command&quot;&gt;(二) 命令 (command)&lt;/h3&gt;
&lt;h5 id=&quot;example-1&quot;&gt;Example 1&lt;/h5&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;x &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;1 2 3
&lt;span class=&quot;k&quot;&gt;do 
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;before &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;continue
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;after &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;執行結果
&lt;img src=&quot;https://i.imgur.com/3WgXZOC.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;example-2&quot;&gt;Example 2&lt;/h5&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;x &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;1 2 3
&lt;span class=&quot;k&quot;&gt;do 
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;before &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;break
    echo &lt;/span&gt;after &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;執行結果
&lt;img src=&quot;https://i.imgur.com/DVLkGCC.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-1&quot;&gt;其他命令&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;exit&lt;/li&gt;
  &lt;li&gt;export&lt;/li&gt;
  &lt;li&gt;expr&lt;/li&gt;
  &lt;li&gt;printf&lt;/li&gt;
  &lt;li&gt;return&lt;/li&gt;
  &lt;li&gt;set&lt;/li&gt;
  &lt;li&gt;shift&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;command---find&quot;&gt;(三) 命令 (command) - find&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;-atime N           檔案最後存取時間是 N 天以前
-mtime N           檔案最後修改時間是 N 天以前
-newer otherfle    檔案比 otherfle 還要新
-name pattern      搜尋 pattern 名稱的檔案
-type C            檔案型態是 C 的檔案
-user username     檔案為 username 使用者所擁有
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;find / -name test -print
find . -newer test -print&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;command---grep&quot;&gt;(四) 命令 (command) - grep&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;-c    不印出吻合的那一行,只印出吻合的數量
-E    開啟延伸表示式
-h    輸出的結果不顯示檔案名稱
-I    忽略大小寫
-l    只列出檔案名稱
-v    反向比對,排除吻合樣本的結果
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;grep in word.txt
grep -c in word.txt word2.txt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;section-2&quot;&gt;正規表示式&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/ZL5A5xf.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://i.imgur.com/rLplSSh.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 19 May 2017 08:00:00 +0800</pubDate>
        <link>http://shouzo.github.io/2017/05/19/linux_system/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/05/19/linux_system/</guid>
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
      </item>
    
      <item>
        <title>20170512 [學習筆記] Linux 系統程式 (10)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;一、作業系統&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#deadlock-characterization&quot; id=&quot;markdown-toc-deadlock-characterization&quot;&gt;(一) Deadlock Characterization&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#resource-allocation-graph&quot; id=&quot;markdown-toc-resource-allocation-graph&quot;&gt;(二) Resource-Allocation Graph&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#example&quot; id=&quot;markdown-toc-example&quot;&gt;1. Example&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#basic-facts&quot; id=&quot;markdown-toc-basic-facts&quot;&gt;2. Basic Facts&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#methods-for-handling-deadlocks&quot; id=&quot;markdown-toc-methods-for-handling-deadlocks&quot;&gt;3. Methods for Handling Deadlocks&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#deadlock-prevention&quot; id=&quot;markdown-toc-deadlock-prevention&quot;&gt;(三) Deadlock Prevention&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#example-1&quot; id=&quot;markdown-toc-example-1&quot;&gt;1. Example&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#deadlock-avoidance&quot; id=&quot;markdown-toc-deadlock-avoidance&quot;&gt;2. Deadlock Avoidance&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#safe-state&quot; id=&quot;markdown-toc-safe-state&quot;&gt;3. Safe State&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#basic-facts-1&quot; id=&quot;markdown-toc-basic-facts-1&quot;&gt;4. Basic Facts&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#safe-unsafe-deadlock-state&quot; id=&quot;markdown-toc-safe-unsafe-deadlock-state&quot;&gt;5. Safe, Unsafe, Deadlock State&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#avoidance-algorithms&quot; id=&quot;markdown-toc-avoidance-algorithms&quot;&gt;6. Avoidance algorithms&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#resource-allocation-graph-1&quot; id=&quot;markdown-toc-resource-allocation-graph-1&quot;&gt;7. Resource-Allocation Graph&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#algorithm&quot; id=&quot;markdown-toc-algorithm&quot;&gt;8. Algorithm&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#data-structures-for-the-bankers-algorithm&quot; id=&quot;markdown-toc-data-structures-for-the-bankers-algorithm&quot;&gt;(1) Data Structures for the Banker’s Algorithm&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#safety-algorithm&quot; id=&quot;markdown-toc-safety-algorithm&quot;&gt;(2) Safety Algorithm&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#linux-&quot; id=&quot;markdown-toc-linux-&quot;&gt;二、Linux 程式設計&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#shell-&quot; id=&quot;markdown-toc-shell-&quot;&gt;(一) Shell 簡介&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#variables&quot; id=&quot;markdown-toc-variables&quot;&gt;(二) 變數 (variables)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#quoting&quot; id=&quot;markdown-toc-quoting&quot;&gt;(三) 引號 (quoting)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#condition&quot; id=&quot;markdown-toc-condition&quot;&gt;(四) 條件判斷 (condition)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#if&quot; id=&quot;markdown-toc-if&quot;&gt;(五) 控制結構 - if&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#elif&quot; id=&quot;markdown-toc-elif&quot;&gt;(六) 控制結構 - elif&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#for&quot; id=&quot;markdown-toc-for&quot;&gt;(七) 控制結構 - for&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#example-1&quot; id=&quot;markdown-toc-example-1&quot;&gt;Example 1&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#example-2&quot; id=&quot;markdown-toc-example-2&quot;&gt;Example 2&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#while&quot; id=&quot;markdown-toc-while&quot;&gt;(八) 控制結構 - while&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#example-1-1&quot; id=&quot;markdown-toc-example-1-1&quot;&gt;Example 1&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#example-2-1&quot; id=&quot;markdown-toc-example-2-1&quot;&gt;Example 2&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#example-3&quot; id=&quot;markdown-toc-example-3&quot;&gt;Example 3&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#case&quot; id=&quot;markdown-toc-case&quot;&gt;(九) 控制結構 - case&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#example-1-2&quot; id=&quot;markdown-toc-example-1-2&quot;&gt;Example 1&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#example-2-2&quot; id=&quot;markdown-toc-example-2-2&quot;&gt;Example 2&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#and&quot; id=&quot;markdown-toc-and&quot;&gt;(十) 控制結構 - AND&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#example-1-3&quot; id=&quot;markdown-toc-example-1-3&quot;&gt;Example 1&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#or&quot; id=&quot;markdown-toc-or&quot;&gt;(十一) 控制結構 - OR&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#example-1-4&quot; id=&quot;markdown-toc-example-1-4&quot;&gt;Example 1&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;課堂作業&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;一、作業系統&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;課堂講義
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170511/ch07.pdf&quot;&gt;Chapter 7: Deadlocks&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;deadlock-characterization&quot;&gt;(一) Deadlock Characterization&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Mutual exclusion&lt;/strong&gt;：only one process at a time can use a resource.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hold and wait&lt;/strong&gt;：a process holding at least one resource is waiting to acquire additional resources held by other processes.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;No preemption&lt;/strong&gt;：a resource can be released only voluntarily by the process holding it, after that process has completed its task.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Circular wait&lt;/strong&gt;：there exists a set {P0, P1, …, Pn } of waiting processes such that P0 is waiting for a resource that is held by P1, P1 is waiting for a resource that is held by P2 , …, Pn–1 is waiting for a resource that is held by Pn, and Pn is waiting for a resource that is held by P0.&lt;/li&gt;
  &lt;li&gt;Deadlocks can occur via system calls, locking, etc&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;resource-allocation-graph&quot;&gt;(二) Resource-Allocation Graph&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/ruQSE03.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://i.imgur.com/jSnZ1nO.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;example&quot;&gt;1. Example&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Resource Allocation Graph
&lt;img src=&quot;https://i.imgur.com/e10FFPp.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Resource Allocation Graph With A Deadlock
&lt;img src=&quot;https://i.imgur.com/t2UkKLi.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Graph With A Cycle But No Deadlock
&lt;img src=&quot;https://i.imgur.com/3mqHz5J.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;basic-facts&quot;&gt;2. Basic Facts&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;If graph contains no cycles » no deadlock&lt;/li&gt;
  &lt;li&gt;If graph contains a cycle
    &lt;ul&gt;
      &lt;li&gt;if only one instance per resource type, then deadlock&lt;/li&gt;
      &lt;li&gt;if several instances per resource type, possibility of deadlock&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;methods-for-handling-deadlocks&quot;&gt;3. Methods for Handling Deadlocks&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Ensure that the system will never enter a deadlock state&lt;/li&gt;
  &lt;li&gt;Allow the system to enter a deadlock state and then recover&lt;/li&gt;
  &lt;li&gt;Ignore the problem and pretend that deadlocks never occur in the system; used by most operating systems, including UNIX&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;deadlock-prevention&quot;&gt;(三) Deadlock Prevention&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Mutual Exclusion&lt;/strong&gt;：not required for sharable resources; must hold for nonsharable resources&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hold and Wait&lt;/strong&gt;：must guarantee that whenever a process requests a resource, it does not hold any other resources
    &lt;ul&gt;
      &lt;li&gt;Require process to request and be allocated all its resources before it begins execution, or allow process to request resources only when the process has none&lt;/li&gt;
      &lt;li&gt;Low resource utilization; starvation possible&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;No Preemption&lt;/strong&gt;：
    &lt;ul&gt;
      &lt;li&gt;If a process that is holding some resources requests another resource that cannot be immediately allocated to it, then all resources currently being held are released&lt;/li&gt;
      &lt;li&gt;Preempted resources are added to the list of resources for which the process is waiting&lt;/li&gt;
      &lt;li&gt;Process will be restarted only when it can regain its old resources, as well as the new ones that it is requesting&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Circular Wait&lt;/strong&gt;：impose a total ordering of all resource types, and require that each process requests resources in an increasing order of enumeration&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;example-1&quot;&gt;1. Example&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Deadlock Example&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* thread one runs in this function */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pthread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pthread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/** * Do some work */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pthread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pthread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pthread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* thread two runs in this function */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;work&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pthread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pthread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/** * Do some work */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pthread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pthread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pthread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Deadlock Example with Lock Ordering&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lock1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lock2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;withdraw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;deposit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;deadlock-avoidance&quot;&gt;2. Deadlock Avoidance&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Requires that the system has some additional a priori information available
    &lt;ul&gt;
      &lt;li&gt;Simplest and most useful model requires that each process declare the &lt;strong&gt;maximum number&lt;/strong&gt; of resources of each type that it may need&lt;/li&gt;
      &lt;li&gt;The deadlock-avoidance algorithm dynamically examines the resource-allocation state to ensure that there can never be a circular-wait condition&lt;/li&gt;
      &lt;li&gt;Resource-allocation state is defined by the number of available and allocated resources, and the maximum demands of the processes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;safe-state&quot;&gt;3. Safe State&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Qzeh5D8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;basic-facts-1&quot;&gt;4. Basic Facts&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;If a system is in safe state » no deadlocks&lt;/li&gt;
  &lt;li&gt;If a system is in unsafe state » possibility of deadlock&lt;/li&gt;
  &lt;li&gt;Avoidance » ensure that a system will never enter an unsafe state&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;safe-unsafe-deadlock-state&quot;&gt;5. Safe, Unsafe, Deadlock State&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Y7KEMVp.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;avoidance-algorithms&quot;&gt;6. Avoidance algorithms&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Single instance of a resource type
    &lt;ul&gt;
      &lt;li&gt;Use a resource-allocation graph&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Multiple instances of a resource type
    &lt;ul&gt;
      &lt;li&gt;Use the banker’s algorithm&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;resource-allocation-graph-1&quot;&gt;7. Resource-Allocation Graph&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/aUkipvw.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://i.imgur.com/RtDzuXQ.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;algorithm&quot;&gt;8. Algorithm&lt;/h4&gt;
&lt;h5 id=&quot;data-structures-for-the-bankers-algorithm&quot;&gt;(1) Data Structures for the Banker’s Algorithm&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Z9SQSCC.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Example
&lt;img src=&quot;http://i.imgur.com/IMSADSw.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://i.imgur.com/CnQFX9s.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;safety-algorithm&quot;&gt;(2) Safety Algorithm&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/V6oA8hC.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;linux-&quot;&gt;二、Linux 程式設計&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;課程簡報
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170512/Linux_shell.pdf&quot;&gt;Linux_shell&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170512/Shell_practice.pdf&quot;&gt;Shell_practice&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;參考資料
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://linux.vbird.org/linux_basic/0340bashshell-scripts.php#script_why&quot;&gt;學習 Shell Scripts&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;shell-&quot;&gt;(一) Shell 簡介&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Shell 是使用者與 Linux 系統的介面，可以輸入命令，交由作業系統去執行。
    &lt;ul&gt;
      &lt;li&gt;Shell 快速且簡單&lt;/li&gt;
      &lt;li&gt;Shell 一般稱為 script&lt;/li&gt;
      &lt;li&gt;直譯式執行，容易除錯&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/xadWBBf.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;variables&quot;&gt;(二) 變數 (variables)&lt;/h3&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;salutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Hello
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$salutation&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;salutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Yes Dear&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$salutation&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;salutation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;7+5
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$salutation&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;執行結果
&lt;img src=&quot;https://i.imgur.com/jaY3g8G.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;quoting&quot;&gt;(三) 引號 (quoting)&lt;/h3&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;myvar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hi there&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$myvar&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$myvar&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;$myvar&#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\$&lt;/span&gt;myvar

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Please enter something...&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;myvar
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$myvar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;執行結果
&lt;img src=&quot;https://i.imgur.com/NobGb6l.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;condition&quot;&gt;(四) 條件判斷 (condition)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/enjX7FA.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://i.imgur.com/nVZTV1F.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;if&quot;&gt;(五) 控制結構 - if&lt;/h3&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Is it morning ?&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;timeofday

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$timeofday&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;yes&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Good morning&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Good afternoon&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;執行結果
&lt;img src=&quot;https://i.imgur.com/lSzTfpI.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;elif&quot;&gt;(六) 控制結構 - elif&lt;/h3&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Is it morning ?&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;timeofday

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$timeofday&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;yes&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Good morning&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$timeofday&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;no&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Good afternoon&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Sorry, &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$timeofday&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; not recognized&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;執行結果
&lt;img src=&quot;https://i.imgur.com/6T6jDMe.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;for&quot;&gt;(七) 控制結構 - for&lt;/h3&gt;
&lt;h5 id=&quot;example-1&quot;&gt;Example 1&lt;/h5&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;foo &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;bar fud 43
&lt;span class=&quot;k&quot;&gt;do
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$foo&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;執行結果
&lt;img src=&quot;https://i.imgur.com/rfV1Ra5.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;example-2&quot;&gt;Example 2&lt;/h5&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;1 2 3
&lt;span class=&quot;k&quot;&gt;do
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;執行結果
&lt;img src=&quot;https://i.imgur.com/0h1Rraa.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;while&quot;&gt;(八) 控制結構 - while&lt;/h3&gt;
&lt;h5 id=&quot;example-1-1&quot;&gt;Example 1&lt;/h5&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Enter password&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;trythis
    
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$trythis&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; !&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;secret&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Sorry, try again&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;trythis
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;執行結果
&lt;img src=&quot;https://i.imgur.com/bLumx82.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;example-2-1&quot;&gt;Example 2&lt;/h5&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$foo&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; -le 20 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Here we go again&quot;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;執行結果
&lt;img src=&quot;https://i.imgur.com/tr0Zi4C.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;example-3&quot;&gt;Example 3&lt;/h5&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; -ne 10 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done
&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;執行結果
&lt;img src=&quot;https://i.imgur.com/eeuK6q3.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;case&quot;&gt;(九) 控制結構 - case&lt;/h3&gt;
&lt;h5 id=&quot;example-1-2&quot;&gt;Example 1&lt;/h5&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Is it morning? Please answer &#39;Yes&#39;、&#39;y&#39;、&#39;No&#39;、&#39;n&#39;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;timeofday

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$timeofday&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
	&lt;/span&gt;Yes&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Good Morning&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
	No&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Good Aftrenoon&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
	y&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Good Morning&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
	n&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Good Aftrenoon&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Sorry, answer not recognized&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;執行結果
&lt;img src=&quot;https://i.imgur.com/Hnaa66Y.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;example-2-2&quot;&gt;Example 2&lt;/h5&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Is it morning? Please answer &#39;Yes&#39;、&#39;Y...&#39;、&#39;y&#39;、&#39;No&#39;、&#39;N...&#39;、&#39;n&#39;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;timeofday

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$timeofday&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
    &lt;/span&gt;Y&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; y &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; Yes&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Good Morning&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    N&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; n &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; No&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Good Aftrenoon&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Sorry, answer not recognized&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;執行結果
&lt;img src=&quot;https://i.imgur.com/Opd1dfC.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;and&quot;&gt;(十) 控制結構 - AND&lt;/h3&gt;
&lt;h5 id=&quot;example-1-3&quot;&gt;Example 1&lt;/h5&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
touch file_one
rm file_two

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -f file_one &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -f file_two &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;there&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;then 
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;in if&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;in else&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;執行結果
&lt;img src=&quot;https://i.imgur.com/P3wITc9.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;or&quot;&gt;(十一) 控制結構 - OR&lt;/h3&gt;
&lt;h5 id=&quot;example-1-4&quot;&gt;Example 1&lt;/h5&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
rm –f file_one

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -f file_one &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;there&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;in if&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;in else&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;執行結果
&lt;img src=&quot;https://i.imgur.com/POqHcOx.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-1&quot;&gt;課堂作業&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/UYMl9ZM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 12 May 2017 08:00:00 +0800</pubDate>
        <link>http://shouzo.github.io/2017/05/12/linux_system/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/05/12/linux_system/</guid>
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
      </item>
    
      <item>
        <title>20170505 [學習筆記] Linux 系統程式 (9)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;一、作業系統&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#semaphore&quot; id=&quot;markdown-toc-semaphore&quot;&gt;(一) Semaphore&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#usage&quot; id=&quot;markdown-toc-usage&quot;&gt;1. Usage&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#implementation&quot; id=&quot;markdown-toc-implementation&quot;&gt;2. Implementation&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#busy-waiting&quot; id=&quot;markdown-toc-busy-waiting&quot;&gt;(1) Busy waiting&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#with-no-busy-waiting&quot; id=&quot;markdown-toc-with-no-busy-waiting&quot;&gt;(2) with no Busy waiting&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#deadlock-and-starvation&quot; id=&quot;markdown-toc-deadlock-and-starvation&quot;&gt;(二) Deadlock and Starvation&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#classical-problems-of-synchronization&quot; id=&quot;markdown-toc-classical-problems-of-synchronization&quot;&gt;(三) Classical Problems of Synchronization&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#bounded-buffer-problem&quot; id=&quot;markdown-toc-bounded-buffer-problem&quot;&gt;1. Bounded-Buffer Problem&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#the-structure-of-the-producer-process&quot; id=&quot;markdown-toc-the-structure-of-the-producer-process&quot;&gt;(1) The structure of the producer process&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#the-structure-of-the-consumer-process&quot; id=&quot;markdown-toc-the-structure-of-the-consumer-process&quot;&gt;(2) The structure of the consumer process&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#readers-writers-problem&quot; id=&quot;markdown-toc-readers-writers-problem&quot;&gt;2. Readers-Writers Problem&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#the-structure-of-a-writer-process&quot; id=&quot;markdown-toc-the-structure-of-a-writer-process&quot;&gt;(1) The structure of a writer process&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#the-structure-of-a-reader-process&quot; id=&quot;markdown-toc-the-structure-of-a-reader-process&quot;&gt;(2) The structure of a reader process&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#problem&quot; id=&quot;markdown-toc-problem&quot;&gt;(3) Problem&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#dining-philosophers-problem&quot; id=&quot;markdown-toc-dining-philosophers-problem&quot;&gt;3. Dining-Philosophers Problem&lt;/a&gt;            &lt;ul&gt;
              &lt;li&gt;&lt;a href=&quot;#in-the-case-of-5-philosophers&quot; id=&quot;markdown-toc-in-the-case-of-5-philosophers&quot;&gt;(1) In the case of 5 philosophers&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#monitors&quot; id=&quot;markdown-toc-monitors&quot;&gt;(2) Monitors&lt;/a&gt;&lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#monitors-implementation&quot; id=&quot;markdown-toc-monitors-implementation&quot;&gt;Monitors Implementation&lt;/a&gt;                &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;#using-semaphores&quot; id=&quot;markdown-toc-using-semaphores&quot;&gt;1. Using Semaphores&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#condition-variables&quot; id=&quot;markdown-toc-condition-variables&quot;&gt;2. Condition Variables&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#resuming-processes&quot; id=&quot;markdown-toc-resuming-processes&quot;&gt;Resuming Processes&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;#allocate-single-resource&quot; id=&quot;markdown-toc-allocate-single-resource&quot;&gt;Allocate Single Resource&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
              &lt;li&gt;&lt;a href=&quot;#solution&quot; id=&quot;markdown-toc-solution&quot;&gt;(3) Solution&lt;/a&gt;&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#linux-&quot; id=&quot;markdown-toc-linux-&quot;&gt;二、Linux 程式設計&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#mmap&quot; id=&quot;markdown-toc-mmap&quot;&gt;(一) mmap&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#msync&quot; id=&quot;markdown-toc-msync&quot;&gt;(二) msync&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#munmap&quot; id=&quot;markdown-toc-munmap&quot;&gt;(三) munmap&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;課堂作業&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;一、作業系統&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;課程簡報
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170504/ch06.pdf&quot;&gt;Chapter 6: Process Scheduling&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;semaphore&quot;&gt;(一) Semaphore&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Synchronization tool that does not require busy waiting.&lt;/li&gt;
  &lt;li&gt;Semaphore S – integer variable&lt;/li&gt;
  &lt;li&gt;Two standard operations modify S: &lt;code class=&quot;highlighter-rouge&quot;&gt;wait()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;signal()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Less complicated&lt;/li&gt;
  &lt;li&gt;Can only be accessed via two indivisible (atomic) operations&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//busy wait
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;usage&quot;&gt;1. Usage&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Counting semaphore&lt;/strong&gt; – integer value can range over an unrestricted domain&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Binary semaphore&lt;/strong&gt; – integer value can range only between 0 and 1
    &lt;ul&gt;
      &lt;li&gt;Then a &lt;code class=&quot;highlighter-rouge&quot;&gt;mutex lock&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Can implement a counting semaphore S as a binary semaphore&lt;/li&gt;
  &lt;li&gt;Can solve various synchronization problems&lt;/li&gt;
  &lt;li&gt;Consider P1 and P2 that require S1 to happen before S2&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;nl&quot;&gt;P1:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;synch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;P2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;synch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;implementation&quot;&gt;2. Implementation&lt;/h4&gt;
&lt;h5 id=&quot;busy-waiting&quot;&gt;(1) Busy waiting&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Must guarantee that no two processes can execute &lt;code class=&quot;highlighter-rouge&quot;&gt;wait()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;signal()&lt;/code&gt; on the same semaphore at the same time&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Thus, implementation becomes the critical section problem where the wait and signal code are placed in the critical section&lt;/li&gt;
  &lt;li&gt;Could now have &lt;strong&gt;busy waiting&lt;/strong&gt; in critical section implementation
    &lt;ul&gt;
      &lt;li&gt;But implementation code is short&lt;/li&gt;
      &lt;li&gt;Little busy waiting if critical section rarely occupied&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Note that applications may spend lots of time in critical sections and therefore this is not a good solution&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;with-no-busy-waiting&quot;&gt;(2) with no Busy waiting&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;With each semaphore there is an associated waiting queue&lt;/li&gt;
  &lt;li&gt;Each entry in a waiting queue has two data items:
    &lt;ul&gt;
      &lt;li&gt;value (of type integer)&lt;/li&gt;
      &lt;li&gt;pointer to next record in the list&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Two operations:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt; – place the process invoking the operation on the appropriate waiting queue&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wakeup&lt;/code&gt; – remove one of processes in the waiting queue and place it in the ready queue&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// add this process to S-&amp;gt;list;
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// remove a process P from S-&amp;gt;list;
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;wakeup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;deadlock-and-starvation&quot;&gt;(二) Deadlock and Starvation&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Deadlock&lt;/strong&gt; – two or more processes are waiting indefinitely for an event that can be caused by only one of the waiting processes&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Let S and Q be two semaphores initialized to 1
&lt;img src=&quot;https://i.imgur.com/9cUghpD.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Starvation&lt;/strong&gt; – indefinite blocking
    &lt;ul&gt;
      &lt;li&gt;A process may never be removed from the semaphore queue in which it is suspended&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Priority Inversion&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Scheduling problem when lower-priority process holds a lock needed by higher-priority process&lt;/li&gt;
      &lt;li&gt;Solved via &lt;strong&gt;priority-inheritance protocol&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;classical-problems-of-synchronization&quot;&gt;(三) Classical Problems of Synchronization&lt;/h3&gt;
&lt;h4 id=&quot;bounded-buffer-problem&quot;&gt;1. Bounded-Buffer Problem&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;n buffers, each can hold one item
    &lt;ul&gt;
      &lt;li&gt;Semaphore &lt;code class=&quot;highlighter-rouge&quot;&gt;mutex&lt;/code&gt; initialized to the value 1&lt;/li&gt;
      &lt;li&gt;Semaphore &lt;code class=&quot;highlighter-rouge&quot;&gt;full&lt;/code&gt; initialized to the value 0&lt;/li&gt;
      &lt;li&gt;Semaphore &lt;code class=&quot;highlighter-rouge&quot;&gt;empty&lt;/code&gt; initialized to the value n&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;the-structure-of-the-producer-process&quot;&gt;(1) The structure of the producer process&lt;/h5&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* produce an item in next_produced */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* add next produced to the buffer */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;full&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&quot;the-structure-of-the-consumer-process&quot;&gt;(2) The structure of the consumer process&lt;/h5&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;full&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* remove an item from buffer to next_consumed */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* consume the item in next consumed */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;readers-writers-problem&quot;&gt;2. Readers-Writers Problem&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;A data set is shared among a number of concurrent processes
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Readers&lt;/strong&gt; - only read the data set; they do not perform any updates&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Writers&lt;/strong&gt; - can both read and write&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Problem&lt;/strong&gt; - allow multiple readers to read at the same time&lt;/li&gt;
  &lt;li&gt;Several variations of how readers and writers are treated – all involve priorities&lt;/li&gt;
  &lt;li&gt;Shared Data
    &lt;ul&gt;
      &lt;li&gt;Data set&lt;/li&gt;
      &lt;li&gt;Semaphore &lt;code class=&quot;highlighter-rouge&quot;&gt;rw_mutex&lt;/code&gt; initialized to 1&lt;/li&gt;
      &lt;li&gt;Semaphore &lt;code class=&quot;highlighter-rouge&quot;&gt;mutex&lt;/code&gt; initialized to 1&lt;/li&gt;
      &lt;li&gt;Integer &lt;code class=&quot;highlighter-rouge&quot;&gt;read_count&lt;/code&gt; initialized to 0&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;the-structure-of-a-writer-process&quot;&gt;(1) The structure of a writer process&lt;/h5&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rw_mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* writing is performed */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rw_mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&quot;the-structure-of-a-reader-process&quot;&gt;(2) The structure of a reader process&lt;/h5&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;read_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// only for the first reader entering
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rw_mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        
    &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// if the first reader wait for rw_mutex, other readers will be blocked on wait(mutex)
&lt;/span&gt;        
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/* reading is performed */&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
        
    &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;read_count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// only for the last reader leaving
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rw_mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&quot;problem&quot;&gt;(3) Problem&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;First variation&lt;/strong&gt; – no reader kept waiting unless writer has permission to use shared object&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Second variation&lt;/strong&gt; – once writer is ready, it performs write asap&lt;/li&gt;
  &lt;li&gt;Both may have starvation leading to even more variations&lt;/li&gt;
  &lt;li&gt;Problem is solved on some systems by kernel providing &lt;code class=&quot;highlighter-rouge&quot;&gt;reader-writer locks&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;dining-philosophers-problem&quot;&gt;3. Dining-Philosophers Problem&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Philosophers spend their lives thinking and eating&lt;/li&gt;
  &lt;li&gt;Don’t interact with their neighbors, occasionally try to pick up 2 chopsticks (one at a time) to eat from bowl
    &lt;ul&gt;
      &lt;li&gt;Need both to eat, then release both when done
&lt;img src=&quot;https://i.imgur.com/9W4qi3z.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;in-the-case-of-5-philosophers&quot;&gt;(1) In the case of 5 philosophers&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Shared data
    &lt;ul&gt;
      &lt;li&gt;Bowl of rice (data set)&lt;/li&gt;
      &lt;li&gt;Semaphore chopstick [5] initialized to 1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The structure of Philosopher i:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chopstick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chopStick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// eat
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chopstick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chopstick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// think
&lt;/span&gt;    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Incorrect use of semaphore operations:
    &lt;ul&gt;
      &lt;li&gt;signal (mutex) …. wait (mutex)&lt;/li&gt;
      &lt;li&gt;wait (mutex) … wait (mutex)&lt;/li&gt;
      &lt;li&gt;Omitting of wait (mutex) or signal (mutex) (or both)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Deadlock and starvation&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;monitors&quot;&gt;(2) Monitors&lt;/h5&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Et1mwXN.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A high-level abstraction that provides a convenient and effective mechanism for process synchronization&lt;/li&gt;
  &lt;li&gt;Abstract data type, internal variables only accessible by code within the procedure&lt;/li&gt;
  &lt;li&gt;Only one process may be active within the monitor at a time&lt;/li&gt;
  &lt;li&gt;But not powerful enough to model some synchronization schemes&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;monitors-implementation&quot;&gt;Monitors Implementation&lt;/h5&gt;
&lt;h6 id=&quot;using-semaphores&quot;&gt;1. Using Semaphores&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;Variables&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (initially = 1)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (initially = 0)
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Each procedure F will be replaced by&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Mutual exclusion within a monitor is ensured&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;condition-variables&quot;&gt;2. Condition Variables&lt;/h6&gt;

&lt;ul&gt;
  &lt;li&gt;For each condition variable x, we have:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// (initially = 0)
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;The operation &lt;code class=&quot;highlighter-rouge&quot;&gt;x.wait&lt;/code&gt; can be implemented as:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_sem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h6 id=&quot;resuming-processes&quot;&gt;Resuming Processes&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;If several processes queued on condition x, and x.signal() executed, which should be resumed?&lt;/li&gt;
  &lt;li&gt;FCFS frequently not adequate&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;conditional-wait&lt;/strong&gt; construct of the form x.wait(c)
    &lt;ul&gt;
      &lt;li&gt;Where c is &lt;strong&gt;priority number&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;Process with lowest number (highest priority) is scheduled next&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;allocate-single-resource&quot;&gt;Allocate Single Resource&lt;/h6&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;monitor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ResourceAllocator&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;busy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TRUE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;initialization&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;busy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h5 id=&quot;solution&quot;&gt;(3) Solution&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Each philosopher i invokes the operations &lt;code class=&quot;highlighter-rouge&quot;&gt;pickup()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;putdown()&lt;/code&gt; in the following sequence:
    &lt;ul&gt;
      &lt;li&gt;No deadlock, but starvation is possible.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;DiningPhilosophers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pickup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EAT&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DiningPhilosophers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;putdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;monitor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DiningPhilosophers&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THINKING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HUNGRY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EATING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;condition&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pickup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HUNGRY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EATING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;putdown&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THINKING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    
        &lt;span class=&quot;cm&quot;&gt;/* test left and right neighbors */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EATING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HUNGRY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EATING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EATING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;initialization_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;THINKING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;linux-&quot;&gt;二、Linux 程式設計&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;課程簡報
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/shouzo/Operating-System_pages/blob/master/class-tutorial/20170505/Working-with-files.pdf&quot;&gt;Working-with-files&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mmap&quot;&gt;(一) mmap&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;void *mmap(void *addr, size_t len, int port, int flags, int fildes, off_t off);&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;PORT_READ&lt;/li&gt;
      &lt;li&gt;PORT_WRITE&lt;/li&gt;
      &lt;li&gt;PORT_EXEC&lt;/li&gt;
      &lt;li&gt;PORT_NONE&lt;/li&gt;
      &lt;li&gt;MAP_PRIVATE&lt;/li&gt;
      &lt;li&gt;MAP_SHARED&lt;/li&gt;
      &lt;li&gt;MAP_FIXED&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;msync&quot;&gt;(二) msync&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int msync(void* addr, size_t len, int flags);&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;MS_AYSNC (非同步寫入)&lt;/li&gt;
      &lt;li&gt;MS_SYNC (同步寫入)&lt;/li&gt;
      &lt;li&gt;MS_INVALIDATE (再從檔案讀)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;munmap&quot;&gt;(三) munmap&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;int munmap(void * addr, size_t len);&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fprintf.c&lt;/code&gt;
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;time.h&amp;gt;
#define SIZE 100
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kt&quot;&gt;FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fptr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;srand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;fptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ans.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;open error &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;open success, start writing into file&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RAND_MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[%3d] = %3.3f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%3.3f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;fclose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/*---------------------------------------------------------- */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fptr2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ans.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fptr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;open error&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;open success, start reading from file&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fscanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fptr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%6f&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[%3d] = %3.3f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	
  &lt;span class=&quot;n&quot;&gt;fclose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fptr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;執行結果&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/WkwKXZJ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/vFysQAi.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;課堂作業&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;給予一個資料檔，計算其平均值與標準差。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;math.h&amp;gt;
#define SIZE 100
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fptr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fptr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;


    &lt;span class=&quot;cm&quot;&gt;/* Use fptr1 to calculate total and average */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fptr1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ans.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fptr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;open error&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
    
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;open success, fptr1 starts reading from file&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fscanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fptr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%6f&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[%3d] = %3.3f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;avg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fclose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fptr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;




    &lt;span class=&quot;cm&quot;&gt;/* Use fptr2 to calculate standard deviation */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fptr2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ans.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fptr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;open error&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
    
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;open success, fptr2 starts reading from file&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fscanf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fptr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%6f&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sigma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;fclose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fptr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;




    &lt;span class=&quot;cm&quot;&gt;/* Output */&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;The average = %f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;avg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The standard deviation = %f&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;執行結果
&lt;img src=&quot;https://i.imgur.com/W17ixQD.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 05 May 2017 08:00:00 +0800</pubDate>
        <link>http://shouzo.github.io/2017/05/05/linux_system/</link>
        <guid isPermaLink="true">http://shouzo.github.io/2017/05/05/linux_system/</guid>
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
        
        <category>Linux</category>
        
        <category>作業系統</category>
        
        <category>程式設計</category>
        
      </item>
    
  </channel>
</rss>
